[PROCEDURE]
NAME MatchWithoutComment
PROTOTYPE '(*CSTRING szText, *CSTRING szPattern, BYTE bMatchMode, * CSTRING szExtension),LONG'
PARAMETERS '(*CSTRING szText, *CSTRING szPattern, BYTE bMatchMode, * CSTRING szExtension)'
[COMMON]
FROM ABC Source
MODIFIED '2012/03/01' ' 7:38:38'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
DOO CLASS                      !Created 05/24/20  2:52PM by Do2Class by Carl Barnes
LookForCommentMarker    PROCEDURE()
LookForMatch            PROCEDURE()
ProcessText             PROCEDURE()
SplitTextIntoStatements PROCEDURE()
    END  !4 Routines Found


!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
CommentStyle         LONG
bInstring            BOOL(FALSE)
pCommentMarker       LONG
pMatch               LONG
szMatchText          CSTRING(1025)
CommentMarker        CSTRING(3)
StatementQueue       QUEUE
statement               &CSTRING
                     END
clText               &CSTRING
i                    LONG
j                    LONG
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
      CommentStyle = GetCommentStyle(szExtension)
      clText &= NEW CSTRING(SIZE(szText)+1)
      clText = szText
      j = LEN(clText)
      LOOP i = 1 TO j
         !replace tab characters with space
         IF clText[i] = '<9>'
            clText[i] = ' '
         END
      END
      clText = CLIP(LEFT(clText))
      IF CommentStyle = CommentStyleCpp
           IF clText[1 : 2] = '//'
              pMatch = 0
           ELSE
              DOO.ProcessText()
           END
      ELSIF CommentStyle = CommentStyleClarion
           IF clText[1] = '!'
              pMatch = 0
           ELSE
              DOO.ProcessText()
           END
      ELSIF CommentStyle = CommentStyleVB
           IF clText[1] = ''''
              pMatch = 0
           ELSE
              DOO.ProcessText()
           END
      ELSIF CommentStyle = CommentStylePython
           IF clText[1] = '#'
              pMatch = 0
           ELSE
              DOO.ProcessText()
           END
      ELSIF CommentStyle = CommentStyleSQL
           IF clText[1 : 2] = '--'
              pMatch = 0
           ELSE
              DOO.ProcessText()
           END
      ELSE
         pMatch = TRUE
      END
      DISPOSE(clText)
      RETURN pMatch

DOO.ProcessText   PROCEDURE()
indx                LONG

   CODE
      !break text into multiple statements
      DOO.SplitTextIntoStatements()
      !now loop through the queue and examine each statement on the line
      LOOP indx = 1 TO RECORDS(StatementQueue)
         GET(StatementQueue,indx)

         !find comment marker not in a string
         IF CommentStyle = CommentStyleCpp
              CommentMarker = '//'
              DOO.LookForCommentMarker()
         ELSIF CommentStyle = CommentStyleVB
              CommentMarker = ''''
              DOO.LookForCommentMarker()
         ELSIF CommentStyle = CommentStylePython
              CommentMarker = '#'
              DOO.LookForCommentMarker()
         ELSIF CommentStyle = CommentStyleSQL
              CommentMarker = '--'
              DOO.LookForCommentMarker()
         ELSE
              CommentMarker = '|'
              DOO.LookForCommentMarker()
              IF NOT pCommentMarker
                 CommentMarker = '!'
                 DOO.LookForCommentMarker()
              END
         END

         DOO.LookForMatch()
         IF pMatch
            BREAK
         END
      END

      !clean up newed strings
      LOOP indx = 1 TO RECORDS(StatementQueue)
         GET(StatementQueue,indx)
         DISPOSE(StatementQueue.statement)
         ASSERT(0,eqDBG & 'DISPOSE statement [' & ADDRESS(StatementQueue.statement) & ']')
         StatementQueue.statement &= NULL
         PUT(StatementQueue)
      END
      FREE(StatementQueue)
[END]
EMBED %LocalProcedures
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
DOO.SplitTextIntoStatements PROCEDURE()
i           LONG
j           LONG
chString    CSTRING(2)
chSeparator CSTRING(2)

   CODE
      CASE CommentStyle
        OF CommentStyleClarion
           chString = ''''
           chSeparator = ';'
        OF CommentStyleCpp
           chString = ''''
           chSeparator = ';'
        OF CommentStyleVB
           chString = '"'
           chSeparator = ':'
        OF CommentStylePython
           chString = '"'
           chSeparator = ';'
        OF CommentStyleSQL
           chString = '"'
           chSeparator = ';'
      END
      j = 1
      LOOP i = 1 TO LEN(szText)
        IF szText[i] = chString
           IF bInstring = TRUE
              IF i < LEN(szText)
                 IF szText[i+1] = chString
                    i += 1
                    !escaped quote so still in string
                 ELSE
                    bInstring = 1 - bInstring
                 END
              ELSE
                 bInString = FALSE
              END
           ELSE
              bInstring = TRUE
           END
        ! szRetVal      = CLIP(xFolder) !~Mar/16/09 added CLIP                        !; ASSERT(0,eqDBG&'szRetVal['& szRetVal &']')
        ELSIF ((CommentStyle = CommentStyleClarion) AND (szText[i] = '!' OR szText[i] = '|'))   OR |
              ((CommentStyle = CommentStyleCpp)     AND (szText[i : i+1] = '//'))               OR |
              ((CommentStyle = CommentStyleVB)      AND (szText[i] = ''''))                     OR |
              ((CommentStyle = CommentStylePython)  AND (szText[i] = '#'))                      OR |
              ((CommentStyle = CommentStyleSQL)     AND (szText[i : i+1] = '--'))
           IF bInstring = FALSE
              !rest of line is a comment
              StatementQueue.statement &= NEW CSTRING((i-j)+1)
              StatementQueue.statement = szText[j : i-1]
              ADD(StatementQueue)
              i = LEN(szText)
              j = i + 1
           END
        ELSIF szText[i] = chSeparator
           IF bInstring = FALSE
              StatementQueue.statement &= NEW CSTRING((i-j)+1)
              ASSERT(0,eqDBG & 'NEW statement [' & ADDRESS(StatementQueue.statement) & ']')
              StatementQueue.statement = szText[j : i-1]
              ADD(StatementQueue)
              j = i + 1
           END
        ELSE
        END
      END
      IF i > j
         StatementQueue.statement &= NEW CSTRING((i-j)+1)
         ASSERT(0,eqDBG & 'NEW statement [' & ADDRESS(StatementQueue.statement) & ']')
         StatementQueue.statement = szText[j : i-1]
         ADD(StatementQueue)
      END
   RETURN
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
DOO.LookForCommentMarker    PROCEDURE()
pStringEnd          LONG
pStringStart        LONG

   CODE
      LOOP pCommentMarker = 1 TO LEN(StatementQueue.statement)
         IF StatementQueue.statement[pCommentMarker : pCommentMarker+(LEN(CommentMarker)-1)] = CommentMarker
            BREAK
         END
      END
      IF pCommentMarker > LEN(StatementQueue.statement)
         pCommentMarker = 0
      END
      pStringStart = 0
      LOOP WHILE pCommentMarker
         LOOP pStringStart = 1 TO LEN(StatementQueue.statement)
            IF StatementQueue.statement[pStringStart] = ''''
               BREAK
            END
         END
         IF pStringStart < pCommentMarker
            LOOP pStringEnd = (pStringStart+1) TO LEN(StatementQueue.statement)
               IF StatementQueue.statement[pStringEnd] = ''''
                  BREAK
               END
            END
            IF pStringEnd > LEN(StatementQueue.statement)
               pStringEnd = 0
            END
            IF pStringEnd
               IF INRANGE(pCommentMarker,pStringStart,pStringEnd)
                  LOOP pCommentMarker = (pStringEnd+1) TO LEN(StatementQueue.statement)
                     IF StatementQueue.statement[pCommentMarker : pCommentMarker+(LEN(CommentMarker)-1)] = CommentMarker
                        BREAK
                     END
                  END
               ELSE
                  BREAK
               END
            ELSE
               BREAK
            END
         ELSE
            BREAK
         END
      END
   RETURN
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
DOO.LookForMatch   PROCEDURE()
  CODE
      IF pCommentMarker
         szMatchText = StatementQueue.statement[1 : pCommentMarker-1]
      ELSE
         szMatchText = StatementQueue.statement
      END

      IF BAND(bMatchMode,Match:Regular)   !regular expression
         pMatch = MATCH(szMatchText,szPattern,bMatchMode)
      ELSE
         IF BAND(bMatchMode,Match:NoCase)
            pMatch = INSTRING(UPPER(szPattern),UPPER(szMatchText),1)
         ELSE
            pMatch = INSTRING(szPattern,szMatchText,1)
         END
      END
   RETURN
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[CALLS]
GetCommentStyle

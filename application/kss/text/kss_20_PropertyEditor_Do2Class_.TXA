[PROCEDURE]
NAME PropertyEditor
PROTOTYPE '(*CSTRING szPropertyFile, LONG MaxStyleIndex),BOOL,PROC'
PARAMETERS '(*CSTRING szPropertyFile, LONG MaxStyleIndex)'
[COMMON]
DESCRIPTION 'Edit special properties files'
FROM ABC Window
MODIFIED '2017/08/07' '16:35:22'
[DATA]
[SCREENCONTROLS]
! PROMPT('b Properties Changed:'),USE(?bPropertiesChanged:Prompt)
! ENTRY(@s20),USE(bPropertiesChanged)
[REPORTCONTROLS]
! STRING(@s20),USE(bPropertiesChanged)
bPropertiesChanged       BOOL
!!> GUID('c7f0f302-ecda-43eb-8304-bc91df0c4dcd'),INITIAL('FALSE'),PROMPT('b Properties Changed:'),HEADER('b Properties Changed'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('sz Description:'),USE(?szDescription:Prompt)
! ENTRY(@s255),USE(szDescription)
[REPORTCONTROLS]
! STRING(@s255),USE(szDescription)
szDescription            CSTRING(256)
!!> GUID('d3c9bb89-e247-4934-97fa-60f6f0d00c57'),PROMPT('sz Description:'),HEADER('sz Description'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('sz Lexer:'),USE(?szLexer:Prompt)
! ENTRY(@s31),USE(szLexer)
[REPORTCONTROLS]
! STRING(@s31),USE(szLexer)
szLexer                  CSTRING(32)
!!> GUID('fe098c4a-0778-44bd-bc57-68a2fc5dcc63'),PROMPT('sz Lexer:'),HEADER('sz Lexer'),PICTURE(@s31),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('sz File Patterns:'),USE(?szFilePatterns:Prompt)
! ENTRY(@s255),USE(szFilePatterns)
[REPORTCONTROLS]
! STRING(@s255),USE(szFilePatterns)
szFilePatterns           CSTRING(2048)
!!> GUID('f7518589-001b-4c04-b8f1-365f98464a51'),PROMPT('sz File Patterns:'),HEADER('sz File Patterns'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('File Pattern Queue:'),USE(?FilePatternQueue:Prompt)
! ENTRY(@s20),USE(FilePatternQueue)
[REPORTCONTROLS]
! STRING(@s20),USE(FilePatternQueue)
FilePatternQueue         QUEUE,PRE(fpq)
!!> GUID('3af582d3-56a9-4566-8958-f2d6d7983ed3'),PROMPT('File Pattern Queue:'),HEADER('File Pattern Queue'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('Pattern:'),USE(?fpq:Pattern:Prompt)
! ENTRY(@s20),USE(fpq:Pattern)
[REPORTCONTROLS]
! STRING(@s20),USE(fpq:Pattern)
Pattern                    CSTRING(21)
!!> GUID('72bd324b-40f9-4cc6-a060-cfbcfd3a3f99'),PROMPT('Pattern:'),HEADER('Pattern'),PICTURE(@s20),TYPEMODE(INS)
                         END
!!> GUID('52269800-4052-4a3c-8c58-f8e5e79ede65')
[SCREENCONTROLS]
! PROMPT('List Box Queue:'),USE(?ListBoxQueue:Prompt)
! ENTRY(@s20),USE(ListBoxQueue)
[REPORTCONTROLS]
! STRING(@s20),USE(ListBoxQueue)
ListBoxQueue             QUEUE,PRE(lbq)
!!> GUID('1ab6a3c1-6185-4616-b811-0f4a9f661c56'),PROMPT('List Box Queue:'),HEADER('List Box Queue'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('Value:'),USE(?lbq:Value:Prompt)
! ENTRY(@s32),USE(lbq:Value)
[REPORTCONTROLS]
! STRING(@s32),USE(lbq:Value)
Value                      CSTRING(33)
!!> GUID('685be423-9cb8-4912-ac0f-670ae0a1f495'),PROMPT('Value:'),HEADER('Value'),PICTURE(@s32),TYPEMODE(INS)
                         END
!!> GUID('1a193bb2-f530-404a-9bc9-52f29a8d259a')
[SCREENCONTROLS]
! PROMPT('q Options:'),USE(?qOptions:Prompt)
! ENTRY(@s20),USE(qOptions)
[REPORTCONTROLS]
! STRING(@s20),USE(qOptions)
qOptions                 QUEUE,PRE(opt)
!!> GUID('4b06b273-de1d-4fed-896b-9c6fc55c0b4f'),PROMPT('q Options:'),HEADER('q Options'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('sz Option:'),USE(?opt:szOption:Prompt)
! ENTRY(@s255),USE(opt:szOption)
[REPORTCONTROLS]
! STRING(@s255),USE(opt:szOption)
szOption                   CSTRING(256)
!!> GUID('0f85cc83-26f8-4a78-b54d-590d8cac426e'),PROMPT('sz Option:'),HEADER('sz Option'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('sz Option Tip:'),USE(?opt:szOptionTip:Prompt)
! ENTRY(@s255),USE(opt:szOptionTip)
[REPORTCONTROLS]
! STRING(@s255),USE(opt:szOptionTip)
szOptionTip                CSTRING(256)
!!> GUID('9bf20e80-485e-47c4-9600-1e7e64a4155e'),PROMPT('sz Option Tip:'),HEADER('sz Option Tip'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('sz Value:'),USE(?opt:szValue:Prompt)
! ENTRY(@s255),USE(opt:szValue)
[REPORTCONTROLS]
! STRING(@s255),USE(opt:szValue)
szValue                    CSTRING(256)
!!> GUID('a70eaa7c-3b8b-47a2-9e3a-b481e710d461'),PROMPT('sz Value:'),HEADER('sz Value'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('Is Bool:'),USE(?opt:IsBool:Prompt)
! ENTRY(@s20),USE(opt:IsBool)
[REPORTCONTROLS]
! STRING(@s20),USE(opt:IsBool)
IsBool                     BOOL
!!> GUID('45f96732-c301-4c9c-91cf-c0c50d85133e'),PROMPT('Is Bool:'),HEADER('Is Bool'),PICTURE(@s20),TYPEMODE(INS)
                         END
!!> GUID('0c32d229-2e86-448c-b5b8-bd3ed0998699')
[SCREENCONTROLS]
! PROMPT('q Keywords:'),USE(?qKeywords:Prompt)
! ENTRY(@s20),USE(qKeywords)
[REPORTCONTROLS]
! STRING(@s20),USE(qKeywords)
qKeywords                QUEUE,PRE(kwd)
!!> GUID('fe33b47b-6cb6-4377-81f7-91b536ec3390'),PROMPT('q Keywords:'),HEADER('q Keywords'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('sz Description:'),USE(?kwd:szDescription:Prompt)
! ENTRY(@s255),USE(kwd:szDescription)
[REPORTCONTROLS]
! STRING(@s255),USE(kwd:szDescription)
szDescription              CSTRING(256)
!!> GUID('d4f84667-fada-474f-a500-77f5346f5b2d'),PROMPT('sz Description:'),HEADER('sz Description'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('sz Keyword Number:'),USE(?kwd:szKeywordNumber:Prompt)
! ENTRY(@s15),USE(kwd:szKeywordNumber)
[REPORTCONTROLS]
! STRING(@s15),USE(kwd:szKeywordNumber)
szKeywordNumber            CSTRING(16)
!!> GUID('73d5198d-d1db-480a-a780-ff8d19e3c21d'),PROMPT('sz Keyword Number:'),HEADER('sz Keyword Number'),PICTURE(@s15),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('sz Keywords:'),USE(?kwd:szKeywords:Prompt)
! ENTRY(@s255),USE(kwd:szKeywords)
[REPORTCONTROLS]
! STRING(@s255),USE(kwd:szKeywords)
szKeywords                 CSTRING(2048)
!!> GUID('124407a2-aaaf-4b5a-81f3-9010c51f35d1'),PROMPT('sz Keywords:'),HEADER('sz Keywords'),PICTURE(@s255),TYPEMODE(INS)
                         END
!!> GUID('8d6ca946-8cd1-480c-868a-fc4f44c0e7da')
[SCREENCONTROLS]
! PROMPT('q Styles:'),USE(?qStyles:Prompt)
! ENTRY(@s20),USE(qStyles)
[REPORTCONTROLS]
! STRING(@s20),USE(qStyles)
qStyles                  QUEUE,PRE(sty)
!!> GUID('a80f826e-3e14-4966-9114-f61fd5ba2f22'),PROMPT('q Styles:'),HEADER('q Styles'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('sz Description:'),USE(?sty:szDescription:Prompt)
! ENTRY(@s255),USE(sty:szDescription)
[REPORTCONTROLS]
! STRING(@s255),USE(sty:szDescription)
szDescription              CSTRING(256)
!!> GUID('b9595658-d5cb-4aec-a145-bcdfa8d79689'),PROMPT('sz Description:'),HEADER('sz Description'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('sz Style Number:'),USE(?sty:szStyleNumber:Prompt)
! ENTRY(@s15),USE(sty:szStyleNumber)
[REPORTCONTROLS]
! STRING(@s15),USE(sty:szStyleNumber)
szStyleNumber              CSTRING(16)
!!> GUID('266f5207-6168-4b37-9c7f-6052de89d472'),PROMPT('sz Style Number:'),HEADER('sz Style Number'),PICTURE(@s15),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('sz Font Name:'),USE(?sty:szFontName:Prompt)
! ENTRY(@s31),USE(sty:szFontName)
[REPORTCONTROLS]
! STRING(@s31),USE(sty:szFontName)
szFontName                 CSTRING(32)
!!> GUID('f20339ad-5bf8-4d8d-91d6-8735cd0dbad0'),PROMPT('sz Font Name:'),HEADER('sz Font Name'),PICTURE(@s31),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('n Font Size:'),USE(?sty:nFontSize:Prompt)
! ENTRY(@n3),USE(sty:nFontSize)
[REPORTCONTROLS]
! STRING(@n3),USE(sty:nFontSize)
nFontSize                  BYTE
!!> GUID('f1991aca-eab2-455f-b9a1-70ed7cb01f82'),PROMPT('n Font Size:'),HEADER('n Font Size'),PICTURE(@n3),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('n Font Style:'),USE(?sty:nFontStyle:Prompt)
! ENTRY(@n-14),USE(sty:nFontStyle),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(sty:nFontStyle),RIGHT(1)
nFontStyle                 LONG
!!> GUID('d3f6912c-33d2-47ed-b5de-4ffed76eca21'),PROMPT('n Font Style:'),HEADER('n Font Style'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('b Bold:'),USE(?sty:bBold:Prompt)
! ENTRY(@s20),USE(sty:bBold)
[REPORTCONTROLS]
! STRING(@s20),USE(sty:bBold)
bBold                      BOOL
!!> GUID('f2deb028-5b37-4516-bd29-ac1092e18837'),PROMPT('b Bold:'),HEADER('b Bold'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('b Eol Filled:'),USE(?sty:bEolFilled:Prompt)
! ENTRY(@s20),USE(sty:bEolFilled)
[REPORTCONTROLS]
! STRING(@s20),USE(sty:bEolFilled)
bEolFilled                 BOOL
!!> GUID('f923be4e-bfad-4e62-8c78-d0f8d9e880f5'),PROMPT('b Eol Filled:'),HEADER('b Eol Filled'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('b Hide:'),USE(?sty:bHide:Prompt)
! ENTRY(@s20),USE(sty:bHide)
[REPORTCONTROLS]
! STRING(@s20),USE(sty:bHide)
bHide                      BOOL
!!> GUID('679306ad-a269-4570-a083-0dfba9415eda'),PROMPT('b Hide:'),HEADER('b Hide'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('b Hot Spot:'),USE(?sty:bHotSpot:Prompt)
! ENTRY(@s20),USE(sty:bHotSpot)
[REPORTCONTROLS]
! STRING(@s20),USE(sty:bHotSpot)
bHotSpot                   BOOL
!!> GUID('81010d30-7619-418e-88fe-62603b92c6c4'),PROMPT('b Hot Spot:'),HEADER('b Hot Spot'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('b Italic:'),USE(?sty:bItalic:Prompt)
! ENTRY(@s20),USE(sty:bItalic)
[REPORTCONTROLS]
! STRING(@s20),USE(sty:bItalic)
bItalic                    BOOL
!!> GUID('bfab6008-0dd9-4856-abeb-f4919b4d1eec'),PROMPT('b Italic:'),HEADER('b Italic'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('b Underline:'),USE(?sty:bUnderline:Prompt)
! ENTRY(@s20),USE(sty:bUnderline)
[REPORTCONTROLS]
! STRING(@s20),USE(sty:bUnderline)
bUnderline                 BOOL
!!> GUID('314a41dc-d9b1-40a1-9549-0d4058cb86de'),PROMPT('b Underline:'),HEADER('b Underline'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('n Case Opt:'),USE(?sty:nCaseOpt:Prompt)
! ENTRY(@n3),USE(sty:nCaseOpt)
[REPORTCONTROLS]
! STRING(@n3),USE(sty:nCaseOpt)
nCaseOpt                   BYTE
!!> GUID('2fe3ab98-2947-4a83-b17a-57e35d11e8c5'),PROMPT('n Case Opt:'),HEADER('n Case Opt'),PICTURE(@n3),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('l Fore Color:'),USE(?sty:lForeColor:Prompt)
! ENTRY(@n-14),USE(sty:lForeColor),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(sty:lForeColor),RIGHT(1)
lForeColor                 LONG
!!> GUID('f9dc763a-7d4f-4af7-a2f7-1d790f787eed'),PROMPT('l Fore Color:'),HEADER('l Fore Color'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('l Back Color:'),USE(?sty:lBackColor:Prompt)
! ENTRY(@n-14),USE(sty:lBackColor),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(sty:lBackColor),RIGHT(1)
lBackColor                 LONG
!!> GUID('761c88bd-9cb6-4257-886d-4d6be75b88b3'),PROMPT('l Back Color:'),HEADER('l Back Color'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('sz Style Number:'),USE(?sty:szSort:Prompt)
! ENTRY(@s15),USE(sty:szSort)
[REPORTCONTROLS]
! STRING(@s15),USE(sty:szSort)
szSort                     CSTRING(16)
!!> GUID('273c73f4-8869-4c3c-b936-9f3e4cd0f871'),PROMPT('sz Style Number:'),HEADER('sz Style Number'),PICTURE(@s15),TYPEMODE(INS)
                         END
!!> GUID('83da5ec6-2ab5-4214-b5e9-452fc6a645d9')
[SCREENCONTROLS]
! PROMPT('sz Font Description:'),USE(?szFontDescription:Prompt)
! ENTRY(@s63),USE(szFontDescription)
[REPORTCONTROLS]
! STRING(@s63),USE(szFontDescription)
szFontDescription        CSTRING(64)
!!> GUID('c29066d6-9a61-48e0-b2e1-70aa79b057cd'),PROMPT('sz Font Description:'),HEADER('sz Font Description'),PICTURE(@s63),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('sz Fore Color:'),USE(?szForeColor:Prompt)
! ENTRY(@s30),USE(szForeColor)
[REPORTCONTROLS]
! STRING(@s30),USE(szForeColor)
szForeColor              CSTRING(31)
!!> GUID('d2c17931-eb03-4bb9-b703-32d1a7030c64'),PROMPT('sz Fore Color:'),HEADER('sz Fore Color'),PICTURE(@s30),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('sz Fore Color:'),USE(?szBackColor:Prompt)
! ENTRY(@s30),USE(szBackColor)
[REPORTCONTROLS]
! STRING(@s30),USE(szBackColor)
szBackColor              CSTRING(31)
!!> GUID('07886e16-4eec-464b-84a9-d81a9259d600'),PROMPT('sz Fore Color:'),HEADER('sz Fore Color'),PICTURE(@s30),TYPEMODE(INS)
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default', 'WindowToolbar')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('WindowManager')
WHEN  ('WindowToolbar') ('ToolbarClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(),BYTE,PROC,DERIVED', 'Kill {19}PROCEDURE(),BYTE,PROC,DERIVED', |
  'Reset {18}PROCEDURE(BYTE Force=0),DERIVED', 'TakeAccepted {11}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeEvent {14}PROCEDURE(),BYTE,PROC,DERIVED', 'TakeFieldEvent {9}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeNewSelection       PROCEDURE(),BYTE,PROC,DERIVED', 'TakeSelected {11}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeWindowEvent        PROCEDURE(),BYTE,PROC,DERIVED')

%ReturnValue FIELD  (bPropertiesChanged)
%WindowOperationMode DEFAULT  ('Use WINDOW setting')
%INISaveWindow LONG  (1)
%ProcedureDisableEnhanceFocus LONG  (0)
%ProcedureUseEnterInsteadTabOverride LONG  (0)
%WindowUseEnterInsteadTab LONG  (1)
%ProcedureUseEnterInsteadTabExcludeListCombo LONG  (0)
%ProcedureUseEnterInsteadTabEnableNextTabStop LONG  (0)
%ProcedureUseEnterInsteadTabExcludeG LONG  (1)
%WindowUseEnterInsteadTabExclude MULTI DEFAULT  ()
%GlobalObject DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('NO')
WHEN  ('WindowToolbar') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ThisWindow')
WHEN  ('WindowToolbar') ('Toolbar')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (0)
WHEN  ('WindowToolbar') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%WindowStyles MULTI LONG  ()
%WindowStyleFontName DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontSize DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontStyle DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontColor DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontCharSet DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStylePicture DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleOtherListboxes MULTI DEFAULT  ()
%ProcedureAutoBindFields MULTI LONG  ()
%ProcedureAutoBindField DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindFieldTPL DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindProcedures MULTI LONG  ()
%ProcedureAutoBindProcedure DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindProcedureTPL DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindFieldsIgnored MULTI LONG  ()
%ProcedureAutoBindFieldIgnored DEPEND %ProcedureAutoBindFieldsIgnored DEFAULT TIMES 0

%ProcedureAutoBindProceduresIgnored MULTI LONG  ()
%ProcedureAutoBindProcedureIgnored DEPEND %ProcedureAutoBindProceduresIgnored DEFAULT TIMES 0

%ProcedureAutoBindValidToAddField LONG  (0)
%ProcedureUserBindFields MULTI LONG  ()
%ProcedureUserBindField DEPEND %ProcedureUserBindFields FIELD TIMES 0

%ProcedureAutoBindFieldIgnore DEPEND %ProcedureAutoBindFields LONG TIMES 0

%ProcedureUserBindProcedures MULTI LONG  ()
%ProcedureUserBindProcedure DEPEND %ProcedureUserBindProcedures PROCEDURE TIMES 0

%ProcedureAutoBindProcedureIgnore DEPEND %ProcedureAutoBindProcedures LONG TIMES 0

%ProcedureUserBindExpressions MULTI LONG  ()
%ProcedureUserBindExpressionName DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ProcedureUserBindExpression DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ExtUITabIcon DEPEND %Control DEFAULT TIMES 0

%ExtUITabStyleOverrideGlobal DEPEND %Control LONG TIMES 0

%ExtUITabStyle DEPEND %Control DEFAULT TIMES 6
WHEN  ('') ('Default')
WHEN  ('?DeleteKeyword') ('Default')
WHEN  ('?InsertKeyword') ('Default')
WHEN  ('?Sheet') ('Default')
WHEN  ('?cmdCancel') ('Default')
WHEN  ('?lbKeywordValues') ('Default')

%ButtonAction DEPEND %Control DEFAULT TIMES 15
WHEN  ('') ('No Special Action')
WHEN  ('?ChangeFilePattern') ('No Special Action')
WHEN  ('?ChangeKeyword') ('No Special Action')
WHEN  ('?ChangeOption') ('No Special Action')
WHEN  ('?DeleteFilePattern') ('No Special Action')
WHEN  ('?DeleteKeyword') ('No Special Action')
WHEN  ('?InsertFilePattern') ('No Special Action')
WHEN  ('?InsertKeyword') ('No Special Action')
WHEN  ('?cmdCancel') ('No Special Action')
WHEN  ('?cmdFontDialog') ('No Special Action')
WHEN  ('?cmdSave') ('No Special Action')
WHEN  ('?cmdSelectBackColor') ('No Special Action')
WHEN  ('?cmdSelectCase') ('No Special Action')
WHEN  ('?cmdSelectForeColor') ('No Special Action')
WHEN  ('?lbKeywordValues') ('No Special Action')

%ButtonRunName DEPEND %Control DEFAULT TIMES 0

%ButtonRunParameters DEPEND %Control DEFAULT TIMES 0

%ButtonProcedure DEPEND %Control PROCEDURE TIMES 0

%ButtonThread DEPEND %Control LONG TIMES 0

%ButtonThreadStack DEPEND %Control DEFAULT TIMES 15
WHEN  ('') ('25000')
WHEN  ('?ChangeFilePattern') ('25000')
WHEN  ('?ChangeKeyword') ('25000')
WHEN  ('?ChangeOption') ('25000')
WHEN  ('?DeleteFilePattern') ('25000')
WHEN  ('?DeleteKeyword') ('25000')
WHEN  ('?InsertFilePattern') ('25000')
WHEN  ('?InsertKeyword') ('25000')
WHEN  ('?cmdCancel') ('25000')
WHEN  ('?cmdFontDialog') ('25000')
WHEN  ('?cmdSave') ('25000')
WHEN  ('?cmdSelectBackColor') ('25000')
WHEN  ('?cmdSelectCase') ('25000')
WHEN  ('?cmdSelectForeColor') ('25000')
WHEN  ('?lbKeywordValues') ('25000')

%ButtonParameters DEPEND %Control DEFAULT TIMES 0

%ButtonReturnValueAssignment DEPEND %Control FIELD TIMES 0

%ButtonReturnValueReferenceAssign DEPEND %Control LONG TIMES 0

%ButtonRequest DEPEND %Control DEFAULT TIMES 15
WHEN  ('') ('None')
WHEN  ('?ChangeFilePattern') ('None')
WHEN  ('?ChangeKeyword') ('None')
WHEN  ('?ChangeOption') ('None')
WHEN  ('?DeleteFilePattern') ('None')
WHEN  ('?DeleteKeyword') ('None')
WHEN  ('?InsertFilePattern') ('None')
WHEN  ('?InsertKeyword') ('None')
WHEN  ('?cmdCancel') ('None')
WHEN  ('?cmdFontDialog') ('None')
WHEN  ('?cmdSave') ('None')
WHEN  ('?cmdSelectBackColor') ('None')
WHEN  ('?cmdSelectCase') ('None')
WHEN  ('?cmdSelectForeColor') ('None')
WHEN  ('?lbKeywordValues') ('None')

%ButtonThreadParameters DEPEND %Control DEFAULT TIMES 0

%ButtonThreadReturnValueAssignment DEPEND %Control FIELD TIMES 0

%PreLookupKey DEPEND %Control KEY TIMES 0

%PreLookupField DEPEND %Control COMPONENT TIMES 0

%PreLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PreLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupKey DEPEND %Control KEY TIMES 0

%PostLookupField DEPEND %Control COMPONENT TIMES 0

%PostLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupDuringValidate DEPEND %Control LONG TIMES 9
WHEN  ('') (1)
WHEN  ('?DeleteKeyword') (1)
WHEN  ('?InsertKeyword') (1)
WHEN  ('?cmdCancel') (1)
WHEN  ('?lbKeywordValues') (1)
WHEN  ('?szBackColor') (1)
WHEN  ('?szDescription') (1)
WHEN  ('?szFontDescription') (1)
WHEN  ('?szForeColor') (1)

%LookupAssign DEPEND %Control MULTI LONG TIMES 0

%MoreTarget DEPEND %LookupAssign FIELD TIMES 0

%MoreField DEPEND %LookupAssign DEFAULT TIMES 0

%ForceWindowRefresh DEPEND %Control LONG TIMES 0

%CheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%CheckedAssignVariable DEPEND %CheckedAssigns FIELD TIMES 0

%CheckedAssignValue DEPEND %CheckedAssigns DEFAULT TIMES 0

%CheckedHides DEPEND %Control MULTI LONG TIMES 0

%CheckedControl DEPEND %CheckedHides DEFAULT TIMES 0

%CheckedControlAction DEPEND %CheckedHides DEFAULT TIMES 5
WHEN  ('')TIMES 0
WHEN  ('?DeleteKeyword')TIMES 0
WHEN  ('?InsertKeyword')TIMES 0
WHEN  ('?cmdCancel')TIMES 0
WHEN  ('?lbKeywordValues')TIMES 0

%CheckedEnables DEPEND %Control MULTI LONG TIMES 0

%CheckedControl1 DEPEND %CheckedEnables DEFAULT TIMES 0

%CheckedControl1Action DEPEND %CheckedEnables DEFAULT TIMES 5
WHEN  ('')TIMES 0
WHEN  ('?DeleteKeyword')TIMES 0
WHEN  ('?InsertKeyword')TIMES 0
WHEN  ('?cmdCancel')TIMES 0
WHEN  ('?lbKeywordValues')TIMES 0

%UncheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%UncheckedAssignVariable DEPEND %UncheckedAssigns FIELD TIMES 0

%UncheckedAssignValue DEPEND %UncheckedAssigns DEFAULT TIMES 0

%UnCheckedHides DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl DEPEND %UnCheckedHides DEFAULT TIMES 0

%UnCheckedControlAction DEPEND %UnCheckedHides DEFAULT TIMES 5
WHEN  ('')TIMES 0
WHEN  ('?DeleteKeyword')TIMES 0
WHEN  ('?InsertKeyword')TIMES 0
WHEN  ('?cmdCancel')TIMES 0
WHEN  ('?lbKeywordValues')TIMES 0

%UnCheckedEnables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl1 DEPEND %UnCheckedEnables DEFAULT TIMES 0

%UnCheckedControl1Action DEPEND %UnCheckedEnables DEFAULT TIMES 5
WHEN  ('')TIMES 0
WHEN  ('?DeleteKeyword')TIMES 0
WHEN  ('?InsertKeyword')TIMES 0
WHEN  ('?cmdCancel')TIMES 0
WHEN  ('?lbKeywordValues')TIMES 0

%CheckedDisables DEPEND %Control MULTI LONG TIMES 0

%CheckedDisableControl DEPEND %CheckedDisables DEFAULT TIMES 0

%CheckedDisableControlAction DEPEND %CheckedDisables DEFAULT TIMES 5
WHEN  ('')TIMES 0
WHEN  ('?DeleteKeyword')TIMES 0
WHEN  ('?InsertKeyword')TIMES 0
WHEN  ('?cmdCancel')TIMES 0
WHEN  ('?lbKeywordValues')TIMES 0

%UnCheckedDisables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedDisableControl DEPEND %UnCheckedDisables DEFAULT TIMES 0

%UnCheckedDisableControlAction DEPEND %UnCheckedDisables DEFAULT TIMES 5
WHEN  ('')TIMES 0
WHEN  ('?DeleteKeyword')TIMES 0
WHEN  ('?InsertKeyword')TIMES 0
WHEN  ('?cmdCancel')TIMES 0
WHEN  ('?lbKeywordValues')TIMES 0

%ProcedureOneInstance LONG  (0)
%FieldGradientColorType DEPEND %Control DEFAULT TIMES 4
WHEN  ('') ('Off')
WHEN  ('?BackColorBox') ('Off')
WHEN  ('?ForeColorBox') ('Off')
WHEN  ('?StyleGroup') ('Off')

%FieldGradientColorTypeVariable DEPEND %Control DEFAULT TIMES 4
WHEN  ('') ('')
WHEN  ('?BackColorBox') ('')
WHEN  ('?ForeColorBox') ('')
WHEN  ('?StyleGroup') ('')

%FieldGradientColorTypeIsVariable DEPEND %Control LONG TIMES 4
WHEN  ('') (0)
WHEN  ('?BackColorBox') (0)
WHEN  ('?ForeColorBox') (0)
WHEN  ('?StyleGroup') (0)

%FieldGradientColorFrom DEPEND %Control LONG TIMES 4
WHEN  ('') (-1)
WHEN  ('?BackColorBox') (-1)
WHEN  ('?ForeColorBox') (-1)
WHEN  ('?StyleGroup') (-1)

%FieldGradientColorFromVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorFromIsVariable DEPEND %Control LONG TIMES 4
WHEN  ('') (0)
WHEN  ('?BackColorBox') (0)
WHEN  ('?ForeColorBox') (0)
WHEN  ('?StyleGroup') (0)

%FieldGradientColorTo DEPEND %Control LONG TIMES 4
WHEN  ('') (-1)
WHEN  ('?BackColorBox') (-1)
WHEN  ('?ForeColorBox') (-1)
WHEN  ('?StyleGroup') (-1)

%FieldGradientColorToVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorToIsVariable DEPEND %Control LONG TIMES 4
WHEN  ('') (0)
WHEN  ('?BackColorBox') (0)
WHEN  ('?ForeColorBox') (0)
WHEN  ('?StyleGroup') (0)

%PreserveVarsLoc MULTI LONG  ()
%PreserveVarLoc DEPEND %PreserveVarsLoc DEFAULT TIMES 0

%ActiveImageEnable DEPEND %Control LONG TIMES 0

%AIObjectName DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('AIBtn0')

%AIEnableMimicControl DEPEND %Control LONG TIMES 1
WHEN  ('') (1)

%AIMimicControl DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('?Sheet')

%AIImgRound DEPEND %Control LONG TIMES 0

%AIOverrideImg DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgVariable DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIDisableImg DEPEND %Control DEFAULT TIMES 0

%AIDisableImgVariable DEPEND %Control DEFAULT TIMES 0

%AIDisableImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIHotImg DEPEND %Control DEFAULT TIMES 0

%AIHotImgVariable DEPEND %Control DEFAULT TIMES 0

%AIHotImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIPressedImg DEPEND %Control DEFAULT TIMES 0

%AIPressedImgVariable DEPEND %Control DEFAULT TIMES 0

%AIPressedImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
DOO CLASS                      !Created 05/24/20  3:33PM by Do2Class by Carl Barnes
AddStyleRecord                       PROCEDURE()
CheckForChanges                      PROCEDURE()
FillFilePatternQueue                 PROCEDURE()
FillListBoxQueue                     PROCEDURE()
LoadFilePatterns                     PROCEDURE()
LoadFilePatternsFromFilePatternQueue PROCEDURE()
LoadKeywords                         PROCEDURE()
LoadKeywordsFromListBoxQueue         PROCEDURE()
LoadOptions                          PROCEDURE()
LoadPropertyFile                     PROCEDURE()
LoadStyles                           PROCEDURE()
SaveFilePatterns                     PROCEDURE()
SaveKeywords                         PROCEDURE()
SaveOptions                          PROCEDURE()
SavePropertyFile                     PROCEDURE()
SaveStyles                           PROCEDURE()
SkipToNextSection                    PROCEDURE()
SkipToStyles                         PROCEDURE()
    END  !18 Routines Found


!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
RECORDSIZE     EQUATE(80)

filequeueIndx  LONG
filequeueMax   LONG
filequeue      QUEUE
record            CSTRING(SIZE(AsciiFile.Buffer))
               END
szBuffer       CSTRING(SIZE(AsciiFile.Buffer)+1)

DefaultErrors  GROUP
Number            USHORT(1)
                  USHORT(Msg:InsertIllegal)
                  BYTE(Level:Notify)
                  PSTRING('Invalid Request')
                  PSTRING('%message already exists')
               END

szDrive        CSTRING(MAXDRIVE+1)
szDir          CSTRING(MAXDIR+1)
szName         CSTRING(MAXFILE+1)
szExtension    CSTRING(MAXEXT+1)
cc             LONG

popupMenu      PopupClass
thisReq        BYTE
bDirty         BOOL(FALSE)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3000
PROPERTY:END
defaultFont    CSTRING(32)
defaultSize    BYTE
defaultStyle   LONG
defaultFore    LONG
defaultBack    LONG
defaultCase    BYTE
defaultHide    BOOL
defaultHot     BOOL
defaultEOLF    BOOL
nCurrentStyle  BYTE
lastComment    CSTRING(256)

saveFilePatterns  LIKE(szFilePatterns)
saveKeywordSet    GROUP,PRE(savkwd)
szDescription        CSTRING(256)                          !
szKeywordNumber      CSTRING(16)                           !
szKeywords           CSTRING(2048)                         !
                  END
saveStyle         GROUP,PRE(savsty)
szDescription        CSTRING(256)                          !
szStyleNumber        CSTRING(16)                           !
szFontName           CSTRING(32)                           !
nFontSize            BYTE                                  !
nFontStyle           LONG                                  !
bBold                BOOL                                  !
bEolFilled           BOOL                                  !
bHide                BOOL                                  !
bHotSpot             BOOL                                  !
bItalic              BOOL                                  !
bUnderline           BOOL                                  !
nCaseOpt             BYTE                                  !
lForeColor           LONG                                  !
lBackColor           LONG                                  !
szSort               CSTRING(16)                           !
                  END
[END]
EMBED %LocalProcedures
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
DOO.LoadPropertyFile     PROCEDURE()
  CODE
   cc = kcr_fnSplit(szPropertyFile, szDrive, szDir, szName, szExtension)

   AsciiFilename = szPropertyFile
   OPEN(AsciiFile,ReadOnly+DenyNone)
   IF ERRORCODE()
      !error opening file
   ELSE
      SET(AsciiFile)
      NEXT(AsciiFile)
      LOOP UNTIL ERRORCODE()

         filequeue.record = CLIP(AsciiFile.Buffer)
         ADD(filequeue)

         szBuffer = CLIP(LEFT(AsciiFile.Buffer))
         IF szBuffer = ''
            !skip
         ELSIF szBuffer[1] = '!'
            szBuffer[1] = ' '
            IF szDescription = ''
               szDescription = CLIP(LEFT(szBuffer))
            END
            LastComment = CLIP(LEFT(szBuffer))
         ELSE
            !process
            IF UPPER(szBuffer[1 : 6]) = 'LEXER='
               szLexer = LOWER(szBuffer[7 : LEN(szBuffer)])
            ELSIF UPPER(szBuffer[1 : 14]) = '[FILEPATTERNS]'
               DOO.LoadFilePatterns()
               CYCLE
            ELSIF UPPER(szBuffer[1 : 9]) = '[OPTIONS]'
               DOO.LoadOptions()
               CYCLE
            ELSIF UPPER(szBuffer[1 : 9])  = '[KEYWORDS'
               DOO.LoadKeywords()
               CYCLE
            ELSIF UPPER(szBuffer[1 : 8])  = '[STYLES]'
               DOO.LoadStyles()
               CYCLE
            END
         END
         NEXT(AsciiFile)
      END
      CLOSE(AsciiFile)
   END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
DOO.LoadFilePatterns     PROCEDURE()
  CODE
   NEXT(AsciiFile)
   LOOP UNTIL ERRORCODE()
      szBuffer = CLIP(LEFT(AsciiFile.Buffer))
      IF szBuffer = ''
         !skip
      ELSIF szBuffer[1] = '!'
         szBuffer[1] = ' '
         LastComment = CLIP(LEFT(szBuffer))
      ELSIF szBuffer[1] = '['
         szFilePatterns = CLIP(LEFT(szFilePatterns))
         BREAK
      ELSE
         szFilePatterns = szFilePatterns & ' ' & szBuffer
      END
      filequeue.record = CLIP(AsciiFile.Buffer)
      ADD(filequeue)
      NEXT(AsciiFile)
   END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
DOO.LoadOptions    PROCEDURE()
i     LONG
j     LONG
p     LONG

   CODE
      NEXT(AsciiFile)
      LOOP UNTIL ERRORCODE()
         szBuffer = CLIP(LEFT(AsciiFile.Buffer))
         IF szBuffer = ''
            !skip
         ELSIF szBuffer[1] = '!'
            lastComment = CLIP(LEFT(szBuffer[2 : LEN(szBuffer)]))
            !skip
         ELSIF szBuffer[1] = '['
            BREAK
         ELSE
            j = INSTRING(';',szBuffer)
            IF j = 0
               j = LEN(szBuffer)
            ELSE
               j -= 1
            END
            i = INSTRING('=',szBuffer)
            IF i
               qOptions.szOption = szBuffer[1 : i-1]
               qOptions.szOptionTip = ''
               IF j < LEN(szBuffer)
                  qOptions.szOptionTip = szBuffer[j+2 : LEN(szBuffer)]
                  p = INSTRING('||',qOptions.szOptionTip,1,1)
                  LOOP WHILE p > 0
                     qOptions.szOptionTip[p] = '<13>'
                     qOptions.szOptionTip[p+1] = '<10>'
                     p = INSTRING('||',qOptions.szOptionTip,1,p+2)
                  END
               END
               qOptions.szValue = szBuffer[i+1 : j]
               IF qOptions.szOption = 'asp.default.language'
                  CASE qOptions.szValue
                    OF '1'
                       qOptions.szValue = 'JavaScript'
                    OF '2'
                       qOptions.szValue = 'VBScript'
                    OF '3'
                       qOptions.szValue = 'Python'
                  END
                  qOptions.IsBool = FALSE
               ELSE
                  CASE qOptions.szValue
                    OF '0'
                       qOptions.szValue = 'false'
                       qOptions.IsBool = TRUE
                    OF '1'
                       qOptions.szValue = 'true'
                       qOptions.IsBool = TRUE
                  ELSE
                       qOptions.IsBool = FALSE
                  END
               END
               ADD(qOptions)
            END
         END
         filequeue.record = CLIP(AsciiFile.Buffer)
         ADD(filequeue)
         NEXT(AsciiFile)
      END
   RETURN
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
DOO.LoadKeywords         PROCEDURE()
  CODE
   szBuffer = CLIP(LEFT(AsciiFile.Buffer))
   qKeywords.szKeywordNumber = UPPER(szBuffer[2 : LEN(szBuffer)-1])
   GET(qKeywords,+qKeywords.szKeywordNumber)
   IF ERRORCODE()
      qKeywords.szKeywordNumber = UPPER(szBuffer[2 : LEN(szBuffer)-1])
      qKeywords.szDescription = lastComment
      qKeywords.szKeywords = ''
      ADD(qKeywords,+qKeywords.szDescription)
      !ADD(qKeywords,+qKeywords.szKeywordNumber)
   END
   NEXT(AsciiFile)
   LOOP UNTIL ERRORCODE()
      szBuffer = CLIP(LEFT(AsciiFile.Buffer))
      IF szBuffer = ''
         !skip
      ELSIF szBuffer[1] = '!'
         szBuffer[1] = ' '
         LastComment = CLIP(LEFT(szBuffer))
      ELSIF szBuffer[1] = '['
         qKeywords.szKeywords = CLIP(LEFT(qKeywords.szKeywords))
         PUT(qKeywords)
         BREAK
      ELSE
         qKeywords.szKeywords = qKeywords.szKeywords & ' ' & szBuffer
      END
      filequeue.record = CLIP(AsciiFile.Buffer)
      ADD(filequeue)
      NEXT(AsciiFile)
   END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
DOO.LoadStyles           PROCEDURE()
i           LONG
j           LONG
r           BYTE
g           BYTE
b           BYTE
qAttribute  QUEUE,PRE(att)
attribute      CSTRING(32)
            END
bDefault    BOOL

   CODE
      NEXT(AsciiFile)
      LOOP UNTIL ERRORCODE()
         szBuffer = CLIP(LEFT(AsciiFile.Buffer))
         IF szBuffer = ''
            !skip
         ELSIF szBuffer[1] = '!'
            szBuffer[1] = ' '
            LastComment = CLIP(LEFT(szBuffer))
         ELSIF szBuffer[1] = '['
            BREAK
         ELSE
            !Style#=font:,size:,bold,italic,underline,fore:,back:,eolfilled,case:,hide,hotSpot
            IF UPPER(szBuffer[1 : 5]) = 'STYLE'
               qStyles.szSort = UPPER(lastComment)
               j = INSTRING('=',szBuffer)
               IF qStyles.szSort = ''
                  IF j < 9
                     qStyles.szSort = 'STYLE' & ALL('0',9-j) & UPPER(szBuffer[6 : j-1])
                  ELSE
                     qStyles.szSort = UPPER(szBuffer[1 : j-1])
                  END
               END
               GET(qStyles,+qStyles.szSort)

               CLEAR(qStyles)
               IF j < 9
                  qStyles.szStyleNumber = 'STYLE' & ALL('0',9-j) & UPPER(szBuffer[6 : j-1])
               ELSE
                  qStyles.szStyleNumber = UPPER(szBuffer[1 : j-1])

               END
               qStyles.szDescription = lastComment
               qStyles.szFontName = ''
               qStyles.nFontStyle = FONT:regular
               qStyles.lForeColor = COLOR:NONE
               qStyles.lBackColor = COLOR:NONE
               qStyles.szSort = UPPER(lastComment)
               IF qStyles.szSort = ''
                  j = INSTRING('=',szBuffer)
                  IF j < 9
                     qStyles.szSort = 'STYLE' & ALL('0',9-j) & UPPER(szBuffer[6 : j-1])
                  ELSE
                     qStyles.szSort = UPPER(szBuffer[1 : j-1])
                  END
               END
               ADD(qStyles,+qStyles.szSort,qStyles.szStyleNumber)

               IF qStyles.szStyleNumber = 'STYLE032'
                  bDefault = TRUE
                  qStyles.nCaseOpt = 1
               ELSE
                  bDefault = FALSE
               END

               FREE(qAttribute)
               j += 1
               i = INSTRING(',',szBuffer,,j)
               LOOP WHILE i > 0
                  qAttribute.attribute = szBuffer[j : i-1]
                  ADD(qAttribute)
                  j = i+1
                  i = INSTRING(',',szBuffer,,j)
               END
               qAttribute.attribute = szBuffer[j : LEN(szBuffer)]
               ADD(qAttribute)

               j = RECORDS(qAttribute)
               LOOP i = 1 TO j
                  GET(qAttribute,i)
                  CASE UPPER(qAttribute.attribute[1 : 4])
                    OF 'FONT'
                       qStyles.szFontName = qAttribute.attribute[6 : LEN(qAttribute.attribute)]
                    OF 'SIZE'
                       qStyles.nFontSize = qAttribute.attribute[6 : LEN(qAttribute.attribute)]
                    OF 'BOLD'
                       qStyles.bBold = TRUE
                       qStyles.nFontStyle = BXOR(qStyles.nFontStyle,FONT:regular)
                       qStyles.nFontStyle = BOR(qStyles.nFontStyle,FONT:bold)
                    OF 'ITAL'
                       qStyles.bItalic = TRUE
                       qStyles.nFontStyle = BOR(qStyles.nFontStyle,FONT:italic)
                    OF 'UNDE'
                       qStyles.bUnderline = TRUE
                       qStyles.nFontStyle = BOR(qStyles.nFontStyle,FONT:underline)
                    OF 'FORE' !fore:#rrggbb
                       r = EVALUATE('0' & qAttribute.attribute[7  :  8] & 'h')
                       g = EVALUATE('0' & qAttribute.attribute[9  : 10] & 'h')
                       b = EVALUATE('0' & qAttribute.attribute[11 : 12] & 'h')
                       qStyles.lForeColor = ColourRGB(r,g,b)
                    OF 'BACK'
                       r = EVALUATE('0' & qAttribute.attribute[7  :  8] & 'h')
                       g = EVALUATE('0' & qAttribute.attribute[9  : 10] & 'h')
                       b = EVALUATE('0' & qAttribute.attribute[11 : 12] & 'h')
                       qStyles.lBackColor = ColourRGB(r,g,b)
                    OF 'EOLF'
                       qStyles.bEolFilled = TRUE
                    OF 'HIDE'
                       qStyles.bHide = TRUE
                    OF 'CASE'
                       qStyles.nCaseOpt = qAttribute.attribute[6 : LEN(qAttribute.attribute)]
                       qStyles.nCaseOpt += 1
                    OF 'HOTS'
                       qStyles.bHotSpot = TRUE
                  END
               END
               !look for default style
               IF bDefault
                  defaultFont  = qStyles.szFontName
                  defaultSize  = qStyles.nFontSize
                  defaultStyle = qStyles.nFontStyle
                  defaultFore  = qStyles.lForeColor
                  defaultBack  = qStyles.lBackColor
                  defaultCase  = qStyles.nCaseOPt
                  defaultHide  = qStyles.bHide
                  defaultHot   = qStyles.bHotSpot
                  defaultEOLF  = qStyles.bEolFilled
               END
               PUT(qStyles)
            END
         END
         filequeue.record = CLIP(AsciiFile.Buffer)
         ADD(filequeue)
         NEXT(AsciiFile)
      END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
DOO.SavePropertyFile     PROCEDURE()
  CODE
   ThisWindow.Update()

   AsciiFilename = svSpecialFolder.GetDir(SV:CSIDL_APPDATA, 'Devuna' & '\' & 'KSS') & '\' & szName & szExtension
   IF FILEDIALOG('Save As ...',AsciiFilename,'KSS properties files|*.properties',BOR(BOR(FILE:Save,FILE:KeepDir),FILE:LongName))

      CREATE(AsciiFile)
      OPEN(AsciiFile,ReadWrite+DenyAll)

      filequeueMax = RECORDS(filequeue)
      LOOP filequeueIndx = 1 TO filequeueMax
         GET(filequeue,filequeueIndx)
         szBuffer = CLIP(LEFT(filequeue.record))
         IF szBuffer = ''
            AsciiFile.Buffer = filequeue.record
            ADD(AsciiFile)
         ELSIF szBuffer[1] = '!'
            IF filequeueIndx = 1
               AsciiFile.Buffer = '! ' & szDescription
               ADD(AsciiFile)
            ELSE
               AsciiFile.Buffer = filequeue.record
               ADD(AsciiFile)
            END
         ELSIF UPPER(szBuffer[1 : 6]) = 'LEXER='
            AsciiFile.Buffer = 'Lexer=' & szLexer
            ADD(AsciiFile)
         ELSIF UPPER(szBuffer[1 : 14]) = '[FILEPATTERNS]'
            AsciiFile.Buffer = filequeue.record
            ADD(AsciiFile)
            DOO.SaveFilePatterns()
            DOO.SkipToNextSection()
         ELSIF UPPER(szBuffer[1 : 9]) = '[OPTIONS]'
            AsciiFile.Buffer = filequeue.record
            ADD(AsciiFile)
            DOO.SaveOptions()
            DOO.SkipToNextSection()
            filequeueIndx += 1
         ELSIF UPPER(szBuffer[1 : 9])  = '[KEYWORDS'
            DOO.SaveKeywords()
            DOO.SkipToStyles()
            filequeueIndx += 1
         ELSIF UPPER(szBuffer[1 : 8])  = '[STYLES]'
            AsciiFile.Buffer = filequeue.record
            ADD(AsciiFile)
            DOO.SaveStyles()
            BREAK
         ELSE
            AsciiFile.Buffer = filequeue.record
            ADD(AsciiFile)
         END
      END   !loop

      CLOSE(AsciiFile)

   END   !if filedialog
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
DOO.SaveFilePatterns  PROCEDURE()
p     LONG

   CODE
      IF ?szFilePatterns{PROP:Hide} = TRUE
         DOO.LoadFilePatternsFromFilePatternQueue()
      END
      LOOP WHILE LEN(szFilePatterns) > RECORDSIZE
         LOOP p = RECORDSIZE TO 1 BY -1
           IF szFilePatterns[p] = ' '
              AsciiFile.Buffer = szFilePatterns[1 : p-1]
              ADD(AsciiFile)
              szFilePatterns = szFilePatterns[p+1 : LEN(szFilePatterns)]
              BREAK
           END
         END
         IF p = 0
            BREAK
         END
      END
      AsciiFile.Buffer = szFilePatterns
      ADD(AsciiFile)
   RETURN
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
DOO.SaveOptions    PROCEDURE()
n     LONG
p     LONG

   CODE
      LOOP n = 1 TO RECORDS(qOptions)
         GET(qOptions,n)
         IF qOptions.szOption = 'asp.default.language'
            CASE qOptions.szValue
              OF 'JavaScript'
                 AsciiFile.Buffer = qOptions.szOption & '=1'
              OF 'VBScript'
                 AsciiFile.Buffer = qOptions.szOption & '=2'
              OF 'Python'
                 AsciiFile.Buffer = qOptions.szOption & '=3'
            END
         ELSE
            CASE qOptions.szValue
              OF 'false'
                 AsciiFile.Buffer = qOptions.szOption & '=0'
              OF 'true'
                 AsciiFile.Buffer = qOptions.szOption & '=1'
            ELSE
                 AsciiFile.Buffer = qOptions.szOption & '=' & qOptions.szValue
            END
         END
         IF qOptions.szOptionTip <> ''
            p = INSTRING('<13,10>',qOptions.szOptionTip,1,1)
            LOOP WHILE p > 0
               qOptions.szOptionTip[p] = '|'
               qOptions.szOptionTip[p+1] = '|'
               p = INSTRING('<13,10>',qOptions.szOptionTip,1,p+2)
            END
            AsciiFile.Buffer = CLIP(AsciiFile.Buffer) & ';' & qOptions.szOptionTip
         END
         ADD(AsciiFile)
      END
      AsciiFile.Buffer = ''
      ADD(AsciiFile)
   RETURN
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
DOO.SaveKeywords      PROCEDURE()
n     LONG
P     LONG
   CODE
      IF ?kwd:szKeywords{PROP:Hide} = TRUE
         DOO.LoadKeywordsFromListBoxQueue()
      END
      !add the keyword groups
      SORT(qKeywords,qKeywords.szKeywordNumber)
      LOOP n = 1 TO RECORDS(qKeywords)
         GET(qKeyWords,n)
         AsciiFile.Buffer = '! ' & qKeywords.szDescription
         ADD(AsciiFile)
         AsciiFile.Buffer = '[' & qKeywords.szKeywordNumber & ']'
         ADD(AsciiFile)

         LOOP WHILE LEN(qKeywords.szKeywords) > recordSize
            LOOP p = recordSize TO 1 BY -1
              IF qKeywords.szKeywords[p] = ' '
                 AsciiFile.Buffer = qKeywords.szKeywords[1 : p-1]
                 ADD(AsciiFile)
                 qKeywords.szKeywords = qKeywords.szKeywords[p+1 : LEN(qKeywords.szKeywords)]
                 BREAK
              END
            END
            IF p = 0
               BREAK
            END
         END
         AsciiFile.Buffer = qKeywords.szKeywords
         ADD(AsciiFile)
         AsciiFile.Buffer = ''
         ADD(AsciiFile)
      END
   RETURN
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
DOO.SaveStyles     PROCEDURE()
n           LONG
tempBuffer  CSTRING(SIZE(AsciiFile.Buffer)+1)

   CODE
      !write out any comments before styles
      filequeueIndx += 1
      GET(filequeue,filequeueIndx)
      szBuffer = CLIP(LEFT(filequeue.record))
      LOOP WHILE szBuffer = '' OR szBuffer[1] = '!'
         IF szBuffer[1] = '!'
            GET(filequeue,filequeueIndx+1)
            tempBuffer = UPPER(CLIP(LEFT(filequeue.record)))
            GET(filequeue,filequeueIndx)
            IF tempBuffer[1 : 5] = 'STYLE'
               BREAK
            END
         END
         AsciiFile.Buffer = filequeue.record
         ADD(AsciiFile)
         filequeueIndx += 1
         GET(filequeue,filequeueIndx)
         szBuffer = CLIP(LEFT(filequeue.record))
      END

      !add the styles
      !Style#=font:,size:,bold,italic,underline,fore:,back:,eolfilled,case:,hide,hotSpot
      !get default style
      SORT(qStyles,+qStyles.szStyleNumber)

      qStyles.szStyleNumber = 'STYLE032'
      GET(qStyles,+qStyles.szStyleNumber)
      IF NOT ERRORCODE()
         DOO.AddStyleRecord()
      END

      LOOP n = 1 TO RECORDS(qStyles)
         GET(qStyles,n)
         IF qStyles.szStyleNumber = 'STYLE032'
            CYCLE
         ELSE
            DOO.AddStyleRecord()
         END
      END   !styles loop
   RETURN
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
DOO.SkipToNextSection PROCEDURE()
  CODE
   LOOP WHILE filequeueIndx < filequeueMax
      GET(fileQueue,filequeueIndx+1)
      szBuffer = CLIP(LEFT(filequeue.record))
      IF szBuffer[1] = '['
         filequeueIndx -= 1
         BREAK
      ELSE
         filequeueIndx += 1
      END
   END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
DOO.SkipToStyles      PROCEDURE()
  CODE
   LOOP WHILE filequeueIndx < filequeueMax
      GET(fileQueue,filequeueIndx+1)
      szBuffer = CLIP(LEFT(filequeue.record))
      IF UPPER(szBuffer[1 : 8])  = '[STYLES]'
         filequeueIndx -= 1
         BREAK
      ELSE
         filequeueIndx += 1
      END
   END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
DOO.AddStyleRecord    PROCEDURE()
szBuffer    CSTRING(SIZE(AsciiFile.Buffer)+1)

   CODE
      AsciiFile.Buffer = '! ' & qStyles.szDescription
      ADD(AsciiFile)
      szBuffer = qStyles.szStyleNumber & '='
      IF qStyles.szFontName <> ''
         szBuffer = szBuffer & 'font:' & qStyles.szFontName & ','
      END
      IF qStyles.nFontSize > 0
         szBuffer = szBuffer & 'size:' & qStyles.nFontSize & ','
      END
      IF qStyles.bBold = TRUE
         szBuffer = szBuffer & 'bold' & ','
      END
      IF qStyles.bItalic = TRUE
         szBuffer = szBuffer & 'italic' & ','
      END
      IF qStyles.bUnderline = TRUE
         szBuffer = szBuffer & 'underline' & ','
      END
      IF qStyles.lForeColor <> COLOR:NONE
         szBuffer = szBuffer & 'fore:' & srcGetRGBColorString(qStyles.lForeColor) & ','
      END
      IF qStyles.lBackColor <> COLOR:NONE
         szBuffer = szBuffer & 'back:' & srcGetRGBColorString(qStyles.lBackColor) & ','
      END
      IF qStyles.bEolFilled = TRUE
         szBuffer = szBuffer & 'eolfilled' & ','
      END
      IF qStyles.nCaseOpt > 0
         szBuffer = szBuffer & 'case:' & qStyles.nCaseOpt-1 & ','
      END
      IF qStyles.bHide = TRUE
         szBuffer = szBuffer & 'hide' & ','
      END
      IF qStyles.bHotSpot = TRUE
         szBuffer = szBuffer & 'hotspot' & ','
      END
      IF szBuffer[LEN(szBuffer)] = ','
         szBuffer[LEN(szBuffer)] = '<0>'
      END
      AsciiFile.Buffer = szBuffer
      ADD(AsciiFile)
   RETURN
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
DOO.FillFilePatternQueue     PROCEDURE()
i     LONG
j     LONG

   CODE
      FREE(FilePatternQueue)
      j = 1
      i = INSTRING(' ',szFilePatterns,,j)
      LOOP WHILE i > 0
         FilePatternQueue.Pattern =szFilePatterns[j : i-1]
         ADD(FilePatternQueue,+FilePatternQueue.Pattern)
         j = i+1
         i = INSTRING(' ',szFilePatterns,,j)
      END
      FilePatternQueue.Pattern = szFilePatterns[j : LEN(szFilePatterns)]
      ADD(FilePatternQueue,+FilePatternQueue.Pattern)

      IF RECORDS(FilePatternQueue)
         ?ChangeFilePattern{PROP:Disable} = FALSE
         ?DeleteFilePattern{PROP:Disable} = FALSE
      ELSE
         ?ChangeFilePattern{PROP:Disable} = TRUE
         ?DeleteFilePattern{PROP:Disable} = TRUE
      END
      GET(FilePatternQueue,1)
      ?lbFilePatterns{PROP:Selected} = 1
   RETURN
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
DOO.LoadFilePatternsFromFilePatternQueue     PROCEDURE()
i     LONG
j     LONG

   CODE
      szFilePatterns = ''
      SORT(FilePatternQueue,+FilePatternQueue.Pattern)
      j = RECORDS(FilePatternQueue)
      LOOP i = 1 TO j
         GET(FilePatternQueue,i)
         szFilePatterns = szFilePatterns & FilePatternQueue.Pattern & ' '
      END
      szFilePatterns[LEN(szFilePatterns)] = '<0>'
   RETURN
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
DOO.FillListBoxQueue     PROCEDURE()
i     LONG
j     LONG

   CODE
      FREE(ListBoxQueue)

      GET(qKeywords,CHOICE(?lbKeywords))
      j = 1
      i = INSTRING(' ',qKeywords.szKeywords,,j)
      LOOP WHILE i > 0
         ListBoxQueue.Value = qKeywords.szKeywords[j : i-1]
         ADD(ListBoxQueue,+ListBoxQueue.Value)
         j = i+1
         i = INSTRING(' ',qKeywords.szKeywords,,j)
      END
      ListBoxQueue.Value = qKeywords.szKeywords[j : LEN(qKeywords.szKeywords)]
      ADD(ListBoxQueue,+ListBoxQueue.Value)

      IF RECORDS(ListBoxQueue)
         ?ChangeKeyword{PROP:Disable} = FALSE
         ?DeleteKeyword{PROP:Disable} = FALSE
      ELSE
         ?ChangeKeyword{PROP:Disable} = TRUE
         ?DeleteKeyword{PROP:Disable} = TRUE
      END
      GET(ListBoxQueue,1)
      ?lbKeywordValues{PROP:Selected} = 1
   RETURN
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
DOO.LoadKeywordsFromListBoxQueue     PROCEDURE()
i     LONG
j     LONG

   CODE
      qKeywords.szKeywords = ''
      SORT(ListBoxQueue,+ListBoxQueue.Value)
      j = RECORDS(ListBoxQueue)
      LOOP i = 1 TO j
         GET(ListBoxQueue,i)
         qKeywords.szKeywords = qKeywords.szKeywords & ListBoxQueue.Value & ' '
      END
      qKeywords.szKeywords[LEN(qKeywords.szKeywords)] = '<0>'
      PUT(qKeywords)
   RETURN
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
DOO.CheckForChanges   PROCEDURE()
  CODE
   IF bDirty = FALSE
      IF saveFilePatterns <> '' AND saveFilePatterns <> szFilePatterns
         bDirty = TRUE
      END

      IF bDirty = FALSE AND saveKeywordSet.szKeywordNumber <> ''
         IF saveKeywordSet.szDescription <> qKeywords.szDescription     |
         OR saveKeywordSet.szKeywordNumber <> qKeywords.szKeywordNumber |
         OR saveKeywordSet.szKeywords <> qKeywords.szKeywords
            bDirty = TRUE
         END
      END

      IF bDirty = FALSE AND saveStyle.szStyleNumber <> ''
         IF saveStyle.szDescription <> qStyles.szDescription   |
         OR saveStyle.szStyleNumber <> qStyles.szStyleNumber   |
         OR saveStyle.szFontName    <> qStyles.szFontName      |
         OR saveStyle.nFontSize     <> qStyles.nFontSize       |
         OR saveStyle.nFontStyle    <> qStyles.nFontStyle      |
         OR saveStyle.bBold         <> qStyles.bBold           |
         OR saveStyle.bEolFilled    <> qStyles.bEolFilled      |
         OR saveStyle.bHide         <> qStyles.bHide           |
         OR saveStyle.bHotSpot      <> qStyles.bHotSpot        |
         OR saveStyle.bItalic       <> qStyles.bItalic         |
         OR saveStyle.bUnderline    <> qStyles.bUnderline      |
         OR saveStyle.nCaseOpt      <> qStyles.nCaseOpt        |
         OR saveStyle.lForeColor    <> qStyles.lForeColor      |
         OR saveStyle.lBackColor    <> qStyles.lBackColor
            bDirty = TRUE
         END
      END
   END
[END]
EMBED %WindowManagerMethodCodeSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2700
PROPERTY:END
GlobalErrors.AddErrors(DefaultErrors)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5050
PROPERTY:END
popupMenu.Init()
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7800
PROPERTY:END
DOO.LoadPropertyFile()
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8005
PROPERTY:END
Window{PROP:Text} = 'Property Editor [' & szName & szExtension & ']'
Window{PROP:Pixels} = TRUE
?StyleGroup{PROP:Ypos} = (?StyleGroup{PROP:Ypos} + 1)
Window{PROP:Pixels} = FALSE
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8040
PROPERTY:END
GET(qOptions,1)
?lbOptions{PROP:Selected} = 1
POST(EVENT:NewSelection,?lbOptions)
GET(qKeywords,1)
?lbKeywords{PROP:Selected} = 1
GET(qStyles,1)
?lbStyles{PROP:Selected} = 1
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8400
PROPERTY:END
CorrectForOffscreen(Window)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9300
PROPERTY:END
QEIP2:PopupMgr.AddItem('-')
QEIP2:PopupMgr.AddItemEvent('View as Text',EVENT:USER)
QEIP4:PopupMgr.AddItem('-')
QEIP4:PopupMgr.AddItemEvent('View as Text',EVENT:USER+1)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9700
PROPERTY:END
POST(EVENT:NewSelection,?lbKeywords)
POST(EVENT:NewSelection,?lbStyles)
POST(EVENT:NewSelection,?Sheet)
[END]
[END]
WHEN 'Reset'
[INSTANCES]
WHEN '(BYTE Force=0)'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1500
PROPERTY:END
!Viewer Options
!======================================================================================
!style##

nCurrentStyle = qStyles.szStyleNumber[6 : LEN(qStyles.szStyleNumber)]

IF qStyles.szFontName
   szFontDescription = CLIP(qStyles.szFontName) & ','
   ?Font:Prompt{PROP:FontStyle} = FONT:bold
ELSIF defaultFont
   szFontDescription = defaultFont & ','
   ?Font:Prompt{PROP:FontStyle} = FONT:italic
ELSE
   ?Font:Prompt{PROP:FontStyle} = FONT:italic
   szFontDescription = ''
END

IF qStyles.nFontSize
   szFontDescription = szFontDescription & qStyles.nFontSize & ','
   ?Font:Prompt{PROP:FontStyle} = BOR(?Font:Prompt{PROP:FontStyle},FONT:bold)
ELSIF defaultSize
   szFontDescription = szFontDescription & defaultSize & ','
   ?Font:Prompt{PROP:FontStyle} = BOR(?Font:Prompt{PROP:FontStyle},FONT:italic)
END

IF qStyles.nFontStyle = defaultStyle
   IF nCurrentStyle <> 32
      ?Font:Prompt{PROP:FontStyle} = FONT:italic
   END
END
IF BAND(qStyles.nFontStyle,0FFFh) >= FONT:bold
   szFontDescription = szFontDescription & 'Bold,'
   qStyles.bBold = TRUE
   ?Font:Prompt{PROP:FontStyle} = BOR(?Font:Prompt{PROP:FontStyle},FONT:bold)
ELSIF BAND(qStyles.nFontStyle,0FFFh) >= FONT:regular
   szFontDescription = szFontDescription & 'Regular,'
   qStyles.bBold = FALSE
ELSE
   szFontDescription = szFontDescription & 'Thin,'
   qStyles.bBold = FALSE
   ?Font:Prompt{PROP:FontStyle} = BOR(?Font:Prompt{PROP:FontStyle},FONT:bold)
END
IF BAND(qStyles.nFontStyle,FONT:italic) = FONT:italic
   szFontDescription = szFontDescription & 'Italic,'
   qStyles.bItalic = TRUE
   ?Font:Prompt{PROP:FontStyle} = BOR(?Font:Prompt{PROP:FontStyle},FONT:bold)
ELSE
   qStyles.bItalic = FALSE
END
IF BAND(qStyles.nFontStyle,FONT:underline) = FONT:underline
   szFontDescription = szFontDescription & 'Underline,'
   qStyles.bUnderline = TRUE
   ?Font:Prompt{PROP:FontStyle} = BOR(?Font:Prompt{PROP:FontStyle},FONT:bold)
ELSE
   qStyles.bUnderline = FALSE
END

IF szFontDescription[LEN(szFontDescription)] = ','
   szFontDescription[LEN(szFontDescription)] = '<0>'
END

?ForeColor:Prompt{PROP:FontStyle} = FONT:bold
IF qStyles.lForeColor <> COLOR:NONE
   ?ForeColorBox{PROP:Fill} = qStyles.lForeColor
   szForeColor = srcGetColorString(qStyles.lForeColor)
   !IF NOT INSTRING(':',szForeColor)
   !   szForeColor = srcGetRGBColorString(qStyles.lForeColor)
   !END
ELSIF defaultFore <>  COLOR:NONE
   ?ForeColor:Prompt{PROP:FontStyle} = FONT:italic
   ?ForeColorBox{PROP:Fill} = defaultFore
   szForeColor = srcGetColorString(defaultFore)
   !IF NOT INSTRING(':',szForeColor)
   !   szForeColor = srcGetRGBColorString(defaultFore)
   !END
ELSE
   ?ForeColor:Prompt{PROP:FontStyle} = FONT:italic
   ?ForeColorBox{PROP:Fill} = COLOR:NONE
   szForeColor = srcGetColorString(COLOR:NONE)
END

?BackColor:Prompt{PROP:FontStyle} = FONT:bold
IF qStyles.lBackColor <> COLOR:NONE
   ?BackColorBox{PROP:Fill} = qStyles.lBackColor
   szBackColor = srcGetColorString(qStyles.lBackColor)
   !IF NOT INSTRING(':',szBackColor)
   !   szBackColor = srcGetRGBColorString(qStyles.lBackColor)
   !END
ELSIF defaultBack <>  COLOR:NONE
   ?BackColor:Prompt{PROP:FontStyle} = FONT:italic
   ?BackColorBox{PROP:Fill} = defaultBack
   szBackColor = srcGetColorString(defaultBack)
   !IF NOT INSTRING(':',szBackColor)
   !   szBackColor = srcGetRGBColorString(defaultBack)
   !END
ELSE
   ?BackColor:Prompt{PROP:FontStyle} = FONT:italic
   ?BackColorBox{PROP:Fill} = COLOR:NONE
   szBackColor = srcGetColorString(COLOR:NONE)
   !szBackColor = srcGetRGBColorString(COLOR:NONE)
END

PUT(qStyles)

IF qStyles.bHide = 0
   qStyles.bHide = defaultHide
   IF nCurrentStyle <> 32
      ?sty:bHide{PROP:FontStyle} = FONT:italic
   ELSE
      ?sty:bHide{PROP:FontStyle} = FONT:bold
   END
ELSE
   ?sty:bHide{PROP:FontStyle} = FONT:bold
END

IF qStyles.bHotSpot = 0
   qStyles.bHotSpot = defaultHot
   IF nCurrentStyle <> 32
      ?sty:bHotSpot{PROP:FontStyle} = FONT:italic
   ELSE
      ?sty:bHotSpot{PROP:FontStyle} = FONT:bold
   END
ELSE
   ?sty:bHotSpot{PROP:FontStyle} = FONT:bold
END

IF qStyles.bEolFilled = 0
   qStyles.bEolFilled = defaultEOLF
   IF nCurrentStyle <> 32
      ?sty:bEolFilled{PROP:FontStyle} = FONT:italic
   ELSE
      ?sty:bEolFilled{PROP:FontStyle} = FONT:bold
   END
ELSE
   ?sty:bEolFilled{PROP:FontStyle} = FONT:bold
END

IF qStyles.nCaseOpt = 0
   !qStyles.nCaseOpt = defaultCase
   ?nCaseOpt:Prompt{PROP:FontStyle} = FONT:italic
   ?STY:NCASEOPT:Mixed{PROP:FontStyle} = CHOOSE(defaultCase = 1,FONT:italic,FONT:regular)
   ?STY:NCASEOPT:Upper{PROP:FontStyle} = CHOOSE(defaultCase = 2,FONT:italic,FONT:regular)
   ?STY:NCASEOPT:Lower{PROP:FontStyle} = CHOOSE(defaultCase = 3,FONT:italic,FONT:regular)
ELSE
   ?nCaseOpt:Prompt{PROP:FontStyle} = FONT:bold
   ?STY:NCASEOPT:Mixed{PROP:FontStyle} = CHOOSE(qStyles.nCaseOpt = 1,FONT:bold,FONT:regular)
   ?STY:NCASEOPT:Upper{PROP:FontStyle} = CHOOSE(qStyles.nCaseOpt = 2,FONT:bold,FONT:regular)
   ?STY:NCASEOPT:Lower{PROP:FontStyle} = CHOOSE(qStyles.nCaseOpt = 3,FONT:bold,FONT:regular)
END
[END]
[END]
WHEN 'Kill'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9800
PROPERTY:END
popupMenu.Kill()
[END]
[END]
WHEN 'TakeEvent'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6300
PROPERTY:END
  CASE EVENT()
    OF EVENT:User
       DOO.LoadKeywordsFromListBoxQueue()
       HIDE(?lbKeywordValues)
       UNHIDE(?kwd:szKeywords)
       DISPLAY(?kwd:szKeywords)
    OF EVENT:User+1
       DOO.LoadFilePatternsFromFilePatternQueue()
       HIDE(?lbFilePatterns)
       UNHIDE(?szFilePatterns)
       DISPLAY(?szFilePatterns)
  END
[END]
[END]
[END]
EMBED %ControlEventHandling
[INSTANCES]
WHEN '?lbKeywords'
[INSTANCES]
WHEN 'NewSelection'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2500
PROPERTY:END
IF ?kwd:szKeywords{PROP:Hide} = TRUE
   DOO.LoadKeywordsFromListBoxQueue()
END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
DOO.CheckForChanges()
GET(qKeywords,CHOICE(?lbKeywords))
saveKeywordSet = qKeywords
IF ?kwd:szKeywords{PROP:Hide} = TRUE
   DOO.FillListBoxQueue()
   DISPLAY(?lbKeywordValues)
ELSE
   DISPLAY(?kwd:szKeywords)
END
[END]
[END]
WHEN '?lbStyles'
[INSTANCES]
WHEN 'NewSelection'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
DOO.CheckForChanges()
GET(qStyles,CHOICE(?lbStyles))
saveStyle = qStyles
SELF.Reset()
[END]
[END]
WHEN '?cmdSave'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
DOO.CheckForChanges()
IF bDirty = TRUE
   DOO.SavePropertyFile()
   bPropertiesChanged = TRUE
END
POST(EVENT:CloseWindow)
[END]
[END]
WHEN '?cmdCancel'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
bPropertiesChanged = FALSE
POST(EVENT:CloseWindow)
[END]
[END]
WHEN '?cmdFontDialog'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
CASE POPUP('Default|Select Font')
OF 1
   qStyles.szFontName = ''
   qStyles.nFontSize  = 0
   qStyles.nFontStyle = FONT:regular
   SELF.Reset()
OF 2
   IF FONTDIALOG('Choose Font',qStyles.szFontName,qStyles.nFontSize,qStyles.lForeColor,qStyles.nFontStyle,0)
      IF nCurrentStyle = 32
         defaultFont = qStyles.szFontName
         defaultSize = qStyles.nFontSize
         defaultFore = qStyles.lForeColor
         defaultStyle = qStyles.nFontStyle
      END
      SELF.Reset()
   END
END
[END]
[END]
WHEN '?cmdSelectForeColor'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
CASE POPUP('Default|Select Color')
OF 1
   qStyles.lForeColor = COLOR:NONE
   IF nCurrentStyle = 32
      defaultFore = qStyles.lForeColor
   END
   SELF.Reset()
OF 2
   IF COLORDIALOG('Fore Color',qStyles.lForeColor)
      IF nCurrentStyle = 32
         defaultFore = qStyles.lForeColor
      END
      SELF.Reset()
   END
END
[END]
[END]
WHEN '?cmdSelectBackColor'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
CASE POPUP('Default|Select Color')
OF 1
   qStyles.lBackColor = COLOR:NONE
   IF nCurrentStyle = 32
      defaultBack = qStyles.lBackColor
   END
   SELF.Reset()
OF 2
   IF COLORDIALOG('Back Color',qStyles.lBackColor)
      IF nCurrentStyle = 32
         defaultBack = qStyles.lBackColor
      END
      SELF.Reset()
   END
END
[END]
[END]
WHEN '?sty:bHide'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
IF nCurrentStyle = 32
   defaultHide = sty:bHide
END
SELF.Reset()
[END]
[END]
WHEN '?sty:bHotSpot'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
IF nCurrentStyle = 32
   defaultHot = sty:bHotSpot
END
SELF.Reset()
[END]
[END]
WHEN '?sty:bEolFilled'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
IF nCurrentStyle = 32
   defaultEOLF = sty:bEolFilled
END
SELF.Reset()
[END]
[END]
WHEN '?sty:nCaseOpt'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
IF nCurrentStyle = 32
   defaultCase = sty:nCaseOpt
END
SELF.Reset()
[END]
[END]
WHEN '?kwd:szKeywords'
[INSTANCES]
WHEN 'AlertKey'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
CASE KEYCODE()
  OF MouseRight
     IF POPUP('View as List')
         SELF.Update()
         !PUT(qKeywords)
         HIDE(?kwd:szKeywords)
         DOO.FillListBoxQueue()
         UNHIDE(?lbKeywordValues)
     END
END
[END]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
SELF.Update()
PUT(qKeywords)
[END]
[END]
WHEN '?lbKeywordValues'
[INSTANCES]
WHEN 'AlertKey'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8900
PROPERTY:END
CASE KEYCODE()
  OF InsertKey
     POST(EVENT:Accepted,?InsertKeyword)
  OF DeleteKey
     POST(EVENT:Accepted,?DeleteKeyword)
  OF CtrlEnter
     POST(EVENT:Accepted,?ChangeKeyword)
END
[END]
[END]
WHEN '?szFilePatterns'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
DOO.CheckForChanges()
[END]
WHEN 'Selected'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2500
PROPERTY:END
saveFilePatterns = szFilePatterns
[END]
WHEN 'AlertKey'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
CASE KEYCODE()
  OF MouseRight
     IF POPUP('View as List')
         SELF.Update()
         HIDE(?szFilePatterns)
         DOO.FillFilePatternQueue()
         UNHIDE(?lbFilePatterns)
     END
END
[END]
[END]
WHEN '?cmdSelectCase'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
CASE POPUP('Default|Mixed|Upper|Lower')
  OF 1
     sty:nCaseOpt = 0
  OF 2
     sty:nCaseOpt = 1
  OF 3
     sty:nCaseOpt = 2
  OF 4
     sty:nCaseOpt = 3
END
SELF.Reset()
[END]
[END]
WHEN '?Sheet'
[INSTANCES]
WHEN 'TabChanging'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2500
PROPERTY:END
(?Sheet{PROP:ChoiceFeq}){PROP:FontColor} = COLOR:Black !00E16941h
(?Sheet{PROP:ChoiceFeq}){PROP:FontStyle} = FONT:regular
[END]
WHEN 'NewSelection'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
(?Sheet{PROP:ChoiceFeq}){PROP:FontColor} = 00E16941h
(?Sheet{PROP:ChoiceFeq}){PROP:FontStyle} = FONT:Bold
[END]
[END]
WHEN '?lbFilePatterns'
[INSTANCES]
WHEN 'AlertKey'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8900
PROPERTY:END
CASE KEYCODE()
  OF InsertKey
     POST(EVENT:Accepted,?InsertFilePattern)
  OF DeleteKey
     POST(EVENT:Accepted,?DeleteFilePattern)
  OF CtrlEnter
     POST(EVENT:Accepted,?ChangeFilePattern)
END
[END]
[END]
WHEN '?lbOptions'
[INSTANCES]
WHEN 'NewSelection'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
GET(qOptions,CHOICE(?lbOptions))
DISPLAY(?opt:szOptionTip)
[END]
[END]
[END]
EMBED %WindowManagerMethodDataSection
[INSTANCES]
WHEN 'TakeFieldEvent'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
Indx   LONG
[END]
[END]
[END]
EMBED %QEIPFieldCreateControlCodeSection
[INSTANCES]
WHEN '2'
[INSTANCES]
WHEN 'lbq:Value'
[INSTANCES]
WHEN 'CreateControl'
[INSTANCES]
WHEN '(),VIRTUAL,PROTECTED'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
IF szLexer = 'clarion'
   SELF.Feq{PROP:Upr} = TRUE
END
SELF.Feq{PROP:Alrt,255} = DeleteKey
[END]
[END]
[END]
[END]
WHEN '3'
[INSTANCES]
WHEN 'opt:szValue'
[INSTANCES]
WHEN 'CreateControl'
[INSTANCES]
WHEN '(),VIRTUAL,PROTECTED'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2500
PROPERTY:END
IF qOptions.IsBool
   SELF.Feq = CREATE(0,CREATE:droplist)
   SELF.Feq{PROP:FROM} = 'false|true'
   SELF.Feq{PROP:Drop} = 2
ELSIF qOptions.szOption = 'asp.default.language'
   SELF.Feq = CREATE(0,CREATE:droplist)
   SELF.Feq{PROP:FROM} = 'JavaScript|VBScript|Python'
   SELF.Feq{PROP:Drop} = 3
ELSE
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
END
[END]
[END]
[END]
[END]
[END]
EMBED %QEIPTakeCompletedCodeSection
[INSTANCES]
WHEN '2'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 500
PROPERTY:END
IF Force <> Button:No
   IF SELF.Req = InsertRecord
      ptr = POINTER(ListBoxQueue)
      thisValue = ListBoxQueue.Value
      GET(ListBoxQueue,ListBoxQueue.Value)
      IF ERRORCODE()
         GET(ListBoxQueue,ptr)
         ListBoxQueue.Value = thisValue
      ELSE
         GET(ListBoxQueue,ptr)
         ListBoxQueue.Value = thisValue
         GlobalErrors.ThrowMessage(Msg:InsertIllegal,'Keyword')
         Force = Button:No
      END
   ELSIF SELF.Req = ChangeRecord
      IF NOT SELF.Fields.Equal()
         ptr = POINTER(ListBoxQueue)
         thisValue = ListBoxQueue.Value
         GET(ListBoxQueue,ListBoxQueue.Value)
         IF ERRORCODE()
            GET(ListBoxQueue,ptr)
            ListBoxQueue.Value = thisValue
         ELSE
            GET(ListBoxQueue,ptr)
            GlobalErrors.ThrowMessage(Msg:InsertIllegal,'Keyword')
            Force = Button:No
         END
      END
   END
END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
thisValue = ListBoxQueue.Value
SORT(ListBoxQueue,+ListBoxQueue.Value)
ListBoxQueue.Value = thisValue
GET(ListBoxQueue,ListBoxQueue.Value)
?lbKeywordValues{PROP:Selected} = POINTER(ListBoxQueue)
[END]
[END]
EMBED %QEIPRunCodeSection
[INSTANCES]
WHEN '2'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2500
PROPERTY:END
thisReq = Req
[END]
[END]
EMBED %QEIPTakeCompletedDataSection
[INSTANCES]
WHEN '2'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
ptr         LONG
thisValue   LIKE(ListBoxQueue.Value)
[END]
[END]
EMBED %WindowEventHandling
[INSTANCES]
WHEN 'OpenWindow'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
 !IF glo:ShowPropertyEditorInfo = TRUE
 !   PropertyEditorInfo()
 !END
[END]
[END]
EMBED %QEIPFieldTakeAcceptedCodeSection
[INSTANCES]
WHEN '3'
[INSTANCES]
WHEN 'opt:szValue'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
CASE ReturnValue
  OF EditAction:Cancel OROF EditAction:None
     !nothing changed
ELSE
     bDirty = TRUE
END
[END]
[END]
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_QueueEIP
[INSTANCE]
INSTANCE 2
[PROMPTS]
%QueueEIPIncludePopupMenu LONG  (1)
%QueueEIPContinuousInsert LONG  (0)
%QueueEIPInsertionPoint DEFAULT  ('After')
%QueueEIPTabAction DEFAULT  ('Always')
%QueueEIPTabRemain LONG  (0)
%QueueEIPEnterAction DEFAULT  ('Always')
%QueueEIPEnterRemain LONG  (0)
%QueueEIPArrowAction DEFAULT  ('Default')
%QueueEIPArrowRemain LONG  (1)
%QueueEIPArrowRetain LONG  (1)
%QueueEIPFocusAction DEFAULT  ('Default')
%QueueEditInPlaceList MULTI LONG  (1)
%QueueEditInPlaceField DEPEND %QueueEditInPlaceList FIELD TIMES 1
WHEN  (1) (lbq:Value)

%QueueEditInPlaceFieldDefaultValue DEPEND %QueueEditInPlaceList DEFAULT TIMES 1
WHEN  (1) ('')

%QueueAllowEIP DEPEND %QueueEditInPlaceList LONG TIMES 1
WHEN  (1) (1)

%QueueEditClass DEPEND %QueueEditInPlaceList DEFAULT TIMES 1
WHEN  (1) ('EditEntryClass')

%QueueColorColumn DEPEND %QueueEditInPlaceList LONG TIMES 1
WHEN  (1) (0)

%QueueTextColor DEPEND %QueueEditInPlaceList LONG TIMES 1
WHEN  (1) (16711680)

%QueueBackColor DEPEND %QueueEditInPlaceList LONG TIMES 1
WHEN  (1) (-1)

%QueueTextSelected DEPEND %QueueEditInPlaceList LONG TIMES 1
WHEN  (1) (-1)

%QueueBackSelected DEPEND %QueueEditInPlaceList LONG TIMES 1
WHEN  (1) (-1)

%HotFields MULTI LONG  ()
%HotField DEPEND %HotFields FIELD TIMES 0

[INSTANCE]
INSTANCE 3
[PROMPTS]
%QueueEIPIncludePopupMenu LONG  (1)
%QueueEIPContinuousInsert LONG  (0)
%QueueEIPInsertionPoint DEFAULT  ('After')
%QueueEIPTabAction DEFAULT  ('Default')
%QueueEIPTabRemain LONG  (0)
%QueueEIPEnterAction DEFAULT  ('Default')
%QueueEIPEnterRemain LONG  (0)
%QueueEIPArrowAction DEFAULT  ('Default')
%QueueEIPArrowRemain LONG  (1)
%QueueEIPArrowRetain LONG  (1)
%QueueEIPFocusAction DEFAULT  ('Default')
%QueueEditInPlaceList MULTI LONG  (1, 2)
%QueueEditInPlaceField DEPEND %QueueEditInPlaceList FIELD TIMES 2
WHEN  (1) (opt:szOption)
WHEN  (2) (opt:szValue)

%QueueEditInPlaceFieldDefaultValue DEPEND %QueueEditInPlaceList DEFAULT TIMES 0

%QueueAllowEIP DEPEND %QueueEditInPlaceList LONG TIMES 2
WHEN  (1) (0)
WHEN  (2) (1)

%QueueEditClass DEPEND %QueueEditInPlaceList DEFAULT TIMES 2
WHEN  (1) ('EditEntryClass')
WHEN  (2) ('EditEntryClass')

%QueueColorColumn DEPEND %QueueEditInPlaceList LONG TIMES 2
WHEN  (1) (0)
WHEN  (2) (0)

%QueueTextColor DEPEND %QueueEditInPlaceList LONG TIMES 2
WHEN  (1) (16711680)
WHEN  (2) (16711680)

%QueueBackColor DEPEND %QueueEditInPlaceList LONG TIMES 2
WHEN  (1) (-1)
WHEN  (2) (-1)

%QueueTextSelected DEPEND %QueueEditInPlaceList LONG TIMES 2
WHEN  (1) (-1)
WHEN  (2) (-1)

%QueueBackSelected DEPEND %QueueEditInPlaceList LONG TIMES 2
WHEN  (1) (-1)
WHEN  (2) (-1)

%HotFields MULTI LONG  ()
%HotField DEPEND %HotFields FIELD TIMES 0

[INSTANCE]
INSTANCE 4
[PROMPTS]
%QueueEIPIncludePopupMenu LONG  (1)
%QueueEIPContinuousInsert LONG  (0)
%QueueEIPInsertionPoint DEFAULT  ('After')
%QueueEIPTabAction DEFAULT  ('Default')
%QueueEIPTabRemain LONG  (0)
%QueueEIPEnterAction DEFAULT  ('Default')
%QueueEIPEnterRemain LONG  (0)
%QueueEIPArrowAction DEFAULT  ('Default')
%QueueEIPArrowRemain LONG  (1)
%QueueEIPArrowRetain LONG  (1)
%QueueEIPFocusAction DEFAULT  ('Default')
%QueueEditInPlaceList MULTI LONG  ()
%QueueEditInPlaceField DEPEND %QueueEditInPlaceList FIELD TIMES 0

%QueueEditInPlaceFieldDefaultValue DEPEND %QueueEditInPlaceList DEFAULT TIMES 0

%QueueAllowEIP DEPEND %QueueEditInPlaceList LONG TIMES 0

%QueueEditClass DEPEND %QueueEditInPlaceList DEFAULT TIMES 0

%QueueColorColumn DEPEND %QueueEditInPlaceList LONG TIMES 0

%QueueTextColor DEPEND %QueueEditInPlaceList LONG TIMES 0

%QueueBackColor DEPEND %QueueEditInPlaceList LONG TIMES 0

%QueueTextSelected DEPEND %QueueEditInPlaceList LONG TIMES 0

%QueueBackSelected DEPEND %QueueEditInPlaceList LONG TIMES 0

%HotFields MULTI LONG  ()
%HotField DEPEND %HotFields FIELD TIMES 0

[CALLS]
ColourRGB
CorrectForOffScreen
srcGetColorString
srcGetRGBColorString
[WINDOW]
Window  WINDOW('Property Editor'),AT(,,400,149),FONT('Segoe UI',10),HSCROLL,GRAY,HLP('PropertyEditor.htm'), |
          SYSTEM
          SHEET,AT(5,5,390,120),USE(?Sheet),IMM,#ORDINAL(1)
            TAB('General'),USE(?TAB1),#ORDINAL(2)
              PROMPT('Description'),AT(10,20),USE(?szDescription:Prompt),FONT(,,COLOR:RoyalBlue, |
                FONT:bold),TRN,#ORDINAL(3)
              ENTRY(@s255),AT(55,20,330,10),USE(szDescription),FONT(,,,FONT:regular),#ORDINAL(4)
              PROMPT('File Patterns'),AT(10,30),USE(?FilePatterns:Prompt),FONT(,,COLOR:RoyalBlue, |
                FONT:bold),TRN,#ORDINAL(5)
              TEXT,AT(10,40,379,20),USE(szFilePatterns),VSCROLL,ALRT(MouseRight),TIP('not case s' & |
                'ensitive, order of extentions is ignored'),#ORDINAL(6)
              LIST,AT(10,40,88,80),USE(?lbFilePatterns),VSCROLL,ALRT(CtrlEnter),ALRT(DeleteKey), |
                ALRT(InsertKey),ALRT(MouseRight),FORMAT('80L(2)|M@s20@'),FROM(FilePatternQueue), |
                HIDE,#FIELDS(fpq:Pattern),#ORIG(?List),#SEQ(4),#ORDINAL(7)
            END
            TAB('Options'),USE(?TAB2),#ORDINAL(8)
              LIST,AT(10,22,379,97),USE(?lbOptions),VSCROLL,ALRT(MouseLeft2),FORMAT('100L(2)|MP' & |
                'S(500)@s255@250L(2)|MS(500)@s255@'),FROM(qOptions),#FIELDS(opt:szOption,opt:szValue), |
                #ORIG(?List),#SEQ(3),#ORDINAL(9)
              TEXT,AT(5,128,286,19),USE(opt:szOptionTip),FONT(,8),FLAT,READONLY,SKIP,TRN,#ORDINAL(10)
            END
            TAB('Keywords'),USE(?TAB3),#ORDINAL(11)
              LIST,AT(10,22,145,97),USE(?lbKeywords),VSCROLL,ALRT(MouseRight),FORMAT('140L(2)|MS' & |
                '(1024)@s255@'),FROM(qKeywords),#FIELDS(kwd:szKeywordNumber),#ORDINAL(12)
              TEXT,AT(160,22,230,97),USE(kwd:szKeywords),VSCROLL,ALRT(MouseRight),#ORDINAL(13)
              LIST,AT(160,22,230,97),USE(?lbKeywordValues),VSCROLL,ALRT(CtrlEnter),ALRT(DeleteKey), |
                ALRT(InsertKey),ALRT(MouseRight),FORMAT('230L(2)|M@s32@'),FROM(ListBoxQueue), |
                HIDE,#FIELDS(lbq:Value),#ORIG(?List),#SEQ(2),#ORDINAL(14)
            END
            TAB('Styles'),USE(?TAB4),#ORDINAL(15)
              LIST,AT(10,22,145,97),USE(?lbStyles),VSCROLL,ALRT(MouseRight),FORMAT('140L(2)|MS' & |
                '(1024)@s255@'),FROM(qStyles),#FIELDS(sty:szStyleNumber),#ORDINAL(16)
              BOX,AT(159,21,231,98),USE(?StyleGroup),COLOR(00A0A0A0h),LINEWIDTH(1),#ORDINAL(17)
              PROMPT('Font'),AT(181,25),USE(?Font:Prompt),TRN,#ORDINAL(18)
              ENTRY(@s63),AT(221,25,150,10),USE(szFontDescription),DISABLE,#ORDINAL(19)
              BUTTON('...'),AT(375,25,11,10),USE(?cmdFontDialog),#ORDINAL(20)
              BOX,AT(166,40,11,10),USE(?ForeColorBox),COLOR(00B99D7Fh),FILL(COLOR:Black),LINEWIDTH(1), |
                ROUND,#ORDINAL(21)
              PROMPT('Fore Color'),AT(181,40),USE(?ForeColor:Prompt),#ORDINAL(22)
              ENTRY(@s30),AT(221,40,150,10),USE(szForeColor),LEFT,DISABLE,#ORDINAL(23)
              BUTTON('...'),AT(375,40,11,10),USE(?cmdSelectForeColor),TIP('Select Fore Color'), |
                #ORDINAL(24)
              BOX,AT(166,56,11,10),USE(?BackColorBox),COLOR(00B99D7Fh),FILL(COLOR:White),LINEWIDTH(1), |
                ROUND,#ORDINAL(25)
              PROMPT('Back Color'),AT(181,56),USE(?BackColor:Prompt),#ORDINAL(26)
              ENTRY(@s30),AT(221,56,150,10),USE(szBackColor),LEFT,DISABLE,#ORDINAL(27)
              BUTTON('...'),AT(375,56,11,10),USE(?cmdSelectBackColor),TIP('Select Back Color'), |
                #ORDINAL(28)
              CHECK(' Hide'),AT(221,72,40,10),USE(sty:bHide),TRN,#ORDINAL(29)
              CHECK(' Hot Spot'),AT(270,72,50,10),USE(sty:bHotSpot),TRN,#ORDINAL(30)
              CHECK(' EOL Filled'),AT(331,72,55,10),USE(sty:bEolFilled),TRN,#ORDINAL(31)
              PROMPT('Case'),AT(181,87),USE(?nCaseOpt:Prompt),#ORDINAL(32)
              OPTION,AT(221,85,166,14),USE(sty:nCaseOpt),#ORDINAL(33)
                RADIO(' Mixed'),AT(221,87),USE(?STY:NCASEOPT:Mixed),TRN,VALUE('1'),#ORDINAL(34)
                RADIO(' Upper'),AT(270,87),USE(?STY:NCASEOPT:Upper),TRN,VALUE('2'),#ORDINAL(35)
                RADIO(' Lower'),AT(331,87),USE(?STY:NCASEOPT:Lower),TRN,VALUE('3'),#ORDINAL(36)
              END
              BUTTON('...'),AT(375,87,11,10),USE(?cmdSelectCase),#ORDINAL(37)
              STRING('Legend'),AT(166,103),USE(?STRING5),FONT(,8),TRN,#ORDINAL(38)
              STRING('bold'),AT(198,103),USE(?STRING1),FONT(,8,,FONT:bold),TRN,#ORDINAL(39)
              STRING('= overrides default'),AT(215,103),USE(?STRING2),FONT(,8),TRN,#ORDINAL(40)
              STRING('italic'),AT(278,103),USE(?STRING3),FONT(,8,,FONT:regular+FONT:italic), |
                TRN,#ORDINAL(41)
              STRING('= uses default'),AT(295,103),USE(?STRING4),FONT(,8),TRN,#ORDINAL(42)
            END
          END
          BUTTON('&Save'),AT(298,130,45,14),USE(?cmdSave),DEFAULT,#ORDINAL(43)
          BUTTON('Cancel'),AT(348,130,45,14),USE(?cmdCancel),#ORDINAL(44)
          BUTTON('&Insert'),AT(54,130,30,12),USE(?InsertFilePattern),KEY(InsertKey),HIDE,#ORIG(?Insert), |
            #SEQ(4),#ORDINAL(45)
          BUTTON('&Edit'),AT(88,130,30,12),USE(?ChangeFilePattern),KEY(CtrlEnter),HIDE,#ORIG(?Change), |
            #SEQ(4),#ORDINAL(46)
          BUTTON('&Delete'),AT(121,130,30,12),USE(?DeleteFilePattern),KEY(DeleteKey),HIDE, |
            #ORIG(?Delete),#SEQ(4),#ORDINAL(47)
          BUTTON('&Edit'),AT(159,130,30,12),USE(?ChangeOption),KEY(CtrlEnter),HIDE,#ORIG(?Change), |
            #SEQ(3),#ORDINAL(48)
          BUTTON('&Insert'),AT(196,130,30,12),USE(?InsertKeyword),KEY(InsertKey),HIDE,#ORIG(?Insert), |
            #SEQ(2),#ORDINAL(49)
          BUTTON('&Edit'),AT(229,130,30,12),USE(?ChangeKeyword),KEY(CtrlEnter),HIDE,#ORIG(?Change), |
            #SEQ(2),#ORDINAL(50)
          BUTTON('&Delete'),AT(262,130,30,12),USE(?DeleteKeyword),KEY(DeleteKey),HIDE,#ORIG(?Delete), |
            #SEQ(2),#ORDINAL(51)
        END


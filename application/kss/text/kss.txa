[APPLICATION]
VERSION 34
TODO ABC ToDo
PROCEDURE Main
[COMMON]
FROM ABC
MODIFIED '2014/03/04' ' 8:36:08'
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('ErrorManager', 'ErrorStatusManager', 'FileManager:', |
  'FuzzyMatcher', 'INIManager', 'RelationManager:', 'Translator')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 5
WHEN  ('ErrorManager') ('ErrorClass')
WHEN  ('ErrorStatusManager') ('ErrorStatusClass')
WHEN  ('FuzzyMatcher') ('FuzzyClass')
WHEN  ('INIManager') ('INIClass')
WHEN  ('Translator') ('TranslatorClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 5
WHEN  ('ErrorManager') ('')
WHEN  ('ErrorStatusManager') ('')
WHEN  ('FuzzyMatcher') ('')
WHEN  ('INIManager') ('')
WHEN  ('Translator') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 0

%ProgramAuthor DEFAULT  ('Randy Rogers')
%Repository DEFAULT  ('')
%ProgramIcon DEFAULT  ('~kss.ico')
%MessageDescription LONG  (1)
%GlobalExternal LONG  (0)
%ExternalSource DEFAULT  ('Dynamic Link Library (DLL)')
%GenerateEmbedComments LONG  (0)
%INIType DEFAULT  ('NVD_INI')
%INIFile DEFAULT  ('Program Name.INI')
%ININame DEFAULT  ('')
%INIProgramIniLocation DEFAULT  ('CSIDLDIR')
%INICSIDLDirectory DEFAULT  ('SV:CSIDL_APPDATA')
%CSIDLCompanyDir DEFAULT  ('Devuna')
%CSIDLProductDir DEFAULT  ('KSS')
%CSIDLCreate LONG  (1)
%INIInAppDirectory LONG  (1)
%REGRoot DEFAULT  ('REG_CLASSES_ROOT')
%DisableINISaveWindow LONG  (0)
%PreserveVars MULTI LONG  ()
%PreserveVar DEPEND %PreserveVars DEFAULT TIMES 0

%EnableRunTimeTranslator LONG  (0)
%FuzzyMatchingEnabled LONG  (1)
%IgnoreCase LONG  (1)
%WordOnly LONG  (0)
%ButtonMarginsCompatibility LONG  (0)
%UseDefaultXPManifest LONG  (0)
%GenerateXPManifest LONG  (1)
%LinkGenerateXPManifest LONG  (1)
%AddVistaXPManifest LONG  (1)
%VistaManifestExecutionLevel DEFAULT  ('asInvoker')
%VistaManifestUIAccess LONG  (0)
%NoThemedControlsDependency LONG  (0)
%VistaManifestdpiAware LONG  (1)
%VistaManifestDependentAssembly MULTI LONG  ()
%VistaManifestDependentAssemblyName DEPEND %VistaManifestDependentAssembly DEFAULT TIMES 0

%VistaManifestDependentAssemblyVersion DEPEND %VistaManifestDependentAssembly DEFAULT TIMES 0

%VistaManifestDependentAssemblyType DEPEND %VistaManifestDependentAssembly DEFAULT TIMES 0

%VistaManifestDependentAssemblyPublicKeyToken DEPEND %VistaManifestDependentAssembly DEFAULT TIMES 0

%VistaManifestDependentAssemblyLanguage DEPEND %VistaManifestDependentAssembly DEFAULT TIMES 0

%VistaManifestDependentAssemblyProcessorArchitecture DEPEND %VistaManifestDependentAssembly LONG TIMES 0

%W7ManifestVista LONG  (0)
%W7ManifestW7 LONG  (1)
%W7ManifestW8 LONG  (1)
%W7ManifestW81 LONG  (1)
%W7ManifestW10 LONG  (1)
%ForceMakeTransparentXPManifest LONG  (0)
%ForceMakeColorXPManifest LONG  (0)
%ForceSHEETNoTheme LONG  (1)
%ExtUIXPMenuEnableGlobal LONG  (1)
%ExtUIXPMenuColorTypeGlobal DEFAULT  ('Windows2K')
%ExtUIXPMenuDisableImageBar LONG  (0)
%ExtUIXPMenuEnableRuntime LONG  (0)
%ExtUIXPMenuRuntimeVar DEFAULT  ('')
%ExtUIXPMenuColorLeftGlobal LONG  (12632256)
%ExtUIXPMenuColorRightGlobal LONG  (12632256)
%ExtUIXPMenuColorSelectionBarLeftGlobal LONG  (12632256)
%ExtUIXPMenuColorSelectionBarRightGlobal LONG  (12632256)
%ExtUIXPMenuSelVertical LONG  (1)
%ExtUIXPMenuColorSelectionBorderGlobal LONG  (8421504)
%ExtUIXPMenuColorHotLeftGlobal LONG  (12632256)
%ExtUIXPMenuColorHotRightGlobal LONG  (12632256)
%ExtUIXPMenuColorSelectedLeftGlobal LONG  (12632256)
%ExtUIXPMenuColorSelectedRightGlobal LONG  (12632256)
%ExtUIXPMenuColorNormalBarLeftGlobal LONG  (-2147483644)
%ExtUIXPMenuColorNormalBarRightGlobal LONG  (-2147483644)
%ExtUIXPMenuColorItemBackgroundGlobal LONG  (-2147483644)
%ExtUIXPMenuColorNormalText LONG  (0)
%ExtUIXPMenuColorSelectedText LONG  (0)
%ExtUIXPMenuColorHotText LONG  (0)
%ExtUIXPMenuFlat LONG  (0)
%ExtUIXPMenuShowImageBar LONG  (0)
%ExtUIXPMenuSeparator3D LONG  (1)
%ExtUIXPMenuSeparatorFull LONG  (0)
%ExtUIXPMenuVerticalLine LONG  (1)
%ExtUIMDITabGlobal DEFAULT  ('DISABLE')
%ExtUIMDITabStyleGlobal DEFAULT  ('Default')
%ExtUITabStyleGlobal DEFAULT  ('BlackAndWhite')
%WindowEnableEnhanceFocus LONG  (0)
%SelectedText LONG  (1)
%SelectedRadio LONG  (1)
%SelectedSpin LONG  (1)
%SelectedCheck LONG  (1)
%SelectedDropList LONG  (1)
%SelectedList LONG  (1)
%SelectedDisplayChangeColor LONG  (1)
%SelectedColor LONG  (65535)
%SelectedStyle LONG  (1)
%SelectedRequired LONG  (0)
%SelectedRequiredColor LONG  (65535)
%SelectedDisplayBox LONG  (1)
%SelectedDisplayBoxFillColor LONG  (65535)
%SelectedDisplayBoxBorderColor LONG  (0)
%SelectedDisplayBoxBorderSize DEFAULT  ('2')
%SelectedRequiredBox LONG  (0)
%SelectedRequiredDisplayBoxFillColor LONG  (255)
%SelectedRequiredDisplayBoxBorderColor LONG  (0)
%SelectedCaret LONG  (1)
%SelectedCaretColor LONG  (8421504)
%SelectedCaretCharacter DEFAULT  ('»')
%SelectedCaretCharacterSeparation DEFAULT  ('8')
%ExcludeSelectedDropList LONG  (0)
%EnableOSK DEFAULT  ('OFF')
%GlobalUseEnterInsteadTab LONG  (0)
%GlobalUseEnterInsteadTabExclude MULTI DEFAULT  ()
%GlobalUseEnterInsteadTabEnable DEFAULT  ('Enable')
%GlobalUseEnterInsteadTabEnableValue DEFAULT  ('True')
%GlobalInterLine DEFAULT  ('10')
%GlobalEnableAutoSizeColumn LONG  (0)
%GlobalEnableListFormatManager LONG  (0)
%GlobalUserFieldListFormatManager DEFAULT  ('1')
%TableOrigin DEFAULT  ('Application')
%FileEquate DEFAULT  ('LFM_CFile')
%ConfigFilePRE DEFAULT  ('CFG')
%ConfigFileOEM LONG  (0)
%ConfigFileTHREAD LONG  (1)
%ConfigFileENCRYPT LONG  (0)
%ConfigFilePASSWORD DEFAULT  ('')
%FormatNameSize DEFAULT  ('30')
%FormatBufferSize DEFAULT  ('5120')
%VariableBufferSize DEFAULT  ('2048')
%ConfigFilePath DEFAULT  ('')
%UseConfigFileName DEFAULT  ('Default')
%ConfigFileNAME DEFAULT  ('Formats.FDB')
%ColonCounter DEFAULT  ('')
%WrongSymbol DEFAULT  ('')
%DictionaryTableOrigin FILE  ()
%GlobalLFMSortOrderMenuText DEFAULT  ('SortOrder')
%GlobalEnableRebase LONG  (0)
%RBDMethod DEFAULT  ('Specify manually')
%RBDImageBase DEFAULT  ('10000000')
%DefaultGenerate LONG  (0)
%DefaultRILogout LONG  (1)
%LockRecoverTime DEFAULT  ('10')
%DefaultThreaded DEFAULT  ('Use File Setting')
%DefaultCreate DEFAULT  ('Use File Setting')
%DefaultExternal DEFAULT  ('None External')
%DefaultLocalExternal LONG  (0)
%DefaultExternalSource DEFAULT  ('')
%DefaultExternalAPP LONG  (0)
%DefaultExport LONG  (0)
%DefaultOpenMode DEFAULT  ('Share')
%DefaultUserAccess DEFAULT  ('Read/Write')
%DefaultOtherAccess DEFAULT  ('Deny None')
%DefaultLazyOpen LONG  (1)
%GeneratePropDataPath LONG  (0)
%PropDataPathLocation DEFAULT  ('CSIDLLIKEINI')
%DataPathCSIDLDirectory DEFAULT  ('SV:CSIDL_PERSONAL')
%DataPathCSIDLCompanyDir DEFAULT  ('')
%DataPathCSIDLProductDir DEFAULT  ('')
%DataPathCSIDLCreate LONG  (0)
%DataPathOtherDirectory DEFAULT  ('')
%DataPathOtherDirectoryCreate LONG  (0)
%OverrideGenerate DEPEND %File LONG TIMES 0

%OverrideRILogout DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use Default')

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 5
WHEN  ('ErrorManager') ('YES')
WHEN  ('ErrorStatusManager') ('YES')
WHEN  ('FuzzyMatcher') ('YES')
WHEN  ('INIManager') ('YES')
WHEN  ('Translator') ('YES')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 5
WHEN  ('ErrorManager') ('GlobalErrors')
WHEN  ('ErrorStatusManager') ('GlobalErrorsStatus')
WHEN  ('FuzzyMatcher') ('FuzzyMatcher')
WHEN  ('INIManager') ('INIMgr')
WHEN  ('Translator') ('Translator')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 5
WHEN  ('ErrorManager') (1)
WHEN  ('ErrorStatusManager') (1)
WHEN  ('FuzzyMatcher') (1)
WHEN  ('INIManager') (1)
WHEN  ('Translator') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 5
WHEN  ('ErrorManager') (1)
WHEN  ('ErrorStatusManager') (1)
WHEN  ('FuzzyMatcher') (1)
WHEN  ('INIManager') (1)
WHEN  ('Translator') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 5
WHEN  ('ErrorManager') ('')
WHEN  ('ErrorStatusManager') ('')
WHEN  ('FuzzyMatcher') ('')
WHEN  ('INIManager') ('')
WHEN  ('Translator') ('')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 5
WHEN  ('ErrorManager') (0)
WHEN  ('ErrorStatusManager') (0)
WHEN  ('FuzzyMatcher') (0)
WHEN  ('INIManager') (0)
WHEN  ('Translator') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 3
WHEN  ('ErrorManager')TIMES 0
WHEN  ('FuzzyMatcher')TIMES 0
WHEN  ('INIManager')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 3
WHEN  ('ErrorManager')TIMES 0
WHEN  ('FuzzyMatcher')TIMES 0
WHEN  ('INIManager')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%OverrideThreaded DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use Default')

%OverrideCreate DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use Default')

%OverrideExternal DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use Default')

%OverrideLocalExternal DEPEND %File LONG TIMES 0

%OverrideExternalSource DEPEND %File DEFAULT TIMES 0

%OverrideExternalAPP DEPEND %File LONG TIMES 0

%OverrideExport DEPEND %File LONG TIMES 0

%FileDeclarationMode DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use User Options')

%FileDeclarationType DEPEND %File LONG TIMES 1
WHEN  ('') (0)

%FileDeclarationThread DEPEND %File LONG TIMES 1
WHEN  ('') (0)

%FileDeclarationBindable DEPEND %File LONG TIMES 1
WHEN  ('') (1)

%FileDeclarationName DEPEND %File DEFAULT TIMES 0

%FileDeclarationOver DEPEND %File DEFAULT TIMES 0

%OverrideOpenMode DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use Default')

%OverrideUserAccess DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use Default')

%OverrideOtherAccess DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use Default')

%OverrideLazyOpen DEPEND %File DEFAULT TIMES 1
WHEN  ('') ('Use Default')

%OverrideDoNotAssertOnCloseMisuse DEPEND %File LONG TIMES 1
WHEN  ('') (0)

%StandardExternalModule DEPEND %Module LONG TIMES 32
WHEN  ('') (1)
WHEN  ('kss.clw') (1)
WHEN  ('kss001.clw') (1)
WHEN  ('kss002.clw') (1)
WHEN  ('kss003.clw') (1)
WHEN  ('kss004.clw') (1)
WHEN  ('kss005.clw') (1)
WHEN  ('kss006.clw') (1)
WHEN  ('kss007.clw') (1)
WHEN  ('kss008.clw') (1)
WHEN  ('kss009.clw') (1)
WHEN  ('kss010.clw') (1)
WHEN  ('kss011.clw') (1)
WHEN  ('kss012.clw') (1)
WHEN  ('kss013.clw') (1)
WHEN  ('kss014.clw') (1)
WHEN  ('kss015.clw') (1)
WHEN  ('kss016.clw') (1)
WHEN  ('kss017.clw') (1)
WHEN  ('kss018.clw') (1)
WHEN  ('kss019.clw') (1)
WHEN  ('kss020.clw') (1)
WHEN  ('kss021.clw') (1)
WHEN  ('kss022.clw') (1)
WHEN  ('kss023.clw') (1)
WHEN  ('kss024.clw') (1)
WHEN  ('kss025.clw') (1)
WHEN  ('kss026.clw') (1)
WHEN  ('kss027.clw') (1)
WHEN  ('kss028.clw') (1)
WHEN  ('kss029.clw') (1)
WHEN  ('kss030.clw') (1)

%NoGenerateGlobals LONG  (0)
%WindowManagerType DEFAULT  ('WindowManager')
%ResetOnGainFocus LONG  (0)
%AutoToolbar LONG  (1)
%AutoRefresh LONG  (1)
%ImageClass DEFAULT  ('ImageManager')
%ErrorStatusManagerType DEFAULT  ('ErrorStatusClass')
%ErrorManagerType DEFAULT  ('ErrorClass')
%DefaultErrorCategory DEFAULT  ('ABC')
%AllowSelectCopy LONG  (0)
%StoreErrorHistory LONG  (0)
%LimitStoredHistory LONG  (0)
%ErrorHistoryThreshold DEFAULT  ('300')
%HistoryViewTrigger DEFAULT  ('Level:Fatal')
%PopupClass DEFAULT  ('PopupClass')
%SelectFileClass DEFAULT  ('SelectFileClass')
%ResizerType DEFAULT  ('WindowResizeClass')
%ResizerDeFaultFindParents LONG  (1)
%ResizerDefaultOptimizeMoves LONG  (1)
%ResizerDefaultOptimizeRedraws LONG  (1)
%INIClass DEFAULT  ('INIClass')
%RunTimeTranslatorType DEFAULT  ('TranslatorClass')
%ExtractionFilename DEFAULT  ('')
%TranslationGroups MULTI LONG  ()
%TranslationFile DEPEND %TranslationGroups DEFAULT TIMES 0

%TranslationGroup DEPEND %TranslationGroups DEFAULT TIMES 0

%CalendarManagerType DEFAULT  ('CalendarClass')
%GlobalChangeColor LONG  (0)
%GlobalColorSunday LONG  (255)
%GlobalColorSaturday LONG  (255)
%GlobalColorHoliday LONG  (32768)
%GlobalColorOther LONG  (0)
%GlobalSelectOnClose DEFAULT  ('Select')
%GlobalUseABCClasess LONG  (1)
%FileManagerType DEFAULT  ('FileManager')
%ViewManagerType DEFAULT  ('ViewManager')
%RelationManagerType DEFAULT  ('RelationManager')
%BrowserType DEFAULT  ('BrowseClass')
%ActiveInvisible LONG  (0)
%AllowUnfilled LONG  (0)
%RetainRow LONG  (1)
%FileDropManagerType DEFAULT  ('FileDropClass')
%FileDropComboManagerType DEFAULT  ('FileDropComboClass')
%FormVCRManagerType DEFAULT  ('FormVCRClass')
%BrowseEIPManagerType DEFAULT  ('BrowseEIPManager')
%EditInPlaceInterface DEFAULT  ('Detailed')
%EditInPlaceType DEFAULT  ('EditEntryClass')
%EditInPlaceEntryType DEFAULT  ('EditEntryClass')
%EditInPlaceTextType DEFAULT  ('EditTextClass')
%EditInPlaceCheckType DEFAULT  ('EditCheckClass')
%EditInPlaceSpinType DEFAULT  ('EditSpinClass')
%EditInPlaceDropListType DEFAULT  ('EditDropListClass')
%EditInPlaceDropComboType DEFAULT  ('EditDropComboClass')
%EditInPlaceColorType DEFAULT  ('EditColorClass')
%EditInPlaceFileType DEFAULT  ('EditFileClass')
%EditInPlaceFontType DEFAULT  ('EditFontClass')
%EditInPlaceMultiSelectType DEFAULT  ('EditMultiSelectClass')
%EditInPlaceCalendarType DEFAULT  ('EditCalendarClass')
%EditInPlaceLookupType DEFAULT  ('EditLookupClass')
%EditInPlaceOtherType DEFAULT  ('EditEntryClass')
%QBEFormType DEFAULT  ('QueryFormClass')
%QBEFormVisualType DEFAULT  ('QueryFormVisual')
%QBEListType DEFAULT  ('QueryListClass')
%QBEListVisualType DEFAULT  ('QueryListVisual')
%StepManagerType DEFAULT  ('StepClass')
%StepManagerLongType DEFAULT  ('StepLongClass')
%StepManagerRealType DEFAULT  ('StepRealClass')
%StepManagerStringType DEFAULT  ('StepStringClass')
%StepManagerCustomType DEFAULT  ('StepCustomClass')
%StepLocatorType DEFAULT  ('StepLocatorClass')
%EntryLocatorType DEFAULT  ('EntryLocatorClass')
%IncrementalLocatorType DEFAULT  ('IncrementalLocatorClass')
%FilteredLocatorType DEFAULT  ('FilterLocatorClass')
%FuzzyMatcherClass DEFAULT  ('FuzzyClass')
%GridClass DEFAULT  ('GridClass')
%SidebarClass DEFAULT  ('SidebarClass')
%ProcessType DEFAULT  ('ProcessClass')
%PrintPreviewType DEFAULT  ('PrintPreviewClass')
%ReportManagerType DEFAULT  ('ReportManager')
%ReportTargetSelectorManagerType DEFAULT  ('ReportTargetSelectorClass')
%BreakManagerType DEFAULT  ('BreakManagerClass')
%AsciiViewerClass DEFAULT  ('AsciiViewerClass')
%AsciiSearchClass DEFAULT  ('AsciiSearchClass')
%AsciiPrintClass DEFAULT  ('AsciiPrintClass')
%AsciiFileManagerType DEFAULT  ('AsciiFileClass')
%ToolbarClass DEFAULT  ('ToolbarClass')
%ToolbarListBoxType DEFAULT  ('ToolbarListboxClass')
%ToolbarRelTreeType DEFAULT  ('ToolbarReltreeClass')
%ToolbarUpdateClassType DEFAULT  ('ToolbarUpdateClass')
%ToolbarFormVCRType DEFAULT  ('ToolbarFormVCRClass')
%OverrideAbcSettings LONG  (0)
%AbcSourceLocation DEFAULT  ('LINK')
%AbcLibraryName DEFAULT  ('')
%AppTemplateFamily DEFAULT  ('ABC')
%CWTemplateVersion DEFAULT  ('v11.0')
%ABCVersion DEFAULT  ('11000')
%EnableExceptionMessage LONG  (0)
%WindowFrameDragging LONG  (0)
[ADDITION]
NAME ABC cwHHGlobal
[INSTANCE]
INSTANCE 2
[PROMPTS]
%cwHHgFileName DEFAULT  ('kss.chm')
%cwHHappendHTM LONG  (0)
%cwHHUseHelpButton LONG  (1)
%cwHHUseHelpIndex LONG  (0)
%cwHHUseHelpSearch LONG  (0)
%cwHHUseHelpHowTo LONG  (0)
%cwHHGlobalAltTrapKey DEFAULT  ('')
[PERSIST]
%SaveCreateLocalMap DEFAULT  ('1')
%GenerationCompleted DEPEND %Module DEFAULT TIMES 31
WHEN  ('kss.clw') ('1')
WHEN  ('kss001.clw') ('1')
WHEN  ('kss002.clw') ('1')
WHEN  ('kss003.clw') ('1')
WHEN  ('kss004.clw') ('1')
WHEN  ('kss005.clw') ('1')
WHEN  ('kss006.clw') ('1')
WHEN  ('kss007.clw') ('1')
WHEN  ('kss008.clw') ('1')
WHEN  ('kss009.clw') ('1')
WHEN  ('kss010.clw') ('1')
WHEN  ('kss011.clw') ('1')
WHEN  ('kss012.clw') ('1')
WHEN  ('kss013.clw') ('1')
WHEN  ('kss014.clw') ('1')
WHEN  ('kss015.clw') ('1')
WHEN  ('kss016.clw') ('1')
WHEN  ('kss017.clw') ('1')
WHEN  ('kss018.clw') ('1')
WHEN  ('kss019.clw') ('1')
WHEN  ('kss020.clw') ('1')
WHEN  ('kss021.clw') ('1')
WHEN  ('kss022.clw') ('1')
WHEN  ('kss023.clw') ('1')
WHEN  ('kss024.clw') ('1')
WHEN  ('kss025.clw') ('1')
WHEN  ('kss026.clw') ('1')
WHEN  ('kss027.clw') ('1')
WHEN  ('kss028.clw') ('1')
WHEN  ('kss029.clw') ('1')
WHEN  ('kss030.clw') ('1')

%LastTarget32 DEFAULT  ('1')
%LastProgramExtension DEFAULT  ('EXE')
%LastApplicationDebug DEFAULT  ('')
%LastApplicationLocalLibrary DEFAULT  ('')
[PROJECT]
-- NAMESPACE kss
-- OUTPUTPATH C:\Clarion11 Projects\Devuna-KwikSourceSearch\application\kss\bin\release
#system win32 exe
#model clarion dll
#pragma link_option(icon=>kss.ico)
#pragma debug(vid=>off)
#pragma define(_ABCDllMode_=>0) -- GENERATED
#pragma define(_ABCLinkMode_=>1) -- GENERATED
#pragma define(_SCIDllMode_=>0) -- GENERATED
#pragma define(_SCILinkMode_=>1) -- GENERATED
#compile "kss.clw" -- GENERATED
#compile "kss001.clw" -- GENERATED
#compile "kss002.clw" -- GENERATED
#compile "kss003.clw" -- GENERATED
#compile "kss004.clw" -- GENERATED
#compile "kss005.clw" -- GENERATED
#compile "kss006.clw" -- GENERATED
#compile "kss007.clw" -- GENERATED
#compile "kss008.clw" -- GENERATED
#compile "kss009.clw" -- GENERATED
#compile "kss010.clw" -- GENERATED
#compile "kss011.clw" -- GENERATED
#compile "kss012.clw" -- GENERATED
#compile "kss013.clw" -- GENERATED
#compile "kss014.clw" -- GENERATED
#compile "kss015.clw" -- GENERATED
#compile "kss016.clw" -- GENERATED
#compile "kss017.clw" -- GENERATED
#compile "kss018.clw" -- GENERATED
#compile "kss019.clw" -- GENERATED
#compile "kss020.clw" -- GENERATED
#compile "kss021.clw" -- GENERATED
#compile "kss022.clw" -- GENERATED
#compile "kss023.clw" -- GENERATED
#compile "kss024.clw" -- GENERATED
#compile "kss025.clw" -- GENERATED
#compile "kss026.clw" -- GENERATED
#compile "kss027.clw" -- GENERATED
#compile "kss028.clw" -- GENERATED
#compile "kss029.clw" -- GENERATED
#compile "kss030.clw" -- GENERATED
#compile "kss_BC0.CLW" -- GENERATED
#compile "KSS_BC.CLW" -- GENERATED
#pragma link("cwHH%V%.LIB") -- GENERATED
#pragma link("kss.ico") -- GENERATED
#pragma link("kss.EXE.manifest") -- GENERATED
#link "kss.EXE"
[PROGRAM]
[COMMON]
FROM ABC ABC
MODIFIED '2019/02/18' '14:53:41'
[DATA]
[SCREENCONTROLS]
! PROMPT('glo : sz Version:'),USE(?glo:szVersion:Prompt)
! ENTRY(@s31),USE(glo:szVersion)
[REPORTCONTROLS]
! STRING(@s31),USE(glo:szVersion)
glo:szVersion            CSTRING(32)
!!> GUID('43bdda80-37f1-4a56-9560-ed3ed8f97708'),INITIAL('2019.02.18.0<0>{19}'),PROMPT('glo : sz Version:'),HEADER('glo : sz Version'),PICTURE(@s31),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('glo : sz Version:'),USE(?glo:szNewVersion:Prompt)
! ENTRY(@s31),USE(glo:szNewVersion)
[REPORTCONTROLS]
! STRING(@s31),USE(glo:szNewVersion)
glo:szNewVersion         CSTRING(32)
!!> GUID('61bc0d79-68ac-4117-875d-b33de98d2bcb'),PROMPT('glo : sz Version:'),HEADER('glo : sz Version'),PICTURE(@s31),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('glo : sz Version:'),USE(?glo:szNoDownloadVersion:Prompt)
! ENTRY(@s31),USE(glo:szNoDownloadVersion)
[REPORTCONTROLS]
! STRING(@s31),USE(glo:szNoDownloadVersion)
glo:szNoDownloadVersion  CSTRING(32)
!!> GUID('cb5d690d-18c0-4a73-8c7f-75fb323bc214'),PROMPT('glo : sz Version:'),HEADER('glo : sz Version'),PICTURE(@s31),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('glo : sz New Features:'),USE(?glo:szNewFeatures:Prompt)
! ENTRY(@s255),USE(glo:szNewFeatures)
[REPORTCONTROLS]
! STRING(@s255),USE(glo:szNewFeatures)
glo:szNewFeatures        CSTRING(4096)
!!> GUID('cb517167-f0d5-4a45-8c59-2e5e70dd6b95'),PROMPT('glo : sz New Features:'),HEADER('glo : sz New Features'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('glo : sz Install Program:'),USE(?glo:szInstallProgram:Prompt)
! ENTRY(@s255),USE(glo:szInstallProgram)
[REPORTCONTROLS]
! STRING(@s255),USE(glo:szInstallProgram)
glo:szInstallProgram     CSTRING(260)
!!> GUID('6e18bc1c-8230-4e5a-987a-873cd7036ae1'),PROMPT('glo : sz Install Program:'),HEADER('glo : sz Install Program'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('glo : sz Null:'),USE(?glo:szNull:Prompt)
! ENTRY(@s1),USE(glo:szNull)
[REPORTCONTROLS]
! STRING(@s1),USE(glo:szNull)
glo:szNull               CSTRING(2)
!!> GUID('a7ea453a-e8f6-41dc-bb7d-c0889d6af1bc'),PROMPT('glo : sz Null:'),HEADER('glo : sz Null'),PICTURE(@s1),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('glo : b Install On Exit:'),USE(?glo:bInstallOnExit:Prompt)
! ENTRY(@s20),USE(glo:bInstallOnExit)
[REPORTCONTROLS]
! STRING(@s20),USE(glo:bInstallOnExit)
glo:bInstallOnExit       BOOL
!!> GUID('15889cda-9275-4fb0-b302-d3f29f0bdcd2'),PROMPT('glo : b Install On Exit:'),HEADER('glo : b Install On Exit'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('Registered To:'),USE(?RegisteredTo:Prompt)
! ENTRY(@s255),USE(RegisteredTo)
[REPORTCONTROLS]
! STRING(@s255),USE(RegisteredTo)
RegisteredTo             CSTRING(257)
!!> GUID('76703ba5-4d7e-49ff-ac32-dc469acdb102'),PROMPT('Registered To:'),HEADER('Registered To'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('cs:'),USE(?cs:Prompt)
! ENTRY(@s20),USE(cs)
[REPORTCONTROLS]
! STRING(@s20),USE(cs)
cs                       CriticalSection
!!> GUID('8d1e1844-640d-44be-94d7-3639405d68e1'),PROMPT('cs:'),HEADER('cs'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('Current Search:'),USE(?CurrentSearch:Prompt)
! ENTRY(@n-14),USE(CurrentSearch),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(CurrentSearch),RIGHT(1)
CurrentSearch            LONG
!!> GUID('e1e57b0a-f165-4a55-a866-2ae835ed2b2e'),PROMPT('Current Search:'),HEADER('Current Search'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('g h Child Std OUT Rd:'),USE(?g_hChildStd_IN_Rd:Prompt)
! ENTRY(@s20),USE(g_hChildStd_IN_Rd)
[REPORTCONTROLS]
! STRING(@s20),USE(g_hChildStd_IN_Rd)
g_hChildStd_IN_Rd        HANDLE,THREAD
!!> GUID('f738148d-3e9b-4b4e-9f1b-e11ab9e9c66a'),PROMPT('g h Child Std OUT Rd:'),HEADER('g h Child Std OUT Rd'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('g h Child Std OUT Wr:'),USE(?g_hChildStd_IN_Wr:Prompt)
! ENTRY(@s20),USE(g_hChildStd_IN_Wr)
[REPORTCONTROLS]
! STRING(@s20),USE(g_hChildStd_IN_Wr)
g_hChildStd_IN_Wr        HANDLE,THREAD
!!> GUID('aab12d92-3c91-41ca-884a-05b1ea2c187a'),PROMPT('g h Child Std OUT Wr:'),HEADER('g h Child Std OUT Wr'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('g h Child Std OUT Rd:'),USE(?g_hChildStd_OUT_Rd:Prompt)
! ENTRY(@s20),USE(g_hChildStd_OUT_Rd)
[REPORTCONTROLS]
! STRING(@s20),USE(g_hChildStd_OUT_Rd)
g_hChildStd_OUT_Rd       HANDLE,THREAD
!!> GUID('9e845bee-4579-46a5-a7b0-b0db94865e45'),PROMPT('g h Child Std OUT Rd:'),HEADER('g h Child Std OUT Rd'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('g h Child Std OUT Wr:'),USE(?g_hChildStd_OUT_Wr:Prompt)
! ENTRY(@s20),USE(g_hChildStd_OUT_Wr)
[REPORTCONTROLS]
! STRING(@s20),USE(g_hChildStd_OUT_Wr)
g_hChildStd_OUT_Wr       HANDLE,THREAD
!!> GUID('dd109676-daf7-4dbb-a9f4-d97bd9affb24'),PROMPT('g h Child Std OUT Wr:'),HEADER('g h Child Std OUT Wr'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('pi Proc Info:'),USE(?piProcInfo:Prompt)
! ENTRY(@s20),USE(piProcInfo)
[REPORTCONTROLS]
! STRING(@s20),USE(piProcInfo)
piProcInfo               LIKE(PROCESS_INFORMATION),THREAD
!!> GUID('79de0d8a-e26e-47e2-a0b0-8afd7d9d759f'),PROMPT('pi Proc Info:'),HEADER('pi Proc Info'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('Cancel Flag:'),USE(?CancelFlag:Prompt)
! ENTRY(@n3),USE(CancelFlag)
[REPORTCONTROLS]
! STRING(@n3),USE(CancelFlag)
CancelFlag               BYTE,THREAD
!!> GUID('435431e8-5f7a-476f-afda-cf23e49aacce'),PROMPT('Cancel Flag:'),HEADER('Cancel Flag'),PICTURE(@n3),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('glo : findstr Command Line:'),USE(?glo:findstrCommandLine:Prompt)
! ENTRY(@s255),USE(glo:findstrCommandLine)
[REPORTCONTROLS]
! STRING(@s255),USE(glo:findstrCommandLine)
glo:findstrCommandLine   CSTRING(261)
!!> GUID('cbc74dd1-699a-44f6-bdae-3e545539386d'),PROMPT('glo : findstr Command Line:'),HEADER('glo : findstr Command Line'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('glo : Splitter Orientation:'),USE(?glo:SplitterOrientation:Prompt)
! ENTRY(@n3),USE(glo:SplitterOrientation)
[REPORTCONTROLS]
! STRING(@n3),USE(glo:SplitterOrientation)
glo:SplitterOrientation  BYTE
!!> GUID('775b57ae-a0d6-4baf-b207-32bf7a2ac3fa'),INITIAL('1'),PROMPT('glo : Splitter Orientation:'),HEADER('glo : Splitter Orientation'),PICTURE(@n3),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('glo : Split X:'),USE(?glo:SplitX:Prompt)
! ENTRY(@n-14),USE(glo:SplitX),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(glo:SplitX),RIGHT(1)
glo:SplitX               LONG
!!> GUID('34e86607-ae68-4ee2-96c0-f0919cd86715'),PROMPT('glo : Split X:'),HEADER('glo : Split X'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('glo : Split Y:'),USE(?glo:SplitY:Prompt)
! ENTRY(@n-14),USE(glo:SplitY),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(glo:SplitY),RIGHT(1)
glo:SplitY               LONG
!!> GUID('4364a41b-81f9-4d84-8c09-e64b6400f009'),PROMPT('glo : Split Y:'),HEADER('glo : Split Y'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('glo : Prompt For Editor:'),USE(?glo:PromptForEditor:Prompt)
! ENTRY(@n3),USE(glo:PromptForEditor)
[REPORTCONTROLS]
! STRING(@n3),USE(glo:PromptForEditor)
glo:PromptForEditor      BYTE
!!> GUID('1e1fcb0d-88cb-4ffe-9874-076abc1466fe'),PROMPT('glo : Prompt For Editor:'),HEADER('glo : Prompt For Editor'),PICTURE(@n3),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('glo : b All Extensions:'),USE(?glo:bAllExtensions:Prompt)
! ENTRY(@n3),USE(glo:bAllExtensions)
[REPORTCONTROLS]
! STRING(@n3),USE(glo:bAllExtensions)
glo:bAllExtensions       BYTE
!!> GUID('1d37bfc6-af80-430c-a7f5-82bc82dc453a'),PROMPT('glo : b All Extensions:'),HEADER('glo : b All Extensions'),PICTURE(@n3),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('&Edit Command:'),USE(?glo:szEditorCommand:Prompt)
! ENTRY(@s255),USE(glo:szEditorCommand)
[REPORTCONTROLS]
! STRING(@s255),USE(glo:szEditorCommand)
glo:szEditorCommand      CSTRING(261)
!!> GUID('7f90b736-316a-483f-b163-5923d0716df1'),PROMPT('&Edit Command:'),HEADER('Edit Command'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! OPTION('glo : New Search Action:'),USE(glo:NewSearchAction),BOXED
! RADIO('A New Tab'),USE(?glo:NewSearchAction:Radio1),VALUE('1')
! RADIO('The Current Tab'),USE(?glo:NewSearchAction:Radio2),VALUE('0')
! END
[REPORTCONTROLS]
! STRING(@n3),USE(glo:NewSearchAction)
glo:NewSearchAction      BYTE
!!> GUID('4b384707-2c78-4bea-b474-010e39143839'),VALID(INLIST('A New Tab|The Current Tab')),PROMPT('glo : New Search Action:'),HEADER('glo : New Search Action'),PICTURE(@n3),TYPEMODE(INS),VALUES('1|0')
[SCREENCONTROLS]
! PROMPT(':'),USE(?:Prompt)
! ENTRY(@n3)
[REPORTCONTROLS]
! STRING(@n3)
glo:bUseAssociation      BYTE
!!> GUID('59a46aaa-b764-4e2d-8afb-23d70dcadff5'),INITIAL('0'),PROMPT(':'),PICTURE(@n3),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('glo : Result List Font Name:'),USE(?glo:ResultListFontName:Prompt)
! ENTRY(@s31),USE(glo:ResultListFontName)
[REPORTCONTROLS]
! STRING(@s31),USE(glo:ResultListFontName)
glo:ResultListFontName   CSTRING(32)
!!> GUID('597d2c35-6fd1-4b59-8fcc-8823db5179ac'),PROMPT('glo : Result List Font Name:'),HEADER('glo : Result List Font Name'),PICTURE(@s31),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('glo : Result List Font Size:'),USE(?glo:ResultListFontSize:Prompt)
! ENTRY(@n3),USE(glo:ResultListFontSize)
[REPORTCONTROLS]
! STRING(@n3),USE(glo:ResultListFontSize)
glo:ResultListFontSize   BYTE
!!> GUID('9b9efec5-b1e3-4104-b0f3-75c3fb3356a6'),PROMPT('glo : Result List Font Size:'),HEADER('glo : Result List Font Size'),PICTURE(@n3),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('glo : Result List Fore Color:'),USE(?glo:ResultListForeColor:Prompt)
! ENTRY(@n-14),USE(glo:ResultListForeColor),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(glo:ResultListForeColor),RIGHT(1)
glo:ResultListForeColor  LONG
!!> GUID('e352fd4d-2453-4424-a5df-93ecf39184a4'),PROMPT('glo : Result List Fore Color:'),HEADER('glo : Result List Fore Color'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('glo : Result List Font Style:'),USE(?glo:ResultListFontStyle:Prompt)
! ENTRY(@n-14),USE(glo:ResultListFontStyle),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(glo:ResultListFontStyle),RIGHT(1)
glo:ResultListFontStyle  LONG
!!> GUID('2082ad77-d5c4-448f-900c-fff058843815'),PROMPT('glo : Result List Font Style:'),HEADER('glo : Result List Font Style'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('glo : Application Color:'),USE(?glo:ApplicationColor:Prompt)
! ENTRY(@n-14),USE(glo:ApplicationColor),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(glo:ApplicationColor),RIGHT(1)
glo:ApplicationColor     LONG
!!> GUID('d23caecd-6f23-4da2-96e6-f86224d45a74'),PROMPT('glo : Application Color:'),HEADER('glo : Application Color'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('glo : Application Active Color:'),USE(?glo:ToolbarColor:Prompt)
! ENTRY(@n-14),USE(glo:ToolbarColor),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(glo:ToolbarColor),RIGHT(1)
glo:ToolbarColor         LONG
!!> GUID('247cf7cc-0ebf-45d7-a920-926ecdbd6297'),PROMPT('glo : Application Active Color:'),HEADER('glo : Application Active Color'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('glo : Bookmark Back:'),USE(?glo:BookmarkBack:Prompt)
! ENTRY(@n-14),USE(glo:BookmarkBack),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(glo:BookmarkBack),RIGHT(1)
glo:BookmarkBack         LONG
!!> GUID('1100ccf6-efa9-4d17-8f2c-a7ae642dc6d9'),PROMPT('glo : Bookmark Back:'),HEADER('glo : Bookmark Back'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('glo : Selected Back:'),USE(?glo:SelectedBack:Prompt)
! ENTRY(@n-14),USE(glo:SelectedBack),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(glo:SelectedBack),RIGHT(1)
glo:SelectedBack         LONG
!!> GUID('cf8ddbae-d6f6-413f-be3f-6766135e3617'),PROMPT('glo : Selected Back:'),HEADER('glo : Selected Back'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('glo : Viewer Styles:'),USE(?ViewerStyles:Prompt)
! ENTRY(@s20),USE(ViewerStyles)
[REPORTCONTROLS]
! STRING(@s20),USE(ViewerStyles)
glo:ViewerStyles         LIKE(COLORGROUPTYPE)
!!> GUID('f748beb1-bc67-456a-b1cf-72f5553aa394'),PROMPT('glo : Viewer Styles:'),HEADER('glo : Viewer Styles'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('glo : Zoom:'),USE(?glo:Zoom:Prompt)
! ENTRY(@n-14),USE(glo:Zoom),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(glo:Zoom),RIGHT(1)
glo:Zoom                 LONG
!!> GUID('eec47b5b-7f88-4eb8-a2f4-5f553f63acfc'),PROMPT('glo : Zoom:'),HEADER('glo : Zoom'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('glo : sz Clarion Help File:'),USE(?glo:szClarionHelpFile:Prompt)
! ENTRY(@s255),USE(glo:szClarionHelpFile)
[REPORTCONTROLS]
! STRING(@s255),USE(glo:szClarionHelpFile)
glo:szClarionHelpFile    CSTRING(260)
!!> GUID('bca7c7f2-34e0-466c-a2c5-67970e8752a4'),PROMPT('glo : sz Clarion Help File:'),HEADER('glo : sz Clarion Help File'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('glo : sz Default Property File:'),USE(?glo:szDefaultPropertyFile:Prompt)
! ENTRY(@s64),USE(glo:szDefaultPropertyFile)
[REPORTCONTROLS]
! STRING(@s64),USE(glo:szDefaultPropertyFile)
glo:szDefaultPropertyFile CSTRING(65)
!!> GUID('c85c04e0-71be-4d98-a375-ec88191aa23e'),PROMPT('glo : sz Default Property File:'),HEADER('glo : sz Default Property File'),PICTURE(@s64),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('glo : b Hot Spots Enabled:'),USE(?glo:bHotSpotsEnabled:Prompt)
! ENTRY(@s20),USE(glo:bHotSpotsEnabled)
[REPORTCONTROLS]
! STRING(@s20),USE(glo:bHotSpotsEnabled)
glo:bHotSpotsEnabled     BOOL
!!> GUID('3b390a02-a833-49ee-89bc-ff71ee40f7e0'),INITIAL('1'),PROMPT('glo : b Hot Spots Enabled:'),HEADER('glo : b Hot Spots Enabled'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! CHECK('Auto Save'),USE(glo:bAutoSave)
[REPORTCONTROLS]
! STRING(@s20),USE(glo:bAutoSave)
glo:bAutoSave            BOOL
!!> GUID('cf11f9ab-271e-46fe-9da6-7bfed669170f'),PROMPT('Auto Save:'),HEADER('Auto Save'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('glo : b Show Auto Save Warning:'),USE(?glo:bShowAutoSaveWarning:Prompt)
! ENTRY(@s20),USE(glo:bShowAutoSaveWarning)
[REPORTCONTROLS]
! STRING(@s20),USE(glo:bShowAutoSaveWarning)
glo:bShowAutoSaveWarning BOOL
!!> GUID('3c3ae3da-5f86-4cfc-b8a5-32155f1507a3'),PROMPT('glo : b Show Auto Save Warning:'),HEADER('glo : b Show Auto Save Warning'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('glo : b Hide Results Panel:'),USE(?glo:bHideResultsPanel:Prompt)
! ENTRY(@n3),USE(glo:bHideResultsPanel)
[REPORTCONTROLS]
! STRING(@n3),USE(glo:bHideResultsPanel)
glo:bHideResultsPanel    BYTE
!!> GUID('5feb8832-8b3a-4521-b25a-bb2040e2d522'),PROMPT('glo : b Hide Results Panel:'),HEADER('glo : b Hide Results Panel'),PICTURE(@n3),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('glo : b Hide Edit Panel:'),USE(?glo:bHideEditPanel:Prompt)
! ENTRY(@n3),USE(glo:bHideEditPanel)
[REPORTCONTROLS]
! STRING(@n3),USE(glo:bHideEditPanel)
glo:bHideEditPanel       BYTE
!!> GUID('3eb8b02a-6ca1-4fde-97bb-df959467bd75'),PROMPT('glo : b Hide Edit Panel:'),HEADER('glo : b Hide Edit Panel'),PICTURE(@n3),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('glo : sql Properties:'),USE(?glo:sqlProperties:Prompt)
! ENTRY(@s32),USE(glo:sqlProperties),RIGHT(1)
[REPORTCONTROLS]
! STRING(@s32),USE(glo:sqlProperties),RIGHT(1)
glo:sqlProperties        CSTRING(33)
!!> GUID('73bdfcd7-23ba-4ece-ac95-30f03abf39de'),PROMPT('glo : sql Properties:'),HEADER('glo : sql Properties'),PICTURE(@s32),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('Search New Tab Pressed'),USE(?glo:bSearchNewTabPressed:Prompt)
! ENTRY(@n3),USE(glo:bSearchNewTabPressed)
[REPORTCONTROLS]
! STRING(@n3),USE(glo:bSearchNewTabPressed)
glo:bSearchNewTabPressed BYTE
!!> GUID('4c5e029f-86fb-47b1-8097-0dee2d65c900'),PROMPT('Search New Tab Pressed'),HEADER('Search New Tab Pressed'),PICTURE(@n3),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('glo : n Default Search Button:'),USE(?glo:nDefaultSearchButton:Prompt)
! ENTRY(@n3),USE(glo:nDefaultSearchButton)
[REPORTCONTROLS]
! STRING(@n3),USE(glo:nDefaultSearchButton)
glo:nDefaultSearchButton BYTE
!!> GUID('62bf5e8c-3e63-41fe-8000-23df0d5b635a'),INITIAL('2'),PROMPT('glo : n Default Search Button:'),HEADER('glo : n Default Search Button'),PICTURE(@n3),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('glo : n Delete Warning Count:'),USE(?glo:nDeleteWarningCount:Prompt)
! ENTRY(@n-14),USE(glo:nDeleteWarningCount),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(glo:nDeleteWarningCount),RIGHT(1)
glo:nDeleteWarningCount  LONG
!!> GUID('b58491e6-23c5-4f9d-920d-4355ea971b60'),PROMPT('glo : n Delete Warning Count:'),HEADER('glo : n Delete Warning Count'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('glo : b Dont Show Subdirectory Warning:'),USE(?glo:bDontShowSubdirectoryWarning:Prompt)
! ENTRY(@s20),USE(glo:bDontShowSubdirectoryWarning)
[REPORTCONTROLS]
! STRING(@s20),USE(glo:bDontShowSubdirectoryWarning)
glo:bDontShowSubdirectoryWarning BOOL
!!> GUID('ae34addf-5c3d-41ca-aec3-fef0f31a50a3'),PROMPT('glo : b Dont Show Subdirectory Warning:'),HEADER('glo : b Dont Show Subdirectory Warning'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('glo : Sync Path With Pattern:'),USE(?glo:SyncPathWithPattern:Prompt)
! ENTRY(@s20),USE(glo:SyncPathWithPattern)
[REPORTCONTROLS]
! STRING(@s20),USE(glo:SyncPathWithPattern)
glo:SyncPathWithPattern  BOOL
!!> GUID('d3f27a09-60eb-4d50-a89e-afe6c49af616'),PROMPT('glo : Sync Path With Pattern:'),HEADER('glo : Sync Path With Pattern'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('glo : Plus Key:'),USE(?glo:PlusKey:Prompt)
! ENTRY(@n-14),USE(glo:PlusKey),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(glo:PlusKey),RIGHT(1)
glo:PlusKey              LONG
!!> GUID('fe63fcf8-adee-46f1-b5cd-83a8d30bf74e'),INITIAL('06Bh'),PROMPT('glo : Plus Key:'),HEADER('glo : Plus Key'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('glo : Plus Key:'),USE(?glo:OldPlusKey:Prompt)
! ENTRY(@n-14),USE(glo:OldPlusKey),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(glo:OldPlusKey),RIGHT(1)
glo:OldPlusKey           LONG
!!> GUID('2c16b435-82db-4dca-b166-bfec9e0a3470'),INITIAL('06Bh'),PROMPT('glo : Plus Key:'),HEADER('glo : Plus Key'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('glo : Minus Key:'),USE(?glo:MinusKey:Prompt)
! ENTRY(@n-14),USE(glo:MinusKey),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(glo:MinusKey),RIGHT(1)
glo:MinusKey             LONG
!!> GUID('867b2577-a855-4fae-bc1f-5124fe8dacad'),INITIAL('06Dh'),PROMPT('glo : Minus Key:'),HEADER('glo : Minus Key'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('glo : Minus Key:'),USE(?glo:OldMinusKey:Prompt)
! ENTRY(@n-14),USE(glo:OldMinusKey),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(glo:OldMinusKey),RIGHT(1)
glo:OldMinusKey          LONG
!!> GUID('c5ff9b00-5028-4110-b7d5-75af895f1222'),INITIAL('06Dh'),PROMPT('glo : Minus Key:'),HEADER('glo : Minus Key'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('sz Root:'),USE(?szRoot:Prompt)
! ENTRY(@s48),USE(szRoot)
[REPORTCONTROLS]
! STRING(@s48),USE(szRoot)
szRoot                   CSTRING(49)
!!> GUID('d04853c4-1739-4d74-a7e8-100ce15e0c5a'),PROMPT('sz Root:'),HEADER('sz Root'),PICTURE(@s48),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('glo : Main Window:'),USE(?glo:MainWindow:Prompt)
! ENTRY(@s20),USE(glo:MainWindow)
[REPORTCONTROLS]
! STRING(@s20),USE(glo:MainWindow)
glo:MainWindow           &WINDOW
!!> GUID('4eb3bc15-4c1e-4d40-9f3b-ca12c6d6232a'),PROMPT('glo : Main Window:'),HEADER('glo : Main Window'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! CHECK(' Allow Multiple Instances'),USE(glo:AllowMultipleInstances)
[REPORTCONTROLS]
! CHECK('glo : Allow Multiple Instances:'),USE(glo:AllowMultipleInstances)
glo:AllowMultipleInstances BYTE
!!> GUID('85ad4115-d86e-4f58-a1bc-6380381f88fc'),VALID(BOOLEAN),INITIAL('FALSE'),PROMPT(' Allow Multiple Instances'),HEADER('glo : Allow Multiple Instances'),PICTURE(@n3),TYPEMODE(INS)
[SCREENCONTROLS]
! CHECK(' Auto Size Result Columns'),USE(glo:AutoSizeResultColumns)
[REPORTCONTROLS]
! CHECK(' Auto Size Result Columns'),USE(glo:AutoSizeResultColumns)
glo:AutoSizeResultColumns BYTE
!!> GUID('5da8ea53-1451-4282-8788-07b0902696f9'),VALID(BOOLEAN),INITIAL('FALSE'),PROMPT(' Auto Size Result Columns'),HEADER('glo : Auto Size Result Columns'),PICTURE(@n3),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('Restore Point Timer Interval'),USE(?glo:RestorePointTimerInterval:Prompt)
! SPIN(@n13),USE(glo:RestorePointTimerInterval),RIGHT(1),STEP(100)
[REPORTCONTROLS]
! STRING(@n13),USE(glo:RestorePointTimerInterval),RIGHT(1)
glo:RestorePointTimerInterval LONG
!!> GUID('a4bf3434-ffc4-499c-89e7-c47e5cb99ed8'),PROMPT('Restore Point Timer Interval'),HEADER('glo : Restore Point Timer Thread'),PICTURE(@n13),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('glo : Restore Point Checked:'),USE(?glo:RestorePointChecked:Prompt)
! ENTRY(@n3),USE(glo:RestorePointChecked)
[REPORTCONTROLS]
! STRING(@n3),USE(glo:RestorePointChecked)
glo:RestorePointChecked  BYTE
!!> GUID('3ad32517-2e48-4eb8-95af-85d4221842d3'),INITIAL('0'),PROMPT('glo : Restore Point Checked:'),HEADER('glo : Restore Point Checked'),PICTURE(@n3),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('glo : Restore Point Folder:'),USE(?glo:RestorePointFolder:Prompt)
! ENTRY(@s255),USE(glo:RestorePointFolder)
[REPORTCONTROLS]
! STRING(@s255),USE(glo:RestorePointFolder)
glo:RestorePointFolder   CSTRING(261)
!!> GUID('3a973c4d-79ff-44b1-806e-c238dbe5b952'),PROMPT('glo : Restore Point Folder:'),HEADER('glo : Restore Point Folder'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('glo : Restore Point Timer Thread:'),USE(?glo:RestorePointTimerThread:Prompt)
! ENTRY(@n-14),USE(glo:RestorePointTimerThread),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(glo:RestorePointTimerThread),RIGHT(1)
glo:RestorePointTimerThread LONG
!!> GUID('e5dbd53d-47b9-4276-917c-a28e477c5190'),PROMPT('glo : Restore Point Timer Thread:'),HEADER('glo : Restore Point Timer Thread'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('Macro Queue:'),USE(?MacroQueue:Prompt)
! ENTRY(@s20),USE(MacroQueue)
[REPORTCONTROLS]
! STRING(@s20),USE(MacroQueue)
MacroQueue               QUEUE,PRE(MacroQueue)
!!> GUID('14bd2897-26ba-4b60-9383-f3b7c5b97b81'),PROMPT('Macro Queue:'),HEADER('Macro Queue'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('feq Button:'),USE(?MacroQueue:feqButton:Prompt)
! ENTRY(@n-14),USE(MacroQueue:feqButton),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(MacroQueue:feqButton),RIGHT(1)
feqButton                  LONG
!!> GUID('75f3a273-270f-41d6-823c-81b8eb066150'),PROMPT('feq Button:'),HEADER('feq Button'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('sz Field 1:'),USE(?MacroQueue:szField1:Prompt)
! ENTRY(@s255),USE(MacroQueue:szField1)
[REPORTCONTROLS]
! STRING(@s255),USE(MacroQueue:szField1)
szField1                   CSTRING(261)
!!> GUID('ef135ed8-917b-4fab-aa04-47054454d46a'),PROMPT('sz Field 1:'),HEADER('sz Field 1'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('sz Field 2:'),USE(?MacroQueue:szField2:Prompt)
! ENTRY(@s255),USE(MacroQueue:szField2)
[REPORTCONTROLS]
! STRING(@s255),USE(MacroQueue:szField2)
szField2                   CSTRING(261)
!!> GUID('3ad10e74-92b4-4cdb-8bed-614ff2eb5189'),PROMPT('sz Field 2:'),HEADER('sz Field 2'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('sz Field 2:'),USE(?MacroQueue:szField3:Prompt)
! ENTRY(@s255),USE(MacroQueue:szField3)
[REPORTCONTROLS]
! STRING(@s255),USE(MacroQueue:szField3)
szField3                   CSTRING(261)
!!> GUID('a399f89b-1990-41f0-baae-64fa7c4d15e3'),PROMPT('sz Field 2:'),HEADER('sz Field 2'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('mark:'),USE(?MacroQueue:mark:Prompt)
! ENTRY(@s20),USE(MacroQueue:mark)
[REPORTCONTROLS]
! STRING(@s20),USE(MacroQueue:mark)
mark                       BOOL
!!> GUID('75de70da-0c0f-44e9-a0f9-26af59098de5'),PROMPT('mark:'),HEADER('mark'),PICTURE(@s20),TYPEMODE(INS)
                         END
!!> GUID('a7f7f0ff-8102-4642-8494-730720b137c1')
[SCREENCONTROLS]
! PROMPT('Editor Queue:'),USE(?EditorQueue:Prompt)
! ENTRY(@s20),USE(EditorQueue)
[REPORTCONTROLS]
! STRING(@s20),USE(EditorQueue)
EditorQueue              QUEUE(MRUQueueType),PRE(EditorQueue)
!!> GUID('5f9790be-491c-421e-97ae-c78add0e9b6f'),PROMPT('Editor Queue:'),HEADER('Editor Queue'),PICTURE(@s20),TYPEMODE(INS)
                         END
!!> GUID('b8ef6e2a-f01d-4876-8d2b-1b035cf67241')
[SCREENCONTROLS]
! PROMPT('File Extension Queue:'),USE(?FileExtensionQueue:Prompt)
! ENTRY(@s20),USE(FileExtensionQueue)
[REPORTCONTROLS]
! STRING(@s20),USE(FileExtensionQueue)
FileExtensionQueue       QUEUE(FileExtensionQueueType),PRE(fxq)
!!> GUID('be4b5af7-f12a-404b-97a7-7ace1d3a877b'),PROMPT('File Extension Queue:'),HEADER('File Extension Queue'),PICTURE(@s20),TYPEMODE(INS)
                         END
!!> GUID('cf0c4881-803f-4301-b390-54f1be9ebf96')
[SCREENCONTROLS]
! PROMPT('Clarion Extensions Queue:'),USE(?ClarionExtensionsQueue:Prompt)
! ENTRY(@s20),USE(ClarionExtensionsQueue)
[REPORTCONTROLS]
! STRING(@s20),USE(ClarionExtensionsQueue)
ClarionExtensionsQueue   QUEUE(ClarionExtensionsQueueType),PRE(CEQ)
!!> GUID('8297ec50-8ba0-44fa-a6dd-fbc3d091af68'),PROMPT('Clarion Extensions Queue:'),HEADER('Clarion Extensions Queue'),PICTURE(@s20),TYPEMODE(INS)
                         END
!!> GUID('ecc6e024-418b-4e5d-962b-e4d5b146ff02')
[SCREENCONTROLS]
! PROMPT('Thread Queue:'),USE(?ThreadQueue:Prompt)
! ENTRY(@s20),USE(ThreadQueue)
[REPORTCONTROLS]
! STRING(@s20),USE(ThreadQueue)
ThreadQueue              QUEUE,PRE(ThreadQ)
!!> GUID('98580dd5-30c5-4b3c-89c0-a24bee10cf05'),PROMPT('Thread Queue:'),HEADER('Thread Queue'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('ID:'),USE(?ThreadQ:ID:Prompt)
! ENTRY(@n-14),USE(ThreadQ:ID),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(ThreadQ:ID),RIGHT(1)
ID                         LONG
!!> GUID('cdd7ef8d-6b46-4aff-b8c5-8a43d8c292b2'),PROMPT('ID:'),HEADER('ID'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('Thread No:'),USE(?ThreadQ:ThreadNo:Prompt)
! ENTRY(@n-14),USE(ThreadQ:ThreadNo),RIGHT(1),MSG('OS Thread'),TIP('OS Thread')
[REPORTCONTROLS]
! STRING(@n-14),USE(ThreadQ:ThreadNo),RIGHT(1)
ThreadNo                   LONG !OS Thread
!!> GUID('c8755395-67a8-4abf-8a61-0f984cc34c32'),PROMPT('Thread No:'),HEADER('Thread No'),MESSAGE('OS Thread'),TOOLTIP('OS Thread'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('Target Process Handle:'),USE(?ThreadQ:TargetProcessHandle:Prompt)
! ENTRY(@n-14),USE(ThreadQ:TargetProcessHandle),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(ThreadQ:TargetProcessHandle),RIGHT(1)
TargetProcessHandle        LONG
!!> GUID('c957efb9-5d7e-49b5-a452-df911f74d254'),PROMPT('Target Process Handle:'),HEADER('Target Process Handle'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('tab Number:'),USE(?ThreadQ:tabNumber:Prompt)
! ENTRY(@n-14),USE(ThreadQ:tabNumber),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(ThreadQ:tabNumber),RIGHT(1)
tabNumber                  LONG
!!> GUID('bbc55a0b-7099-4959-ae08-34ad0dedeb3e'),PROMPT('tab Number:'),HEADER('tab Number'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('l Clock:'),USE(?ThreadQ:lClock:Prompt)
! ENTRY(@n-14),USE(ThreadQ:lClock),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(ThreadQ:lClock),RIGHT(1)
lClock                     LONG
!!> GUID('120e724b-5588-46d9-88b2-87b8b0c19b55'),PROMPT('l Clock:'),HEADER('l Clock'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
                         END
!!> GUID('b96fb614-f290-42a4-8a19-de2e271fb74a')
[SCREENCONTROLS]
! PROMPT('STDOUT Queue:'),USE(?STDOUT_Queue:Prompt)
! ENTRY(@s20),USE(STDOUT_Queue)
[REPORTCONTROLS]
! STRING(@s20),USE(STDOUT_Queue)
STDOUT_Queue             QUEUE(STDOUTQueueType),PRE(SQ),THREAD
!!> GUID('502e9af7-5e34-4272-9abe-f89cb6a68f05'),PROMPT('STDOUT Queue:'),HEADER('STDOUT Queue'),PICTURE(@s20),TYPEMODE(INS)
                         END
!!> GUID('df277f7e-3892-4638-a004-3b29fddc98a1')
[EMBED]
EMBED %BeforeGlobalIncludes
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
   INCLUDE('ctKssKeyCodeName.inc'),ONCE
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
   INCLUDE('cwsynchc.inc'),ONCE
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
   INCLUDE('Windows.inc'),ONCE
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
   INCLUDE('svapi.inc'),ONCE
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
   INCLUDE('csciviewer.inc'),ONCE
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
   INCLUDE('cwhh.inc'),ONCE
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
INCLUDE('BRWEXT.INC'),ONCE
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
!EQUATES
UNREGISTERED_COPY                EQUATE('Unregistered Evaluation Copy')
HANDLE_FLAG_INHERIT              EQUATE(00000001h)
HANDLE_FLAG_PROTECT_FROM_CLOSE   EQUATE(00000002h)

LPBYTE                           EQUATE(LONG)
LPCTSTR                          EQUATE(LONG)
LPDWORD                          EQUATE(LONG)
LPOVERLAPPED                     EQUATE(LONG)
LPSECURITY_ATTRIBUTES            EQUATE(LONG)
LPTSTR                           EQUATE(LONG)
WORD                             EQUATE(SHORT)

BUFSIZE                          EQUATE(10240)   !(16384)

STD_INPUT_HANDLE                 EQUATE(-10)    !  The standard input device. Initially, this is the console input buffer, CONIN$.
STD_OUTPUT_HANDLE                EQUATE(-11)    !  The standard output device. Initially, this is the active console screen buffer, CONOUT$.
STD_ERROR_HANDLE                 EQUATE(-12)    !  The standard error device. Initially, this is the active console screen buffer, CONOUT$.

MAXPATH                          EQUATE(260)
MAXDRIVE                         EQUATE(3)
MAXDIR                          EQUATE(256)
MAXFILE                          EQUATE(256)
MAXEXT                          EQUATE(255)
MAXMRU                           EQUATE(20)

BS_SOLID                         EQUATE(0)
FLOODFILLSURFACE                 EQUATE(1)

!Well known registry keys
HKEY_CLASSES_ROOT                EQUATE(080000000h)
HKEY_CURRENT_USER                EQUATE(080000001h)
HKEY_LOCAL_MACHINE               EQUATE(080000002h)
HKEY_USERS                       EQUATE(080000003h)
HKEY_PERFORMANCE_DATA            EQUATE(080000004h)
HKEY_CURRENT_CONFIG              EQUATE(080000005h)
HKEY_DYN_DATA                    EQUATE(080000006h)

KEY_ALL_ACCESS                   EQUATE(0001F003Fh)
KEY_QUERY_VALUE                  EQUATE(1)
KEY_SET_VALUE                    EQUATE(2)
REG_OPTION_NON_VOLATILE          EQUATE(0)

LANG_USER_DEFAULT                EQUATE(1)
ERROR_FILE_NOT_FOUND             EQUATE(2)
ERROR_BROKEN_PIPE                EQUATE(109) !The pipe has been ended.
ERROR_IO_PENDING                 EQUATE(997)

EVENT:THREAD                     EQUATE(02100)
EVENT:THREADLAST                 EQUATE(02499)
EVENT:PROGRESS                   EQUATE(02500)
EVENT:PROGRESSLAST               EQUATE(02899)
EVENT:SHOWFINDHELP               EQUATE(03000)
EVENT:SHOWREPLACEHELP            EQUATE(03001)
EVENT:PLAYMACRO                  EQUATE(03002)
EVENT:PLAYSELECTIONS             EQUATE(03003)
EVENT:PLAYNEXTSELECTION          EQUATE(03004)
EVENT:MACROPLAYERCLOSED          EQUATE(03005)
EVENT:GOTONEWLINE                EQUATE(03006)

BUTTON:NextFolder                LONG
BUTTON:PreviousFolder            LONG
BUTTON:NextFile                  LONG
BUTTON:PreviousFile              LONG
BUTTON:NextLine                  LONG
BUTTON:PreviousLine              LONG
BUTTON:DeleteLine                LONG
BUTTON:DeleteFile                LONG
BUTTON:DeleteExtension           LONG
BUTTON:DeletePath                LONG
BUTTON:DeleteComments            LONG
BUTTON:DeleteLabels              LONG
BUTTON:DeleteCode                LONG
BUTTON:DeleteData                LONG
BUTTON:FindAndDelete             LONG

CtrlShiftHook                    EQUATE(959)

MAX_PROGRESS                     EQUATE(100)

NOTIFY:CheckForUpdate            EQUATE(08100h)

MIN_PANELWIDTH                   EQUATE(10)
MIN_PANELHEIGHT                  EQUATE(48)

FORMAT_MESSAGE_FROM_SYSTEM       EQUATE(01000h)

SplitterOrientation:Vertical     EQUATE(0)
SplitterOrientation:Horizontal   EQUATE(1)

EVENT:FoldMarginClick            EQUATE(EVENT:Last)

COLOR_GRADIENTACTIVECAPTION      EQUATE(27)
COLOR_GRADIENTINACTIVECAPTION    EQUATE(28)
!COLOR:GRADIENTACTIVECAPTION      EQUATE(08000001BH)
!COLOR:GRADIENTINACTIVECAPTION    EQUATE(08000001CH)

PROCESS_TERMINATE                EQUATE(00001h)
PROCESS_CREATE_THREAD            EQUATE(00002h)
PROCESS_SET_SESSIONID            EQUATE(00004h)
PROCESS_VM_OPERATION             EQUATE(00008h)
!PROCESS_VM_READ                  EQUATE(00010h)
!PROCESS_VM_WRITE                 EQUATE(00020h)
PROCESS_DUP_HANDLE               EQUATE(00040h)
PROCESS_CREATE_PROCESS           EQUATE(00080h)
PROCESS_SET_QUOTA                EQUATE(00100h)
PROCESS_SET_INFORMATION          EQUATE(00200h)
!PROCESS_QUERY_INFORMATION        EQUATE(00400h)

WM_MOUSEWHEEL                    EQUATE(0020Ah)

CommentStyleClarion  EQUATE(0)
CommentStyleCpp      EQUATE(1)
CommentStyleVB       EQUATE(2)
CommentStylePython   EQUATE(3)
CommentStyleSQL      EQUATE(4)

MONITOR_DEFAULTTOPRIMARY   EQUATE(00000001h)

RECT    GROUP,TYPE
left     SIGNED
top      SIGNED
right    SIGNED
bottom   SIGNED
        END

tagMONITORINFO GROUP,TYPE
cbSize            DWORD
rcMonitor         LIKE(RECT)
rcWork            LIKE(RECT)
dwFlags           DWORD
               END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
ApplicationEvents             ITEMIZE(EVENT:User+3),PRE(EVENT)
CreateRestorePoint               EQUATE
                              END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
LOGBRUSH    GROUP,TYPE
lbStyle       UNSIGNED
lbColor       ULONG
lbHatch       LONG
            END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
STARTUPINFOTYPE   GROUP,TYPE
cb                   DWORD
lpReserved           LPTSTR
lpDesktop            LPTSTR
lpTitle              LPTSTR
dwX                  DWORD
dwY                  DWORD
dwXSize              DWORD
dwYSize              DWORD
dwXCountChars        DWORD
dwYCountChars        DWORD
dwFillAttribute      DWORD
dwFlags              DWORD
wShowWindow          WORD
cbReserved2          WORD
lpReserved2          LPBYTE
hStdInput            HANDLE
hStdOutput           HANDLE
hStdError            HANDLE
            END

STARTF_FORCEONFEEDBACK  EQUATE(000000040h)   !  Indicates that the cursor is in feedback mode for two seconds after CreateProcess is called. The Working in Background cursor is displayed (see the Pointers tab in the Mouse control panel utility).
                                             !  If during those two seconds the process makes the first GUI call, the system gives five more seconds to the process. If during those five seconds the process shows a window, the system gives five more seconds to the process to finish drawing the window.
                                             !  The system turns the feedback cursor off after the first call to GetMessage, regardless of whether the process is drawing.
STARTF_FORCEOFFFEEDBACK EQUATE(000000080h)   !  Indicates that the feedback cursor is forced off while the process is starting. The Normal Select cursor is displayed.
STARTF_PREVENTPINNING   EQUATE(000002000h)   !  Indicates that any windows created by the process cannot be pinned on the taskbar.
                                             !  This flag must be combined with STARTF_TITLEISAPPID.
STARTF_RUNFULLSCREEN    EQUATE(000000020h)   !  Indicates that the process should be run in full-screen mode, rather than in windowed mode.
                                             !  This flag is only valid for console applications running on an x86 computer.
STARTF_TITLEISAPPID     EQUATE(000001000h)   !  The lpTitle member contains an AppUserModelID. This identifier controls how the taskbar and Start menu present the application, and enables it to be associated with the correct shortcuts and Jump Lists. Generally, applications will use the SetCurrentProcessExplicitAppUserModelID and GetCurrentProcessExplicitAppUserModelID functions instead of setting this flag. For more information, see Application User Model IDs.
                                             !  If STARTF_PREVENTPINNING is used, application windows cannot be pinned on the taskbar. The use of any AppUserModelID-related window properties by the application overrides this setting for that window only.
                                             !  This flag cannot be used with STARTF_TITLEISLINKNAME.
STARTF_TITLEISLINKNAME  EQUATE(000000800h)   !  The lpTitle member contains the path of the shortcut file (.lnk) that the user invoked to start this process. This is typically set by the shell when a .lnk file pointing to the launched application is invoked. Most applications will not need to set this value.
                                             !  This flag cannot be used with STARTF_TITLEISAPPID.
STARTF_USECOUNTCHARS    EQUATE(000000008h)   !  The dwXCountChars and dwYCountChars members contain additional information.
STARTF_USEFILLATTRIBUTE EQUATE(000000010h)   !  The dwFillAttribute member contains additional information.
STARTF_USEHOTKEY        EQUATE(000000200h)   !  The hStdInput member contains additional information.
                                             !  This flag cannot be used with STARTF_USESTDHANDLES.
STARTF_USEPOSITION      EQUATE(000000004h)   !  The dwX and dwY members contain additional information.
STARTF_USESHOWWINDOW    EQUATE(000000001h)   !  The wShowWindow member contains additional information.
STARTF_USESIZE          EQUATE(000000002h)   !  The dwXSize and dwYSize members contain additional information.
STARTF_USESTDHANDLES    EQUATE(000000100h)   !  The hStdInput, hStdOutput, and hStdError members contain additional information.
                                             !  If this flag is specified when calling one of the process creation functions, the handles must be inheritable and the function's bInheritHandles parameter must be set to TRUE. For more information, see Handle Inheritance.
                                             !  If this flag is specified when calling the GetStartupInfo function, these members are either the handle value specified during process creation or INVALID_HANDLE_VALUE.
                                             !  Handles must be closed with CloseHandle when they are no longer needed.
                                             !  This flag cannot be used with STARTF_USEHOTKEY.

[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
PROCESS_INFORMATION  GROUP,TYPE
hProcess                HANDLE
hThread                 HANDLE
dwProcessId             DWORD
dwThreadId              DWORD
                     END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
ResultQueueType      QUEUE,TYPE
Path                   CSTRING(261)
Filename               CSTRING(261)
szExtension            CSTRING(MAXEXT+1)
LineNo                 LONG
ProcedureName          CSTRING(256)
Text                   CSTRING(1025)
SortName               CSTRING(261)
szSection              CSTRING(5)
Position               LONG
DeleteInstance         LONG
FileDate               LONG
FileTime               LONG
                     END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
BookmarkQueueType    QUEUE,TYPE
LineNo                  LONG
                     END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
STDOUTQueueType      QUEUE,TYPE
Buffer                 STRING(BUFSIZE)
                     END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
FindStrOptionsGroupType    GROUP,TYPE
tabNumber                     LONG
bMatchPatternStartOfLine      BOOL
bMatchPatternEndOfLine        BOOL
bUseRegularExpressions        BOOL
bSearchSubdirectories         BOOL
nLevels                       BYTE
nCurrentLevel                 BYTE
bCaseSensitive                BOOL
bExactMatch                   BOOL
bExcludeMatch                 BOOL
bExcludeComments              BOOL
bIncludeBinary                BOOL
bSearchPressed                BOOL
szPattern                     CSTRING(1025)
szSearchPath                  CSTRING(1025)
szFileMask                    CSTRING(256)
szMatchesFound                CSTRING(256)
ResultQueue                   &ResultQueueType
UndoQueue                     &ResultQueueType
feqSearchProgress             LONG
lPointer                      LONG
bFilenamesOnly                BOOL
bFileListFromFile             BOOL
szFileListFilename            CSTRING(261)
bSearchStringsFromFile        BOOL
szSearchStringFilename        CSTRING(261)
szPropertyFile                CSTRING(33)
szExcludeMask                 CSTRING(256)
szListBoxFormat               CSTRING(256)
FindGroup                     LIKE(FindGrp)
szReplaceWith                 LIKE(FindGrp.What)
                           END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
FindTextQueueType             QUEUE,TYPE
szFindText                       CSTRING(256)
                              END

SearchFindOptionsGroupType    GROUP,TYPE
szFindText                       CSTRING(256)
SearchLocation                   BYTE
DeleteCondition                  BYTE
MatchType                        BYTE
MatchCase                        BYTE
szText                           CSTRING(1024)
                              END

enumSearchLocation            ITEMIZE
Search:Path                     EQUATE(1)
Search:Filename                 EQUATE(2)
Search:Extension                EQUATE(3)
Search:Procedure                EQUATE(5)
Search:Text                     EQUATE(6)
                              END

enumDeleteCondition           ITEMIZE,PRE(Delete)
Contains                         EQUATE(0)
DoesNotContain                   EQUATE(1)
                              END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
ClarionExtensionsQueueType    QUEUE,TYPE
FileExtension                    CSTRING(256)
                              END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
MRUQueueType      QUEUE,TYPE
szValue              CSTRING(MAXPATH*4)
                  END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
OVERLAPPED_TYPE                 group,type
Internal                          long
InternalHigh                      long
Offset                            long
OffsetHigh                        long
hEvent                            long
                                end
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
ReadFileParamsType   GROUP,TYPE
parentThread            LONG
parentPipe              LONG
parentQueue             &STDOUTQueueType
                     END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
FileModeQueueType       QUEUE,TYPE
FileMode                   CSTRING(33)
Lexer                      CSTRING(33)
nLexer                     LONG
                        END

FileExtensionQueueType  QUEUE(FileModeQueueType),TYPE
Extension                  CSTRING(33)
                        END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
ListFormatQueueType     QUEUE,TYPE
ColumnSequence             BYTE
ColumnName                 CSTRING(32)
ColumnFormat               CSTRING(64)
                        END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
MacroSetQueueType  QUEUE,TYPE
MacroSetName         CSTRING(256)
                   END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
ProcNameQueueType QUEUE,TYPE
LineNo               LONG
ProcedureName        CSTRING(256)
                  END
SectionQueueType  QUEUE,TYPE
lowLineNo            LONG
highLineNo           LONG
szSection            CSTRING(5)
                  END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
OSVERSIONINFO          GROUP,TYPE
dwOSVersionInfoSize      DWORD
dwMajorVersion           DWORD
dwMinorVersion           DWORD
dwBuildNumber            DWORD
dwPlatformId             DWORD
szCSDVersion             BYTE,DIM(128)
                        END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
gtRectCW             GROUP,TYPE
X                       SIGNED
Y                       SIGNED
W                       SIGNED
H                       SIGNED
                     END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
SM_XVIRTUALSCREEN    EQUATE(76)
SM_YVIRTUALSCREEN    EQUATE(77)
SM_CXVIRTUALSCREEN   EQUATE(78)
SM_CYVIRTUALSCREEN   EQUATE(79)
SM_CMONITORS         EQUATE(80)
SM_SAMEDISPLAYFORMAT EQUATE(81)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
_SHFILEOPSTRUCT      GROUP,TYPE
hwnd                    HWND
wFunc                   UNSIGNED !UINT
pFrom                   LONG     !PCZZTSTR
pTo                     LONG     !PCZZTSTR
fFlags                  WORD     !FILEOP_FLAGS
fAnyOperationsAborted   BOOL
hNameMappings           LPVOID
lpszProgressTitle       LONG     !PCTSTR
                     END

! Shell File Operations

FO_MOVE                    EQUATE(00001h)
FO_COPY                    EQUATE(00002h)
FO_DELETE                  EQUATE(00003h)
FO_RENAME                  EQUATE(00004h)

! SHFILEOPSTRUCT.fFlags and IFileOperation::SetOperationFlags() flag values

FOF_MULTIDESTFILES         EQUATE(00001h)
FOF_CONFIRMMOUSE           EQUATE(00002h)
FOF_SILENT                 EQUATE(00004h)  ! don't display progress UI (confirm prompts may be displayed still)
FOF_RENAMEONCOLLISION      EQUATE(00008h)  ! automatically rename the source files to avoid the collisions
FOF_NOCONFIRMATION         EQUATE(00010h)  ! don't display confirmation UI, assume "yes" for cases that can be bypassed, "no" for those that can not
FOF_WANTMAPPINGHANDLE      EQUATE(00020h)  ! Fill in SHFILEOPSTRUCT.hNameMappings
                                           ! Must be freed using SHFreeNameMappings
FOF_ALLOWUNDO              EQUATE(00040h)  ! enable undo including Recycle behavior for IFileOperation::Delete()
FOF_FILESONLY              EQUATE(00080h)  ! only operate on the files (non folders), both files and folders are assumed without this
FOF_SIMPLEPROGRESS         EQUATE(00100h)  ! means don't show names of files
FOF_NOCONFIRMMKDIR         EQUATE(00200h)  ! don't dispplay confirmatino UI before making any needed directories, assume "Yes" in these cases
FOF_NOERRORUI              EQUATE(00400h)  ! don't put up error UI, other UI may be displayed, progress, confirmations
FOF_NOCOPYSECURITYATTRIBS  EQUATE(00800h)  ! dont copy file security attributes (ACLs)
FOF_NORECURSION            EQUATE(01000h)  ! don't recurse into directories for operations that would recurse
FOF_NO_CONNECTED_ELEMENTS  EQUATE(02000h)  ! don't operate on connected elements ("xxx_files" folders that go with .htm files)
FOF_WANTNUKEWARNING        EQUATE(04000h)  ! during delete operation, warn if nuking instead of recycling (partially overrides FOF_NOCONFIRMATION)
FOF_NORECURSEREPARSE       EQUATE(08000h)  ! deprecated; the operations engine always does the right thing on FolderLink objects (symlinks, reparse points, folder shortcuts)
FOF_NO_UI                  EQUATE(00614h)  !(FOF_SILENT | FOF_NOCONFIRMATION | FOF_NOERRORUI | FOF_NOCONFIRMMKDIR) ! don't display any UI at all
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
CtrlShiftBar   EQUATE(988)
[END]
EMBED %GlobalMap
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3240
PROPERTY:END
INCLUDE('CWUTIL.INC'),ONCE
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3600
PROPERTY:END
!INCLUDE('CLIB.CLW'),ONCE
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
INCLUDE('kcrapifnc.inc'),ONCE
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
 MODULE('psapi')
    kcr_EnumProcesses(*DWORD pProcessIds, DWORD cb, *DWORD pBytesReturned),BOOL,PASCAL,RAW,PROC,NAME('EnumProcesses')
    kcr_EnumProcessModules(HANDLE hProcess, *HMODULE hModule, DWORD cb, *DWORD lpcbNeeded),BOOL,PASCAL,RAW,PROC,NAME('EnumProcessModules')
    kcr_GetModuleBaseName(HANDLE hProcess, HMODULE hModule, *CSTRING BaseName, DWORD nSize),DWORD,RAW,PASCAL,PROC,NAME('GetModuleBaseNameA')
 END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
MODULE('Shell32')
   kcr_SHFileOperation(*_SHFILEOPSTRUCT pSHFILEOPSTRUCT),LONG,PASCAL,RAW,PROC,NAME('SHFileOperationA')
END
[END]
EMBED %AfterFileDeclarations
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
AsciiFilename        CSTRING(261),THREAD
AsciiFile            FILE,DRIVER('ASCII'),NAME(AsciiFilename),CREATE,PRE(ASCII),THREAD
                        RECORD
Buffer                     STRING(2048)
                        END
                     END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
XmlFilename          CSTRING(261),THREAD
XmlFile              FILE,DRIVER('ASCII'),NAME(XmlFilename),CREATE,PRE(XML),THREAD
                        RECORD
Buffer                     STRING(2048)
                        END
                     END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
SyncOptionsFilename     CSTRING(261),THREAD
SyncOptions             FILE,DRIVER('TOPSPEED'),NAME(SyncOptionsFilename),CREATE,PRE(SYNC),THREAD
PatternKey                 KEY(SYNC:szPattern),NOCASE
                           RECORD
bMatchPatternStartOfLine      BOOL
bMatchPatternEndOfLine        BOOL
bUseRegularExpressions        BOOL
bSearchSubdirectories         BOOL
nLevels                       BYTE
bCaseSensitive                BOOL
bExactMatch                   BOOL
bExcludeMatch                 BOOL
bExcludeComments              BOOL
bIncludeBinary                BOOL
szPattern                     CSTRING(1025)
szSearchPath                  CSTRING(1025)
szFileMask                    CSTRING(256)
bFilenamesOnly                BOOL
bFileListFromFile             BOOL
szFileListFilename            CSTRING(261)
bSearchStringsFromFile        BOOL
szSearchStringFilename        CSTRING(261)
szExcludeMask                 CSTRING(256)
                           END
                        END
[END]
EMBED %BeforeGlobalDataUser
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
!To Do List
!VB         - done
!Python     - done
!Perl
!Ruby
!PHPScript
!CSS        - done
!SQL
!MSSQL
!MySQL
!PowerShell
!Batch
!VBScript   - done
[END]
EMBED %ProgramEnd
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
CLOSE(SyncOptions)
IF glo:bInstallOnExit = TRUE
   kcr_ShellExecute(0,0,glo:szInstallProgram,0,glo:szNull,1)
END
[END]
EMBED %ProgramSetup
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
SyncOptionsFilename = svSpecialFolder.GetDir(SV:CSIDL_APPDATA, 'Devuna' & '\' & 'KSS\pattern.dat')
INIMgr.Fetch('Global','AllowMultipleInstances',glo:AllowMultipleInstances)
!IF glo:AllowMultipleInstances = FALSE
!   OPEN(SyncOptions)
!ELSE
   OPEN(SyncOptions,ReadWrite+DenyNone)
!END
IF ERRORCODE()
   CREATE(SyncOptions)
!   IF glo:AllowMultipleInstances = FALSE
!      OPEN(SyncOptions)
!   ELSE
      OPEN(SyncOptions,ReadWrite+DenyNone)
!   END
   IF ERRORCODE()
      IF ApplicationIsRunning()
         INIMgr.Kill                                              ! Destroy INI manager
         FuzzyMatcher.Kill                                        ! Destroy fuzzy matcher
         RETURN
      ELSE
         MESSAGE(ERROR() & ' encountered opening SyncOptions','Unexpected Error',ICON:HAND)
      END
   END
END
[END]
[END]
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2017/08/05' ' 8:45:18'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[END]
EMBED %ModuleDataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
LABEL
PROPERTY:END
   MAP
BookmarkAdd             PROCEDURE(LONG lineno)              ! New method added to this class instance
BookmarkDelete          PROCEDURE(LONG lineno)              ! New method added to this class instance
BookmarkPresent         PROCEDURE(LONG lineno),BOOL         ! New method added to this class instance
BookmarkToggle          PROCEDURE(LONG lineno)              ! New method added to this class instance
BookmarkNext            PROCEDURE(BOOL forwardScan, BOOL select) ! New method added to this class instance
GetCurrentLineNumber    PROCEDURE(),LONG                    ! New method added to this class instance
FixFileFolding          PROCEDURE()
GetSearchSubdirectories PROCEDURE(),LONG
ConfirmAutoSave         PROCEDURE(),LONG
ResultList::WndProc     PROCEDURE(HWND hWnd, UNSIGNED wMsg, UNSIGNED wParam, LONG lParam),LONG,PASCAL
   END

ResultList::OrigWndProc LONG
feqResultList           LONG

[END]
[END]
[PROCEDURE]
NAME Main
[COMMON]
FROM ABC Window
MODIFIED '2019/02/18' '14:45:50'
[DATA]
[SCREENCONTROLS]
! PROMPT('Match Pattern Start of Line:'),USE(?bMatchPatternStartOfLine:Prompt)
! ENTRY(@s20),USE(bMatchPatternStartOfLine)
[REPORTCONTROLS]
! STRING(@s20),USE(bMatchPatternStartOfLine)
bMatchPatternStartOfLine BOOL
!!> GUID('d16210fa-e2c7-4a3c-9a8d-3eaaf04f56cb'),PROMPT('Match Pattern Start of Line:'),HEADER('Match Pattern Start Of Line'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('b Match Pattern End Of Line:'),USE(?bMatchPatternEndOfLine:Prompt)
! ENTRY(@s20),USE(bMatchPatternEndOfLine)
[REPORTCONTROLS]
! STRING(@s20),USE(bMatchPatternEndOfLine)
bMatchPatternEndOfLine   BOOL
!!> GUID('a946d69a-d8a6-4d3c-94b2-b49e2755faeb'),PROMPT('b Match Pattern End Of Line:'),HEADER('b Match Pattern End Of Line'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('b Use Regular Expressions:'),USE(?bUseRegularExpressions:Prompt)
! ENTRY(@s20),USE(bUseRegularExpressions)
[REPORTCONTROLS]
! STRING(@s20),USE(bUseRegularExpressions)
bUseRegularExpressions   BOOL
!!> GUID('209a7c72-75a1-469c-acbb-92769d770128'),INITIAL('TRUE'),PROMPT('b Use Regular Expressions:'),HEADER('b Use Regular Expressions'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('b Search Subdirectories:'),USE(?bSearchSubdirectories:Prompt)
! ENTRY(@s20),USE(bSearchSubdirectories)
[REPORTCONTROLS]
! STRING(@s20),USE(bSearchSubdirectories)
bSearchSubdirectories    BOOL
!!> GUID('3d05d61e-0fc9-489f-bf7d-e814eaf0becb'),PROMPT('b Search Subdirectories:'),HEADER('b Search Subdirectories'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('Levels:'),USE(?nLevels:Prompt)
! SPIN(@n3),USE(nLevels),RIGHT(1),MSG('Subdirectory Levels to Search'),TIP('Subdirectory Levels to Search')
[REPORTCONTROLS]
! STRING(@n3),USE(nLevels),RIGHT(1)
nLevels                  BYTE !Subdirectory Levels to Search
!!> GUID('eff589e4-cff4-4280-9a0b-4fac782d3351'),PROMPT('Levels:'),HEADER('Levels'),MESSAGE('Subdirectory Levels to Search'),TOOLTIP('Subdirectory Levels to Search'),PICTURE(@n3),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('Levels:'),USE(?nCurrentLevel:Prompt)
! SPIN(@n3),USE(nCurrentLevel),MSG('Current Subdirectory Search Level'),TIP('Current Subdirectory Search Level')
[REPORTCONTROLS]
! STRING(@n3),USE(nCurrentLevel)
nCurrentLevel            BYTE !Current Subdirectory Search Level
!!> GUID('41b56b3c-9390-43fb-96cd-c27a151a46a3'),PROMPT('Levels:'),HEADER('Levels'),MESSAGE('Current Subdirectory Search Level'),TOOLTIP('Current Subdirectory Search Level'),PICTURE(@n3),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('b Case Sensitive:'),USE(?bCaseSensitive:Prompt)
! ENTRY(@s20),USE(bCaseSensitive)
[REPORTCONTROLS]
! STRING(@s20),USE(bCaseSensitive)
bCaseSensitive           BOOL
!!> GUID('106d7565-dded-4db2-a325-dca4f197f06e'),PROMPT('b Case Sensitive:'),HEADER('b Case Sensitive'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('b Exact Match:'),USE(?bExactMatch:Prompt)
! ENTRY(@s20),USE(bExactMatch)
[REPORTCONTROLS]
! STRING(@s20),USE(bExactMatch)
bExactMatch              BOOL
!!> GUID('61a65798-b33c-4e78-9f36-e51ffd6d3e1b'),PROMPT('b Exact Match:'),HEADER('b Exact Match'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('b Exclude Match:'),USE(?bExcludeMatch:Prompt)
! ENTRY(@s20),USE(bExcludeMatch)
[REPORTCONTROLS]
! STRING(@s20),USE(bExcludeMatch)
bExcludeMatch            BOOL
!!> GUID('270f1bab-f21b-4c46-bce2-d616d02329fa'),PROMPT('b Exclude Match:'),HEADER('b Exclude Match'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('Exclude Comments:'),USE(?bExcludeComments:Prompt)
! ENTRY(@s20),USE(bExcludeComments)
[REPORTCONTROLS]
! STRING(@s20),USE(bExcludeComments)
bExcludeComments         BOOL
!!> GUID('6b558e84-a3c2-48ab-baf8-ce26499dd6b7'),PROMPT('Exclude Comments:'),HEADER('Exclude Comments'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('b Include Binary:'),USE(?bIncludeBinary:Prompt)
! ENTRY(@s20),USE(bIncludeBinary)
[REPORTCONTROLS]
! STRING(@s20),USE(bIncludeBinary)
bIncludeBinary           BOOL
!!> GUID('1500dab3-b55e-4f35-a8d0-8f0b227100af'),PROMPT('b Include Binary:'),HEADER('b Include Binary'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('b Filenames Only:'),USE(?bFilenamesOnly:Prompt)
! ENTRY(@s20),USE(bFilenamesOnly)
[REPORTCONTROLS]
! STRING(@s20),USE(bFilenamesOnly)
bFilenamesOnly           BOOL
!!> GUID('2f2779bb-9436-4b77-8f28-8e7d91de19a1'),PROMPT('b Filenames Only:'),HEADER('b Filenames Only'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('b File List From File:'),USE(?bFileListFromFile:Prompt)
! ENTRY(@s20),USE(bFileListFromFile)
[REPORTCONTROLS]
! STRING(@s20),USE(bFileListFromFile)
bFileListFromFile        BOOL
!!> GUID('f27d9dc1-f4b8-415c-861d-fe4b56b08c17'),PROMPT('b File List From File:'),HEADER('b File List From File'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('sz File List Filename:'),USE(?szFileListFilename:Prompt)
! ENTRY(@s255),USE(szFileListFilename)
[REPORTCONTROLS]
! STRING(@s255),USE(szFileListFilename)
szFileListFilename       CSTRING(261)
!!> GUID('4209ead8-cdfc-4fd9-ae6c-dda01b3398ad'),PROMPT('sz File List Filename:'),HEADER('sz File List Filename'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('b Search Strings From File:'),USE(?bSearchStringsFromFile:Prompt)
! ENTRY(@s20),USE(bSearchStringsFromFile)
[REPORTCONTROLS]
! STRING(@s20),USE(bSearchStringsFromFile)
bSearchStringsFromFile   BOOL
!!> GUID('3f8b38f1-465d-4ea7-bdf7-0deef0c65746'),PROMPT('b Search Strings From File:'),HEADER('b Search Strings From File'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('sz Search String Filename:'),USE(?szSearchStringFilename:Prompt)
! ENTRY(@s255),USE(szSearchStringFilename)
[REPORTCONTROLS]
! STRING(@s255),USE(szSearchStringFilename)
szSearchStringFilename   CSTRING(261)
!!> GUID('e4df2dc6-d783-4730-8e37-0ac9cff79c8c'),PROMPT('sz Search String Filename:'),HEADER('sz Search String Filename'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('sz Pattern:'),USE(?szPattern:Prompt)
! ENTRY(@s255),USE(szPattern)
[REPORTCONTROLS]
! STRING(@s255),USE(szPattern)
szPattern                CSTRING(1025)
!!> GUID('e649ce0d-8447-43b3-820e-957c41de9268'),PROMPT('sz Pattern:'),HEADER('sz Pattern'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('Search Path:'),USE(?szSearchPath:Prompt)
! ENTRY(@s255),USE(szSearchPath),MSG('Search Path'),TIP('Search Path')
[REPORTCONTROLS]
! STRING(@s255),USE(szSearchPath)
szSearchPath             CSTRING(1025) !Search Path
!!> GUID('f6014120-c49a-4dac-9054-ea7834ef474a'),PROMPT('Search Path:'),HEADER('Search Path'),MESSAGE('Search Path'),TOOLTIP('Search Path'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('File Mask:'),USE(?szFileMask:Prompt)
! ENTRY(@s255),USE(szFileMask)
[REPORTCONTROLS]
! STRING(@s255),USE(szFileMask)
szFileMask               CSTRING(256)
!!> GUID('6f8a8adf-bcca-4d33-9864-556a1040c924'),PROMPT('File Mask:'),HEADER('File Mask'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('Search Path:'),USE(?szCmdLine:Prompt)
! ENTRY(@s255),USE(szCmdLine),MSG('Command Line'),TIP('Command Line')
[REPORTCONTROLS]
! STRING(@s255),USE(szCmdLine)
szCmdLine                CSTRING(1025) !Command Line
!!> GUID('906549e0-8271-4f17-80ad-df8fcf2c212c'),PROMPT('Search Path:'),HEADER('Search Path'),MESSAGE('Command Line'),TOOLTIP('Command Line'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('Save Path:'),USE(?SavePath:Prompt)
! ENTRY(@s255),USE(SavePath)
[REPORTCONTROLS]
! STRING(@s255),USE(SavePath)
SavePath                 CSTRING(261)
!!> GUID('ebc808ad-0ef6-43bf-9889-95769588ac9d'),PROMPT('Save Path:'),HEADER('Save Path'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('New Tab:'),USE(?NewTab:Prompt)
! ENTRY(@n-14),USE(NewTab),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(NewTab),RIGHT(1)
NewTab                   LONG
!!> GUID('0e840881-bc77-43e2-9358-3010cff5907f'),PROMPT('New Tab:'),HEADER('New Tab'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('Last Tab Number:'),USE(?LastTabNumber:Prompt)
! ENTRY(@n-14),USE(LastTabNumber),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(LastTabNumber),RIGHT(1)
LastTabNumber            LONG
!!> GUID('67127b7b-1402-4260-9c5d-a1f8df7c7c87'),PROMPT('Last Tab Number:'),HEADER('Last Tab Number'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('Result List Menu:'),USE(?ResultListMenu:Prompt)
! ENTRY(@s20),USE(ResultListMenu)
[REPORTCONTROLS]
! STRING(@s20),USE(ResultListMenu)
ResultListMenu           PopupClass
!!> GUID('edb61a8e-0565-479b-9cd8-ee36c9ab2106'),PROMPT('Result List Menu:'),HEADER('Result List Menu'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('Pattern Queue:'),USE(?PatternQueue:Prompt)
! ENTRY(@s20),USE(PatternQueue)
[REPORTCONTROLS]
! STRING(@s20),USE(PatternQueue)
PatternQueue             QUEUE,PRE(PatternQueue)
!!> GUID('9a0d6912-4503-4aae-92e3-c19652f3e470'),PROMPT('Pattern Queue:'),HEADER('Pattern Queue'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('sz Pattern:'),USE(?PatternQueue:szPattern:Prompt)
! ENTRY(@s20),USE(PatternQueue:szPattern)
[REPORTCONTROLS]
! STRING(@s20),USE(PatternQueue:szPattern)
szPattern                  LIKE(szPattern)
!!> GUID('aa134dc0-81f3-493d-964e-215da78c6518'),PROMPT('sz Pattern:'),HEADER('sz Pattern'),PICTURE(@s20),TYPEMODE(INS)
                         END
!!> GUID('5205a344-15ba-4079-ab7e-249c3f69eedc')
[SCREENCONTROLS]
! PROMPT('Search Path Queue:'),USE(?SearchPathQueue:Prompt)
! ENTRY(@s20),USE(SearchPathQueue)
[REPORTCONTROLS]
! STRING(@s20),USE(SearchPathQueue)
SearchPathQueue          QUEUE,PRE(SearchPathQueue)
!!> GUID('35dc8e21-1b5f-44d7-9a1c-f0557575d78e'),PROMPT('Search Path Queue:'),HEADER('Search Path Queue'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('sz Search Path:'),USE(?SearchPathQueue:szSearchPath:Prompt)
! ENTRY(@s20),USE(SearchPathQueue:szSearchPath)
[REPORTCONTROLS]
! STRING(@s20),USE(SearchPathQueue:szSearchPath)
szSearchPath               LIKE(szSearchPath)
!!> GUID('6e8c6d23-d116-4b3e-858e-8fe4f7ca435d'),PROMPT('sz Search Path:'),HEADER('sz Search Path'),PICTURE(@s20),TYPEMODE(INS)
                         END
!!> GUID('d78639ca-bdd7-418f-bb4f-c8e372e7cef8')
[SCREENCONTROLS]
! PROMPT('File Mask Queue:'),USE(?FileMaskQueue:Prompt)
! ENTRY(@s20),USE(FileMaskQueue)
[REPORTCONTROLS]
! STRING(@s20),USE(FileMaskQueue)
FileMaskQueue            QUEUE,PRE(FileMaskQueue)
!!> GUID('3fc1b841-500d-4b35-a041-5f216f6de470'),PROMPT('File Mask Queue:'),HEADER('File Mask Queue'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('sz File Mask:'),USE(?FileMaskQueue:szFileMask:Prompt)
! ENTRY(@s20),USE(FileMaskQueue:szFileMask)
[REPORTCONTROLS]
! STRING(@s20),USE(FileMaskQueue:szFileMask)
szFileMask                 LIKE(szFileMask)
!!> GUID('e151a1af-2ac4-4db1-911a-230c55f3cf74'),PROMPT('sz File Mask:'),HEADER('sz File Mask'),PICTURE(@s20),TYPEMODE(INS)
                         END
!!> GUID('f8f299c9-d431-4183-a903-3f40b3359059')
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default', 'WindowToolbar')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('WindowManager')
WHEN  ('WindowToolbar') ('ToolbarClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Ask {20}PROCEDURE(),DERIVED', 'Init {19}PROCEDURE(),BYTE,PROC,DERIVED', |
  'Kill {19}PROCEDURE(),BYTE,PROC,DERIVED', 'Run {20}PROCEDURE(),BYTE,PROC,DERIVED', |
  'SetAlerts {14}PROCEDURE(),DERIVED', 'TakeAccepted {11}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeCloseEvent {9}PROCEDURE(),BYTE,PROC,DERIVED', 'TakeEvent {14}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeFieldEvent {9}PROCEDURE(),BYTE,PROC,DERIVED', 'TakeNewSelection       PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeSelected {11}PROCEDURE(),BYTE,PROC,DERIVED', 'TakeWindowEvent        PROCEDURE(),BYTE,PROC,DERIVED', |
  'Update {17}PROCEDURE(),DERIVED')

%ReturnValue FIELD  ()
%WindowOperationMode DEFAULT  ('Use WINDOW setting')
%INISaveWindow LONG  (1)
%ProcedureDisableEnhanceFocus LONG  (0)
%ProcedureUseEnterInsteadTabOverride LONG  (0)
%WindowUseEnterInsteadTab LONG  (1)
%ProcedureUseEnterInsteadTabExcludeListCombo LONG  (0)
%ProcedureUseEnterInsteadTabEnableNextTabStop LONG  (0)
%ProcedureUseEnterInsteadTabExcludeG LONG  (1)
%WindowUseEnterInsteadTabExclude MULTI DEFAULT  ()
%GlobalObject DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('NO')
WHEN  ('WindowToolbar') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ThisWindow')
WHEN  ('WindowToolbar') ('Toolbar')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (0)
WHEN  ('WindowToolbar') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%WindowStyles MULTI LONG  ()
%WindowStyleFontName DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontSize DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontStyle DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontColor DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontCharSet DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStylePicture DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleOtherListboxes MULTI DEFAULT  ()
%ProcedureAutoBindFields MULTI LONG  ()
%ProcedureAutoBindField DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindFieldTPL DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindProcedures MULTI LONG  ()
%ProcedureAutoBindProcedure DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindProcedureTPL DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindFieldsIgnored MULTI LONG  ()
%ProcedureAutoBindFieldIgnored DEPEND %ProcedureAutoBindFieldsIgnored DEFAULT TIMES 0

%ProcedureAutoBindProceduresIgnored MULTI LONG  ()
%ProcedureAutoBindProcedureIgnored DEPEND %ProcedureAutoBindProceduresIgnored DEFAULT TIMES 0

%ProcedureAutoBindValidToAddField LONG  (0)
%ProcedureUserBindFields MULTI LONG  ()
%ProcedureUserBindField DEPEND %ProcedureUserBindFields FIELD TIMES 0

%ProcedureAutoBindFieldIgnore DEPEND %ProcedureAutoBindFields LONG TIMES 0

%ProcedureUserBindProcedures MULTI LONG  ()
%ProcedureUserBindProcedure DEPEND %ProcedureUserBindProcedures PROCEDURE TIMES 0

%ProcedureAutoBindProcedureIgnore DEPEND %ProcedureAutoBindProcedures LONG TIMES 0

%ProcedureUserBindExpressions MULTI LONG  ()
%ProcedureUserBindExpressionName DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ProcedureUserBindExpression DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ExtUITabIcon DEPEND %Control DEFAULT TIMES 0

%ExtUITabStyleOverrideGlobal DEPEND %Control LONG TIMES 0

%ExtUITabStyle DEPEND %Control DEFAULT TIMES 8
WHEN  ('?CurrentSearch') ('Default')
WHEN  ('?ResultList') ('Default')
WHEN  ('?cmdNextFolder') ('Default')
WHEN  ('?cmdSaveWarn:2') ('Default')
WHEN  ('?cmdSearch') ('Default')
WHEN  ('?cmdUndoDelete') ('Default')
WHEN  ('?cmdUserOptions') ('Default')
WHEN  ('?sciControl:Region') ('Default')

%ButtonAction DEPEND %Control DEFAULT TIMES 30
WHEN  ('?ResultList') ('No Special Action')
WHEN  ('?cmdCancelSearch') ('No Special Action')
WHEN  ('?cmdCloseTab') ('No Special Action')
WHEN  ('?cmdDeleteCode') ('No Special Action')
WHEN  ('?cmdDeleteComments') ('No Special Action')
WHEN  ('?cmdDeleteData') ('No Special Action')
WHEN  ('?cmdDeleteExtension') ('No Special Action')
WHEN  ('?cmdDeleteFile') ('No Special Action')
WHEN  ('?cmdDeleteLabels') ('No Special Action')
WHEN  ('?cmdDeleteLine') ('No Special Action')
WHEN  ('?cmdDeletePath') ('No Special Action')
WHEN  ('?cmdEdit') ('No Special Action')
WHEN  ('?cmdFindAndDelete') ('No Special Action')
WHEN  ('?cmdHelp') ('No Special Action')
WHEN  ('?cmdLayout') ('No Special Action')
WHEN  ('?cmdNextFile') ('No Special Action')
WHEN  ('?cmdNextFolder') ('No Special Action')
WHEN  ('?cmdNextLine') ('No Special Action')
WHEN  ('?cmdPreviousFile') ('No Special Action')
WHEN  ('?cmdPreviousFolder') ('No Special Action')
WHEN  ('?cmdPreviousLine') ('No Special Action')
WHEN  ('?cmdRedoSearch') ('No Special Action')
WHEN  ('?cmdReplaceResults') ('No Special Action')
WHEN  ('?cmdSave') ('No Special Action')
WHEN  ('?cmdSaveWarn') ('No Special Action')
WHEN  ('?cmdSaveWarn:2') ('No Special Action')
WHEN  ('?cmdSearch') ('No Special Action')
WHEN  ('?cmdUndoDelete') ('No Special Action')
WHEN  ('?cmdUserOptions') ('No Special Action')
WHEN  ('?sciControl:Region') ('No Special Action')

%ButtonRunName DEPEND %Control DEFAULT TIMES 1
WHEN  ('?cmdUserOptions') ('')

%ButtonRunParameters DEPEND %Control DEFAULT TIMES 1
WHEN  ('?cmdUserOptions') ('')

%ButtonProcedure DEPEND %Control PROCEDURE TIMES 1
WHEN  ('?cmdUserOptions') ()

%ButtonThread DEPEND %Control LONG TIMES 1
WHEN  ('?cmdUserOptions') (0)

%ButtonThreadStack DEPEND %Control DEFAULT TIMES 30
WHEN  ('?ResultList') ('25000')
WHEN  ('?cmdCancelSearch') ('25000')
WHEN  ('?cmdCloseTab') ('25000')
WHEN  ('?cmdDeleteCode') ('25000')
WHEN  ('?cmdDeleteComments') ('25000')
WHEN  ('?cmdDeleteData') ('25000')
WHEN  ('?cmdDeleteExtension') ('25000')
WHEN  ('?cmdDeleteFile') ('25000')
WHEN  ('?cmdDeleteLabels') ('25000')
WHEN  ('?cmdDeleteLine') ('25000')
WHEN  ('?cmdDeletePath') ('25000')
WHEN  ('?cmdEdit') ('25000')
WHEN  ('?cmdFindAndDelete') ('25000')
WHEN  ('?cmdHelp') ('25000')
WHEN  ('?cmdLayout') ('25000')
WHEN  ('?cmdNextFile') ('25000')
WHEN  ('?cmdNextFolder') ('25000')
WHEN  ('?cmdNextLine') ('25000')
WHEN  ('?cmdPreviousFile') ('25000')
WHEN  ('?cmdPreviousFolder') ('25000')
WHEN  ('?cmdPreviousLine') ('25000')
WHEN  ('?cmdRedoSearch') ('25000')
WHEN  ('?cmdReplaceResults') ('25000')
WHEN  ('?cmdSave') ('25000')
WHEN  ('?cmdSaveWarn') ('25000')
WHEN  ('?cmdSaveWarn:2') ('25000')
WHEN  ('?cmdSearch') ('25000')
WHEN  ('?cmdUndoDelete') ('25000')
WHEN  ('?cmdUserOptions') ('25000')
WHEN  ('?sciControl:Region') ('25000')

%ButtonParameters DEPEND %Control DEFAULT TIMES 1
WHEN  ('?cmdUserOptions') ('')

%ButtonReturnValueAssignment DEPEND %Control FIELD TIMES 1
WHEN  ('?cmdUserOptions') ()

%ButtonReturnValueReferenceAssign DEPEND %Control LONG TIMES 1
WHEN  ('?cmdUserOptions') (0)

%ButtonRequest DEPEND %Control DEFAULT TIMES 30
WHEN  ('?ResultList') ('None')
WHEN  ('?cmdCancelSearch') ('None')
WHEN  ('?cmdCloseTab') ('None')
WHEN  ('?cmdDeleteCode') ('None')
WHEN  ('?cmdDeleteComments') ('None')
WHEN  ('?cmdDeleteData') ('None')
WHEN  ('?cmdDeleteExtension') ('None')
WHEN  ('?cmdDeleteFile') ('None')
WHEN  ('?cmdDeleteLabels') ('None')
WHEN  ('?cmdDeleteLine') ('None')
WHEN  ('?cmdDeletePath') ('None')
WHEN  ('?cmdEdit') ('None')
WHEN  ('?cmdFindAndDelete') ('None')
WHEN  ('?cmdHelp') ('None')
WHEN  ('?cmdLayout') ('None')
WHEN  ('?cmdNextFile') ('None')
WHEN  ('?cmdNextFolder') ('None')
WHEN  ('?cmdNextLine') ('None')
WHEN  ('?cmdPreviousFile') ('None')
WHEN  ('?cmdPreviousFolder') ('None')
WHEN  ('?cmdPreviousLine') ('None')
WHEN  ('?cmdRedoSearch') ('None')
WHEN  ('?cmdReplaceResults') ('None')
WHEN  ('?cmdSave') ('None')
WHEN  ('?cmdSaveWarn') ('None')
WHEN  ('?cmdSaveWarn:2') ('None')
WHEN  ('?cmdSearch') ('None')
WHEN  ('?cmdUndoDelete') ('None')
WHEN  ('?cmdUserOptions') ('None')
WHEN  ('?sciControl:Region') ('None')

%ButtonThreadParameters DEPEND %Control DEFAULT TIMES 1
WHEN  ('?cmdUserOptions') ('')

%ButtonThreadReturnValueAssignment DEPEND %Control FIELD TIMES 1
WHEN  ('?cmdUserOptions') ()

%PreLookupKey DEPEND %Control KEY TIMES 0

%PreLookupField DEPEND %Control COMPONENT TIMES 0

%PreLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PreLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupKey DEPEND %Control KEY TIMES 0

%PostLookupField DEPEND %Control COMPONENT TIMES 0

%PostLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupDuringValidate DEPEND %Control LONG TIMES 6
WHEN  ('?ResultList') (1)
WHEN  ('?cmdSaveWarn:2') (1)
WHEN  ('?cmdSearch') (1)
WHEN  ('?cmdUndoDelete') (1)
WHEN  ('?cmdUserOptions') (1)
WHEN  ('?sciControl:Region') (1)

%LookupAssign DEPEND %Control MULTI LONG TIMES 0

%MoreTarget DEPEND %LookupAssign FIELD TIMES 0

%MoreField DEPEND %LookupAssign DEFAULT TIMES 0

%ForceWindowRefresh DEPEND %Control LONG TIMES 0

%CheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%CheckedAssignVariable DEPEND %CheckedAssigns FIELD TIMES 0

%CheckedAssignValue DEPEND %CheckedAssigns DEFAULT TIMES 0

%CheckedHides DEPEND %Control MULTI LONG TIMES 0

%CheckedControl DEPEND %CheckedHides DEFAULT TIMES 0

%CheckedControlAction DEPEND %CheckedHides DEFAULT TIMES 6
WHEN  ('?ResultList')TIMES 0
WHEN  ('?cmdSaveWarn:2')TIMES 0
WHEN  ('?cmdSearch')TIMES 0
WHEN  ('?cmdUndoDelete')TIMES 0
WHEN  ('?cmdUserOptions')TIMES 0
WHEN  ('?sciControl:Region')TIMES 0

%CheckedEnables DEPEND %Control MULTI LONG TIMES 0

%CheckedControl1 DEPEND %CheckedEnables DEFAULT TIMES 0

%CheckedControl1Action DEPEND %CheckedEnables DEFAULT TIMES 6
WHEN  ('?ResultList')TIMES 0
WHEN  ('?cmdSaveWarn:2')TIMES 0
WHEN  ('?cmdSearch')TIMES 0
WHEN  ('?cmdUndoDelete')TIMES 0
WHEN  ('?cmdUserOptions')TIMES 0
WHEN  ('?sciControl:Region')TIMES 0

%UncheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%UncheckedAssignVariable DEPEND %UncheckedAssigns FIELD TIMES 0

%UncheckedAssignValue DEPEND %UncheckedAssigns DEFAULT TIMES 0

%UnCheckedHides DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl DEPEND %UnCheckedHides DEFAULT TIMES 0

%UnCheckedControlAction DEPEND %UnCheckedHides DEFAULT TIMES 6
WHEN  ('?ResultList')TIMES 0
WHEN  ('?cmdSaveWarn:2')TIMES 0
WHEN  ('?cmdSearch')TIMES 0
WHEN  ('?cmdUndoDelete')TIMES 0
WHEN  ('?cmdUserOptions')TIMES 0
WHEN  ('?sciControl:Region')TIMES 0

%UnCheckedEnables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl1 DEPEND %UnCheckedEnables DEFAULT TIMES 0

%UnCheckedControl1Action DEPEND %UnCheckedEnables DEFAULT TIMES 6
WHEN  ('?ResultList')TIMES 0
WHEN  ('?cmdSaveWarn:2')TIMES 0
WHEN  ('?cmdSearch')TIMES 0
WHEN  ('?cmdUndoDelete')TIMES 0
WHEN  ('?cmdUserOptions')TIMES 0
WHEN  ('?sciControl:Region')TIMES 0

%CheckedDisables DEPEND %Control MULTI LONG TIMES 0

%CheckedDisableControl DEPEND %CheckedDisables DEFAULT TIMES 0

%CheckedDisableControlAction DEPEND %CheckedDisables DEFAULT TIMES 6
WHEN  ('?ResultList')TIMES 0
WHEN  ('?cmdSaveWarn:2')TIMES 0
WHEN  ('?cmdSearch')TIMES 0
WHEN  ('?cmdUndoDelete')TIMES 0
WHEN  ('?cmdUserOptions')TIMES 0
WHEN  ('?sciControl:Region')TIMES 0

%UnCheckedDisables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedDisableControl DEPEND %UnCheckedDisables DEFAULT TIMES 0

%UnCheckedDisableControlAction DEPEND %UnCheckedDisables DEFAULT TIMES 6
WHEN  ('?ResultList')TIMES 0
WHEN  ('?cmdSaveWarn:2')TIMES 0
WHEN  ('?cmdSearch')TIMES 0
WHEN  ('?cmdUndoDelete')TIMES 0
WHEN  ('?cmdUserOptions')TIMES 0
WHEN  ('?sciControl:Region')TIMES 0

%ProcedureOneInstance LONG  (0)
%FieldGradientColorType DEPEND %Control DEFAULT TIMES 8
WHEN  ('?Application:Box') ('Off')
WHEN  ('?ResultList') ('Off')
WHEN  ('?Separator1') ('Off')
WHEN  ('?Separator2') ('Off')
WHEN  ('?Separator3') ('Off')
WHEN  ('?Separator4') ('Off')
WHEN  ('?Toolbar1') ('Off')
WHEN  ('?cmdSaveWarn:2') ('Off')

%FieldGradientColorTypeVariable DEPEND %Control DEFAULT TIMES 8
WHEN  ('?Application:Box') ('')
WHEN  ('?ResultList') ('')
WHEN  ('?Separator1') ('')
WHEN  ('?Separator2') ('')
WHEN  ('?Separator3') ('')
WHEN  ('?Separator4') ('')
WHEN  ('?Toolbar1') ('')
WHEN  ('?cmdSaveWarn:2') ('')

%FieldGradientColorTypeIsVariable DEPEND %Control LONG TIMES 8
WHEN  ('?Application:Box') (0)
WHEN  ('?ResultList') (0)
WHEN  ('?Separator1') (0)
WHEN  ('?Separator2') (0)
WHEN  ('?Separator3') (0)
WHEN  ('?Separator4') (0)
WHEN  ('?Toolbar1') (0)
WHEN  ('?cmdSaveWarn:2') (0)

%FieldGradientColorFrom DEPEND %Control LONG TIMES 8
WHEN  ('?Application:Box') (-1)
WHEN  ('?ResultList') (-1)
WHEN  ('?Separator1') (-1)
WHEN  ('?Separator2') (-1)
WHEN  ('?Separator3') (-1)
WHEN  ('?Separator4') (-1)
WHEN  ('?Toolbar1') (-1)
WHEN  ('?cmdSaveWarn:2') (-1)

%FieldGradientColorFromVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorFromIsVariable DEPEND %Control LONG TIMES 8
WHEN  ('?Application:Box') (0)
WHEN  ('?ResultList') (0)
WHEN  ('?Separator1') (0)
WHEN  ('?Separator2') (0)
WHEN  ('?Separator3') (0)
WHEN  ('?Separator4') (0)
WHEN  ('?Toolbar1') (0)
WHEN  ('?cmdSaveWarn:2') (0)

%FieldGradientColorTo DEPEND %Control LONG TIMES 8
WHEN  ('?Application:Box') (-1)
WHEN  ('?ResultList') (-1)
WHEN  ('?Separator1') (-1)
WHEN  ('?Separator2') (-1)
WHEN  ('?Separator3') (-1)
WHEN  ('?Separator4') (-1)
WHEN  ('?Toolbar1') (-1)
WHEN  ('?cmdSaveWarn:2') (-1)

%FieldGradientColorToVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorToIsVariable DEPEND %Control LONG TIMES 8
WHEN  ('?Application:Box') (0)
WHEN  ('?ResultList') (0)
WHEN  ('?Separator1') (0)
WHEN  ('?Separator2') (0)
WHEN  ('?Separator3') (0)
WHEN  ('?Separator4') (0)
WHEN  ('?Toolbar1') (0)
WHEN  ('?cmdSaveWarn:2') (0)

%PreserveVarsLoc MULTI LONG  ()
%PreserveVarLoc DEPEND %PreserveVarsLoc DEFAULT TIMES 0

%ActiveImageEnable DEPEND %Control LONG TIMES 0

%AIObjectName DEPEND %Control DEFAULT TIMES 2
WHEN  ('?ResultList') ('AIBtn40')
WHEN  ('?cmdSaveWarn:2') ('AIBtn43')

%AIEnableMimicControl DEPEND %Control LONG TIMES 2
WHEN  ('?ResultList') (1)
WHEN  ('?cmdSaveWarn:2') (1)

%AIMimicControl DEPEND %Control DEFAULT TIMES 2
WHEN  ('?ResultList') ('?Toolbar1')
WHEN  ('?cmdSaveWarn:2') ('?Toolbar1')

%AIImgRound DEPEND %Control LONG TIMES 0

%AIOverrideImg DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgVariable DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('?ResultList') (0)
WHEN  ('?cmdSaveWarn:2') (0)

%AIDisableImg DEPEND %Control DEFAULT TIMES 0

%AIDisableImgVariable DEPEND %Control DEFAULT TIMES 0

%AIDisableImgIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('?ResultList') (0)
WHEN  ('?cmdSaveWarn:2') (0)

%AIHotImg DEPEND %Control DEFAULT TIMES 0

%AIHotImgVariable DEPEND %Control DEFAULT TIMES 0

%AIHotImgIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('?ResultList') (0)
WHEN  ('?cmdSaveWarn:2') (0)

%AIPressedImg DEPEND %Control DEFAULT TIMES 0

%AIPressedImgVariable DEPEND %Control DEFAULT TIMES 0

%AIPressedImgIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('?ResultList') (0)
WHEN  ('?cmdSaveWarn:2') (0)

[EMBED]
EMBED %WindowManagerMethodCodeSection
[INSTANCES]
WHEN 'Kill'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
IF glo:RestorePointTimerThread > 0
   POST(EVENT:CloseWindow,,glo:RestorePointTimerThread)
END
IF ResultList::OrigWndProc
   ?ResultList{Prop:WndProc} = ResultList::OrigWndProc        ! Restore the handler for this window
END
glo:Zoom = SciControl.GetZoom()
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4800
PROPERTY:END
cs.wait()
j = RECORDS(ThreadQueue)
LOOP i = 1 TO j
   GET(ThreadQueue,i)
   thisProcInfo &= (INSTANCE(piProcInfo,ThreadQueue.ID))
   IF NOT thisProcInfo &= NULL
      kcr_TerminateProcess(thisProcInfo.hProcess,0)
   END
   POST(EVENT:CloseWindow,,ThreadQueue.ID)
   !YIELD()
END
cs.release()
YIELD()
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5050
PROPERTY:END

[SOURCE]
PROPERTY:BEGIN
PRIORITY 7300
PROPERTY:END
AutoSizer.Kill()
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
DO SaveSearchParameters
DO SaveViewerStyles

ResultListMenu.Kill()

j = RECORDS(SearchQueue)
LOOP i = j TO 1 BY -1
   GET(SearchQueue,i)
   IF NOT SearchQueue.ResultQueue &= NULL
      FREE(SearchQueue.ResultQueue)
      ASSERT(0,eqDBG & 'DISPOSE ResultQueue [' & ADDRESS(SearchQueue.ResultQueue) &']')
      DISPOSE(SearchQueue.ResultQueue)
      SearchQueue.ResultQueue &= NULL
   END

   IF NOT SearchQueue.UndoQueue &= NULL
      FREE(SearchQueue.UndoQueue)
      ASSERT(0,eqDBG & 'DISPOSE UndoQueue [' & ADDRESS(SearchQueue.UndoQueue) &']')
      DISPOSE(SearchQueue.UndoQueue)
      SearchQueue.UndoQueue &= NULL
   END

   IF SearchQueue.feqSearchProgress
      DESTROY(SearchQueue.feqSearchProgress)
      SearchQueue.feqSearchProgress = 0
   END
   IF SearchQueue.tabNumber
      DESTROY(SearchQueue.tabNumber)
      SearchQueue.tabNumber = 0
   END

   PUT(SearchQueue)
   DELETE(SearchQueue)
END
FREE(SearchQueue)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9800
PROPERTY:END
dwId = kcr_GetCurrentProcessId()
szDirPath = svSpecialFolder.GetDir(SV:CSIDL_APPDATA) & '\Devuna\KSS\RestorePoint\' & dwId
SilentlyRemoveDirectory(szDirPath)
[END]
[END]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4950
PROPERTY:END
! Initialize Styles
!----------------------------------------------------------------------------
LOOP K = 1 TO SCE_CLW_LAST
   EXECUTE K
      loc:szViewerStyle = 'Consolas,10,400,0,0,0,0,16777215,0,0,1,0'
      loc:szViewerStyle = 'Consolas,10,400,0,0,0,255,16777215,0,0,1,0'
      loc:szViewerStyle = 'Consolas,10,400,0,0,0,32768,16777215,0,0,1,0'
      loc:szViewerStyle = 'Consolas,10,700,1,0,0,8421504,16777215,0,0,1,0'
      loc:szViewerStyle = 'Consolas,10,700,1,0,0,0,16777215,0,0,1,0'
      loc:szViewerStyle = 'Consolas,10,700,1,0,0,14056154,16777215,0,0,1,0'
      loc:szViewerStyle = 'Consolas,10,700,1,0,0,14056154,16777215,0,0,1,0'
      loc:szViewerStyle = 'Consolas,10,700,1,0,0,8421504,16777215,0,0,1,0'
      loc:szViewerStyle = 'Consolas,10,700,1,0,0,16711680,16777215,0,0,1,1'
      loc:szViewerStyle = 'Consolas,10,700,1,0,0,11829830,16777215,0,0,1,0'
      loc:szViewerStyle = 'Consolas,10,700,1,0,0,7346457,16777215,0,0,1,0'
      loc:szViewerStyle = 'Consolas,10,700,1,0,0,7346457,16777215,0,0,1,1'
      loc:szViewerStyle = 'Consolas,10,700,1,0,0,14381203,16777215,0,0,1,1'
      loc:szViewerStyle = 'Consolas,10,400,0,0,0,16711680,16777215,0,0,1,1'
      loc:szViewerStyle = 'Consolas,10,700,1,0,0,16760576,16777215,0,0,1,1'
      loc:szViewerStyle = 'Consolas,10,700,1,0,0,0,16777215,0,0,1,0'
      loc:szViewerStyle = 'Consolas,10,700,1,0,0,8421376,16777215,0,0,1,0'
   END

   INIMgr.Fetch('Viewer Styles','ViewerStyle'& FORMAT(K-1,@n02),loc:szViewerStyle)
   I = 1
   J = INSTRING(',',loc:szViewerStyle,,I)
   glo:ViewerStyles.StyleGroup[K].Font = loc:szViewerStyle[I : J-1]
   I = J+1
   J = INSTRING(',',loc:szViewerStyle,,I)
   glo:ViewerStyles.StyleGroup[K].FontSize = loc:szViewerStyle[I : J-1]
   I = J+1
   J = INSTRING(',',loc:szViewerStyle,,I)
   glo:ViewerStyles.StyleGroup[K].FontStyle = loc:szViewerStyle[I : J-1]
   I = J+1
   J = INSTRING(',',loc:szViewerStyle,,I)
   glo:ViewerStyles.StyleGroup[K].Bold = loc:szViewerStyle[I : J-1]
   I = J+1
   J = INSTRING(',',loc:szViewerStyle,,I)
   glo:ViewerStyles.StyleGroup[K].Italic = loc:szViewerStyle[I : J-1]
   I = J+1
   J = INSTRING(',',loc:szViewerStyle,,I)
   glo:ViewerStyles.StyleGroup[K].Underline = loc:szViewerStyle[I : J-1]
   I = J+1
   J = INSTRING(',',loc:szViewerStyle,,I)
   glo:ViewerStyles.StyleGroup[K].Fore = loc:szViewerStyle[I : J-1]
   I = J+1
   J = INSTRING(',',loc:szViewerStyle,,I)
   glo:ViewerStyles.StyleGroup[K].Back = loc:szViewerStyle[I : J-1]
   I = J+1
   J = INSTRING(',',loc:szViewerStyle,,I)
   glo:ViewerStyles.StyleGroup[K].EolFilled = loc:szViewerStyle[I : J-1]
   I = J+1
   J = INSTRING(',',loc:szViewerStyle,,I)
   glo:ViewerStyles.StyleGroup[K].CaseOpt = loc:szViewerStyle[I : J-1]
   I = J+1
   J = INSTRING(',',loc:szViewerStyle,,I)
   glo:ViewerStyles.StyleGroup[K].Visible = loc:szViewerStyle[I : J-1]
   I = J+1
   J = LEN(CLIP(loc:szViewerStyle))
   glo:ViewerStyles.StyleGroup[K].HotSpot = loc:szViewerStyle[I : J]
END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7800
PROPERTY:END
StartMinute = ''
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8005
PROPERTY:END
Window{PROP:Timer} = 0
SYSTEM{PROP:LazyDisplay} = 1
glo:MainWindow &= Window
BUTTON:NextFolder      = ?cmdNextFolder
BUTTON:PreviousFolder  = ?cmdPreviousFolder
BUTTON:NextFile        = ?cmdNextFile
BUTTON:PreviousFile    = ?cmdPreviousFile
BUTTON:NextLine        = ?cmdNextLine
BUTTON:PreviousLine    = ?cmdPreviousLine
BUTTON:DeleteLine      = ?cmdDeleteLine
BUTTON:DeleteFile      = ?cmdDeleteFile
BUTTON:DeleteExtension = ?cmdDeleteExtension
BUTTON:DeletePath      = ?cmdDeletePath
BUTTON:DeleteComments  = ?cmdDeleteComments
BUTTON:DeleteLabels    = ?cmdDeleteLabels
BUTTON:DeleteCode      = ?cmdDeleteCode
BUTTON:DeleteData      = ?cmdDeleteData
BUTTON:FindAndDelete   = ?cmdFindAndDelete
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8040
PROPERTY:END
feqResultList = ?ResultList
ResultList::OrigWndProc = ?ResultList{Prop:WndProc}           ! Save address OF code that handles window messages
?ResultList{Prop:WndProc} = ADDRESS(ResultList::WndProc)      ! Re-assign address OF code that handles window messages
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8110
PROPERTY:END
IF ReturnValue = Level:Benign
   bControlInitialised = TRUE
ELSE
   bControlInitialised = FALSE
END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8310
PROPERTY:END
cMonitors = kcr_GetSystemMetrics(SM_CMONITORS)
IF cMonitors = 1  
   ptFrom.x = 0
   ptFrom.y = 0
   hMonitor = kcr_MonitorFromPoint(ptFrom,MONITOR_DEFAULTTOPRIMARY)
   mi.cbSize = SIZE(mi)
   IF kcr_GetMonitorInfo(hMonitor,ADDRESS(mi))
      kcr_GetWindowRect(Window{PROP:Handle}, rcMain)
      Window{PROP:Pixels} = TRUE        
      newX = (mi.rcMonitor.right - Window{PROP:Width})/2
      newy = (mi.rcMonitor.bottom - Window{PROP:Height})/2
      newW = Window{PROP:Width}
      newH = Window{PROP:Height}
      Window{PROP:Pixels} = FALSE
      kcr_MoveWindow(Window{PROP:Handle},newX,newY,newW,newH,SWP_SHOWWINDOW)        
   ELSE
     message('GetMonitorInfo failed')
   END  
END 

szSearchPath = LONGPATH()
szFileMask = '*.*'
bUseRegularExpressions = FALSE
szListBoxFormat = ?ResultList{PROP:Format}
! glo:szEditorCommand = '"C:\Program Files (x86)\TextPad 4\TextPad.exe" -q -am"%1"(%2)'
glo:szEditorCommand = 'Notepad.exe "%1"'
glo:NewSearchAction = 0
glo:nDeleteWarningCount = 1
glo:bDontShowSubdirectoryWarning = FALSE
glo:SyncPathWithPattern = FALSE
glo:bHotSpotsEnabled = TRUE
glo:bAutoSave = FALSE

glo:bHideResultsPanel = FALSE
glo:bHideEditPanel = FALSE

glo:ResultListFontName  = 'Segoe UI'
glo:ResultListFontSize  = 10
glo:ResultListForeColor = COLOR:Black
glo:ResultListFontStyle = FONT:regular
glo:MinusKey = MinusKey
glo:PlusKey  = PlusKey
glo:szDefaultPropertyFile = 'text'
glo:sqlProperties = 'mssql'

glo:ApplicationColor = BOR(COLOR_GRADIENTACTIVECAPTION,080000000H)
glo:ToolbarColor = BOR(COLOR_GRADIENTACTIVECAPTION,080000000H)
glo:SelectedBack = COLOR:Gray
glo:BookmarkBack = ColourRGB(0A0h,0FFh,0FFh)
SearchFindOptions.SearchLocation = Search:Text
SearchFindOptions.DeleteCondition = Delete:Contains
SearchFindOptions.MatchType = Match:Wild
SearchFindOptions.MatchCase = FALSE

INIMgr.Fetch('Search Options','bMatchPatternStartOfLine',bMatchPatternStartOfLine)
INIMgr.Fetch('Search Options','bMatchPatternEndOfLine',bMatchPatternEndOfLine)
INIMgr.Fetch('Search Options','bUseRegularExpressions',bUseRegularExpressions)
INIMgr.Fetch('Search Options','bSearchSubdirectories',bSearchSubdirectories)
INIMgr.Fetch('Search Options','nLevels',nLevels)
INIMgr.Fetch('Search Options','bCaseSensitive',bCaseSensitive)
INIMgr.Fetch('Search Options','bExactMatch',bExactMatch)
INIMgr.Fetch('Search Options','bExcludeMatch',bExcludeMatch)
INIMgr.Fetch('Search Options','bExcludeComments',bExcludeComments)
INIMgr.Fetch('Search Options','bIncludeBinary',bIncludeBinary)

INIMgr.Fetch('Search Options','szPattern',szPattern)
ReplaceChr(szPattern,'§','''')

INIMgr.Fetch('Search Options','szSearchPath',szSearchPath)
INIMgr.Fetch('Search Options','szFileMask',szFileMask)
INIMgr.Fetch('Search Options','FindText',SearchFindOptions.szFindText)

INIMgr.Fetch('Search Options','bFilenamesOnly',bFilenamesOnly)
INIMgr.Fetch('Search Options','bFileListFromFile',bFileListFromFile)
INIMgr.Fetch('Search Options','szFileListFilename',szFileListFilename)
INIMgr.Fetch('Search Options','bSearchStringsFromFile',bSearchStringsFromFile)
INIMgr.Fetch('Search Options','szSearchStringFilename',szSearchStringFilename)

INIMgr.Fetch('Find and Delete Options','SearchLocation',SearchFindOptions.SearchLocation)
INIMgr.Fetch('Find and Delete Options','DeleteCondition',SearchFindOptions.DeleteCondition)
INIMgr.Fetch('Find and Delete Options','MatchType',SearchFindOptions.MatchType)
INIMgr.Fetch('Find and Delete Options','MatchCase',SearchFindOptions.MatchCase)

INIMgr.Fetch('Global','szEditCommand',glo:szEditorCommand)
INIMgr.Fetch('Global','PromptForEditor',glo:PromptForEditor)
INIMgr.Fetch('Global','AllExtensions',glo:bAllExtensions)
INIMgr.Fetch('Global','NewSearchAction',glo:NewSearchAction)
INIMgr.Fetch('Global','NoDownloadVersion',glo:szNoDownloadVersion)
INIMgr.Fetch('Global','DeleteWarningCount',glo:nDeleteWarningCount)
INIMgr.Fetch('Global','DefaultSearchButton',glo:nDefaultSearchButton)
INIMgr.Fetch('Global','DontShowSubdirectoryWarning',glo:bDontShowSubdirectoryWarning)
INIMgr.Fetch('Global','SyncPathWithPattern',glo:SyncPathWithPattern)
INIMgr.Fetch('Global','DefaultPropertyFile',glo:szDefaultPropertyFile)

INIMgr.Fetch('Global','ResultListFontName',glo:ResultListFontName)
INIMgr.Fetch('Global','ResultListFontSize',glo:ResultListFontSize)
INIMgr.Fetch('Global','ResultListForeColor',glo:ResultListForeColor)
INIMgr.Fetch('Global','ResultListFontStyle',glo:ResultListFontStyle)

INIMgr.Fetch('Global','ResultListMinusKey',glo:MinusKey)
?cmdPreviousLine{PROP:Tip} = 'Jump to Previous Line<0DH,0AH>in Results List<09H>[' & keyCodeName.ToName(glo:MinusKey) & ']'

INIMgr.Fetch('Global','ResultListPlusKey',glo:PlusKey)
?cmdNextLine{PROP:Tip} = 'Jump to Next Line<0DH,0AH>in Results List<09H>[' & keyCodeName.ToName(glo:PlusKey) & ']'

?ResultList{PROP:FontName}   = glo:ResultListFontName
?ResultList{PROP:FontSize}   = glo:ResultListFontSize
?ResultList{PROP:FontColor}  = glo:ResultListForeColor
?ResultList{PROP:FontStyle}  = glo:ResultListFontStyle
?ResultList{PROP:LineHeight} = glo:ResultListFontSize

INIMgr.Fetch('Global','ApplicationColor',glo:ApplicationColor)
!Window{PROP:Color}    = glo:ApplicationColor
?Application:Box{PROP:Fill} = glo:ApplicationColor
?Application:Box{PROP:COLOR} = glo:ApplicationColor
?szTitle:2{PROP:COLOR} = glo:ApplicationColor

INIMgr.Fetch('Global','ToolbarColor',glo:ToolbarColor)
?Toolbar1{PROP:Color} = glo:ToolbarColor

DO AdjustFontColour   !adjust some font colours based on brightness of toolbar and application colours

INIMgr.Fetch('Global','SelectedBack',glo:SelectedBack)
INIMgr.Fetch('Global','BookmarkBack',glo:BookmarkBack)

INIMgr.Fetch('Global','SplitOrientation',glo:SplitterOrientation)
INIMgr.Fetch('Global','SplitX',glo:SplitX)
INIMgr.Fetch('Global','SplitY',glo:SplitY)
INIMgr.Fetch('Global','Zoom',glo:Zoom)

INIMgr.Fetch('Global','ClarionHelpFile',glo:szClarionHelpFile)
INIMgr.Fetch('Global','HotSpotsEnabled',glo:bHotSpotsEnabled)
INIMgr.Fetch('Global','AutoSave',glo:bAutoSave)
glo:bShowAutoSaveWarning = glo:bAutoSave

INIMgr.Fetch('Global','sqlProperties',glo:sqlProperties)

INIMgr.Fetch('Global','AllowMultipleInstances',glo:AllowMultipleInstances)
INIMgr.Fetch('Global','AutoSizeResultColumns',glo:AutoSizeResultColumns)
INIMgr.Fetch('Global','RestorePointTimerInterval',glo:RestorePointTimerInterval)

INIMgr.Fetch('Main','szListBoxFormat',szListBoxFormat)
!fix format ---------------------------
i = INSTRING('~Text',szListBoxFormat,1)
IF szListBoxFormat[i-2 : i-1] <> '|M'
   szListBoxFormat = szListBoxFormat[1 : i-1] & '|M' & szListBoxFormat[i : LEN(szListBoxFormat)]
END
!--------------------------------------
?ResultList{PROP:Format} = szListBoxFormat
DO FillListFormatQueue

INIMgr.FetchQueue('ClarionExtensions Queue','ClarionExtension',ClarionExtensionsQueue,ClarionExtensionsQueue.FileExtension)
IF RECORDS(ClarionExtensionsQueue) = 0
   ClarionExtensionsQueue.FileExtension='.CLA'
   ADD(ClarionExtensionsQueue,+ClarionExtensionsQueue.FileExtension)
   ClarionExtensionsQueue.FileExtension='.CLW'
   ADD(ClarionExtensionsQueue,+ClarionExtensionsQueue.FileExtension)
   ClarionExtensionsQueue.FileExtension='.INC'
   ADD(ClarionExtensionsQueue,+ClarionExtensionsQueue.FileExtension)
   ClarionExtensionsQueue.FileExtension='.EQU'
   ADD(ClarionExtensionsQueue,+ClarionExtensionsQueue.FileExtension)
   ClarionExtensionsQueue.FileExtension='.INT'
   ADD(ClarionExtensionsQueue,+ClarionExtensionsQueue.FileExtension)
END

INIMgr.FetchQueue('Editor Queue','EditCommand',EditorQueue,EditorQueue.szValue)
IF RECORDS(EditorQueue) = 0
   EditorQueue.szValue = '<<Use Windows Default>'
   ADD(EditorQueue,+EditorQueue.szValue)
   EditorQueue.szValue = glo:szEditorCommand
   ADD(EditorQueue,+EditorQueue.szValue)
ELSE
   LOOP i = 1 TO RECORDS(EditorQueue)
      GET(EditorQueue,i)
      IF UPPER(EditorQueue.szValue) = '<<USE WINDOWS DEFAULT>'
         BREAK
      END
   END
   IF i > RECORDS(EditorQueue)
      EditorQueue.szValue = '<<Use Windows Default>'
      ADD(EditorQueue,+EditorQueue.szValue)
   END
END
SORT(EditorQueue,+EditorQueue.szValue)

INIMgr.FetchQueue('Macro Queue','Macro',MacroQueue,MacroQueue.feqButton,MacroQueue.szField1,MacroQueue.szField2,MacroQueue.szField3)

NewTab = ?Search1
LastTabNumber = 1
DO AddSearchQueueRecord
SearchQueue.bSearchPressed = TRUE
?ResultList{PROP:From} = SearchQueue.ResultQueue
?ResultList{PROP:Format} = SearchQueue.szListBoxFormat

AutoSizer.Reset(?ResultList,SearchQueue.ResultQueue)

NewTab = CREATE(0,CREATE:tab,?CurrentSearch)
NewTab{PROP:Text} = NewSearchText
DO SetNewTabFont
UNHIDE(NewTab)
bAutoSearch = TRUE

ResultListMenu.Init(INIMgr)
DO SetupResultListMenu
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9500
PROPERTY:END
DO HandleOrientationChange
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9700
PROPERTY:END
ListWithFocus = ?ResultList
Window{Prop:StatusText,2} = 'RESULTS LIST'
DO RefreshEditPane
[END]
[END]
WHEN 'TakeEvent'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END

[SOURCE]
PROPERTY:BEGIN
PRIORITY 3200
PROPERTY:END
!   CASE EVENT()
!     OF EVENT:TIMER OROF SCN_UPDATEUI
!   ELSE
!        dbx.PrintEvent()
!   END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6300
PROPERTY:END
  IF INRANGE(EVENT(),EVENT:THREAD,EVENT:THREADLAST)
     cs.wait()
     ThreadQueue.tabNumber = EVENT() - EVENT:THREAD
     GET(ThreadQueue,+ThreadQueue.tabNumber)
     IF ~ERRORCODE()
        ClockQueue.tabNumber = ThreadQueue.tabNumber
        GET(ClockQueue,ClockQueue.tabNumber)
        ClockQueue.lClock = ClockQueue.lCLock - CLOCK()
        PUT(ClockQueue)
        DELETE(ThreadQueue)
        !dbx.Debugout('ThreadQueue for tab ' & ThreadQueue.tabNumber & ' deleted in take event')
     ELSE
        !dbx.Debugout('ThreadQueue for tab ' & ThreadQueue.tabNumber & ' not deleted in take event [' & error() & ']')
     END
     bDoAutoSize = TRUE
     POST(EVENT:NewSelection,?CurrentSearch,,1)
     cs.release()

  ELSIF INRANGE(EVENT(),EVENT:PROGRESS,EVENT:PROGRESSLAST)
     feqProgress = EVENT() - EVENT:PROGRESS
     thisProgress = feqProgress{PROP:Progress}
     IF thisProgress = MAX_PROGRESS
        thisProgress = 0
     END
     feqProgress{PROP:Progress} = thisProgress + 1

     DISPLAY(feqProgress)
  ELSE
     CASE EVENT()
       OF EVENT:SHOWFINDHELP
          oHH.ShowTopic('Find.htm')

       OF EVENT:SHOWREPLACEHELP
          oHH.ShowTopic('Replace.htm')

       OF EVENT:MACROPLAYERCLOSED
          MacroPlayerThread = 0
          ResultListMenu.SetItemEnable('Player',TRUE)
          ResultListMenu.SetItemEnable('Record',TRUE)

       OF EVENT:PLAYMACRO
          bPlaying = TRUE
          POST(EVENT:Accepted,MacroQueue.feqButton)

       OF EVENT:PLAYSELECTIONS
          bPlaying = FALSE
          LOOP i = 1 TO RECORDS(MacroQueue)
             GET(MacroQueue,i)
             IF MacroQueue.mark = TRUE
                bPlaying += 1
             END
          END
          POST(EVENT:PLAYNEXTSELECTION)

       OF EVENT:PLAYNEXTSELECTION
          LOOP i = 1 TO RECORDS(MacroQueue)
             GET(MacroQueue,i)
             IF MacroQueue.mark = TRUE
                POST(EVENT:Accepted,MacroQueue.feqButton)
                BREAK
             END
          END

       OF EVENT:GOTONEWLINE
          SciControl.GoToLine(SearchQueue.ResultQueue.LineNo-1)
          targetLine = SciControl.GetFirstVisibleLine()+(SciControl.LinesOnScreen()/2)
          scrollDelta = SearchQueue.ResultQueue.LineNo - targetLine
          SciControl.LineScroll(0,scrollDelta)
          CASE KEYCODE()
            OF glo:PlusKey OROF glo:MinusKey
             ListWithFocus = -1
             Window{Prop:StatusText,2} = 'EDITOR'
             SciControl.GrabFocus()
          END
     END
  END
[END]
[END]
WHEN 'Update'
[INSTANCES]
WHEN '()'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6300
PROPERTY:END
  IF RECORDS(SearchQueue.ResultQueue) = 0
     DISABLE(?cmdPreviousFolder,?cmdFindAndDelete)
     DISABLE(?cmdSave,?cmdEdit)
     szTitle = ''
     Window{PROP:StatusText,1} = ''
  ELSE
     ENABLE(?cmdPreviousFolder,?cmdFindAndDelete)
     ENABLE(?cmdSave,?cmdEdit)
  END
  IF RECORDS(SearchQueue.UndoQueue) = 0
     DISABLE(?cmdUndoDelete)
  ELSE
     ENABLE(?cmdUndoDelete)
  END
[END]
[END]
WHEN 'SetAlerts'
[INSTANCES]
WHEN '()'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7500
PROPERTY:END
SELF.MyWindow{PROP:Alrt,255} = CtrlShiftHook
SELF.MyWindow{PROP:Alrt,255} = CtrlDelete
SELF.MyWindow{PROP:Alrt,255} = AltDelete
SELF.MyWindow{PROP:Alrt,255} = glo:PlusKey
SELF.MyWindow{PROP:Alrt,255} = glo:MinusKey
!  SELF.MyWindow{PROP:Alrt,255} = ShiftF11
?Search1{PROP:Alrt,255} = MouseRight
[END]
[END]
WHEN 'TakeCloseEvent'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2500
PROPERTY:END
IF SciControl.GetModify() AND szTitle <> ''
   DO Handle_FileModified
END
[END]
[END]
WHEN 'Run'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2500
PROPERTY:END
!Bypass registration check
cbBuffer = SIZE(RegisteredTo)
IF kcr_GetUserName(ADDRESS(RegisteredTo),cbBuffer)
   ExpiryDate   = DATE(12,31,2099)
END  
ReturnValue = Level:Benign
!ReturnValue = CheckRegistration(RegisteredTo,ExpiryDate)

IF ReturnValue = Level:Benign
   IF TODAY() <= ExpiryDate
      IF RegisteredTo = UNREGISTERED_COPY
         bShowEvalMessage = TRUE
      END
      ReturnValue = PARENT.Run()
   ELSE
      CASE MESSAGE('Usage of this Unregistered Evaluation Copy expired on ' & FORMAT(ExpiryDate,@D4) & '||To obtain a registration key please contact rrogers@devuna.com','Kwik Source Search Evaluation Copy Expired',ICON:Hand,'Install Registration Key|No Thanks',1)
        OF 1
           ReturnValue = RegisterProduct()
           IF ReturnValue = Level:Benign
              ReturnValue = PARENT.Run()
           ELSE
              ReturnValue = Level:Notify
           END
      ELSE
         ReturnValue = Level:Notify
      END
   END
OMIT('ReturnValue = PARENT.Run()')
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7500
PROPERTY:END
ELSE
   MESSAGE('Registration check failed with errorcode ' & ReturnValue)
END
[END]
[END]
WHEN 'Ask'
[INSTANCES]
WHEN '()'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 500
PROPERTY:END
DO UpdateStatusBar
[END]
[END]
WHEN 'TakeFieldEvent'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3050
PROPERTY:END
OF ?CurrentSearch{PROP:ChoiceFEQ}
   CASE EVENT()
     OF EVENT:AlertKey
        IF KEYCODE() = MouseRight
           POST(EVENT:Accepted,?cmdSearch)
        END
   END
[END]
[END]
WHEN 'TakeWindowEvent'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7530
PROPERTY:END
  OF EVENT:CreateRestorePoint
     DO CreateRestorePoint
[END]
[END]
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
saveFilename   CSTRING(261)
saveLineNo     LONG
savePosition   LONG
saveColWidth   LONG     !saved Location column width
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1170
PROPERTY:END
baseFontName            CSTRING('Verdana')
baseFontSize            BYTE(10)
FileModeMenu            CSTRING(1025)
FileModeQueue           QUEUE(FileModeQueueType),PRE(fmq)
                        END
!FileExtensionQueue      QUEUE(FileExtensionQueueType),PRE(fxq)
!                        END
DisplayDayString        STRING('Sunday   Monday   Tuesday  WednesdayThursday Friday   Saturday ')
DisplayDayText          STRING(9),DIM(7),OVER(DisplayDayString)
StartMinute             CSTRING(3)
EditPaneRefreshPending  BOOL(FALSE)
LastNavTime             LONG
redoSearch              BOOL(FALSE)
bClosingDown            BOOL(FALSE)
NewSearchText           EQUATE('    +')
szNewTabFontName        CSTRING('Arial Bold')
szNewTabFontColor       LONG(00FF901Eh)
szNewTabFontStyle       LONG(FONT:Bold)
szNewTabFontSize        LONG(12)
szTabFontName           CSTRING('Segoe UI')
szTabFontColor          LONG(COLOR:Black)
szTabFontStyle          LONG(FONT:Regular)
szTabFontSize           LONG(10)
keyCodeName             ctKssKeyCodeName
!keyCodeName             CLASS(ctKeyCodeName)
!MissingCode                PROCEDURE(LONG _ID),STRING,DERIVED
!                        END
hMonitor                HANDLE
ptFrom                  LIKE(POINT)
rcMain                  LIKE(RECT)
mi                      LIKE(tagMONITORINFO)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!FindStr Parameters
!/b   : Matches the pattern if at the beginning of a line.
!/e   : Matches the pattern if at the end of a line.
!/l   : Uses search strings literally.
!/r   : Uses search strings as regular expressions. Findstr interprets all metacharacters as regular expressions unless you use /l.
!/s   : Searches for matching files in the current directory and all subdirectories.
!/i   : Specifies that the search is not to be case-sensitive.
!/x   : Prints lines that match exactly.
!/v   : Prints only lines that do not contain a match.
!/n   : Prints the line number before each line that matches.
!/m   : Prints only the file name if a file contains a match.
!/o   : Prints seek offset before each matching line.

!/p   : Skips files with non-printable characters.
!/offline   : Processes files with offline attribute set.
!/f: file   : Reads file list from the specified file.
!/c: string   : Uses specified text as a literal search string.
!/g: file   : Gets search strings from the specified file.
!/d: dirlist   : Searches a comma-delimited list of directories.
!/a: ColorAttribute   : Specifies color attributes with two hexadecimal digits.
!strings   : Specified text to be searched for in FileName.
![ Drive : ][ Path ] FileName [...] : Specifies a file or files to search.
!/?   : Displays help at the command prompt.
ClockQueue              QUEUE,PRE(ClockQueue)
tabNumber                  LONG
lClock                     LONG
                        END

MacroPlayerThread       LONG
bRecording              BOOL(FALSE)
bPlaying                LONG(0)

SearchQueue             QUEUE,PRE(SearchQueue)
tabNumber                  LONG
bMatchPatternStartOfLine   BOOL
bMatchPatternEndOfLine     BOOL
bUseRegularExpressions     BOOL
bSearchSubdirectories      BOOL
nLevels                    BYTE
nCurrentLevel              BYTE
bCaseSensitive             BOOL
bExactMatch                BOOL
bExcludeMatch              BOOL
bExcludeComments           BOOL
bIncludeBinary             BOOL
bSearchPressed             BOOL
szPattern                  CSTRING(1025)
szSearchPath               CSTRING(1025)
szFileMask                 CSTRING(256)
szMatchesFound             CSTRING(256)
ResultQueue                &ResultQueueType
UndoQueue                  &ResultQueueType
feqSearchProgress          LONG
lPointer                   LONG
bFilenamesOnly             BOOL
bFileListFromFile          BOOL
szFileListFilename         CSTRING(261)
bSearchStringsFromFile     BOOL
szSearchStringFilename     CSTRING(261)
szPropertyFile             CSTRING(33)
szExcludeMask              CSTRING(256)
szListBoxFormat            CSTRING(256)
FindGroup                  LIKE(FindGrp)
szReplaceWith              LIKE(FindGrp.What)
                        END
BookMarkGroup           GROUP
BookmarkQueue              &BookmarkQueueType
                        END

EasyListPrintQueue      ResultQueueType

szListBoxFormat         CSTRING(256)
ListFormatQueue         QUEUE(ListFormatQueueType),PRE(lfq)
                        END
szInstallProgram        CSTRING(260)
szNull                  CSTRING('')
FileQueue               QUEUE(FILE:queue),PRE(FileQueue)
                        END
SearchFindOptions       GROUP(SearchFindOptionsGroupType)
                        END
thisDeleteInstance      LONG
ResultCount             LONG
DeleteCount             LONG
RemainingCount          LONG
DeleteQueue             QUEUE,PRE(DQ)
pointer                    LONG
                        END
bTrackMouse             BOOL
ViewerActive            BYTE
ListWithFocus           LONG(34)  !-1)
CurrentFilename         CSTRING(MAX_PATH)
szTitle                 CSTRING(256)
bAutoSearch             BOOL
bDoAutoSize             BOOL(FALSE)
FocusPosition           LONG
FoldMarginClicked       BOOL
bShowEvalMessage        BOOL(FALSE)
ExpiryDate              LONG
ShowWaitCursor          BOOL(FALSE)
szSendToFilename        CSTRING(MAX_PATH)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5050
PROPERTY:END
LastToolbarButton  EQUATE(?cmdHelp)
SplitterBarSize    EQUATE(4)
[END]
EMBED %WindowManagerMethodDataSection
[INSTANCES]
WHEN 'TakeAccepted'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
saAttr               LIKE(SECURITY_ATTRIBUTES)
szSelectedFolder     CSTRING(261)
szSearchFolder       CSTRING(261)
szFixedFileMask      LIKE(szFileMask)
i                    LONG
j                    LONG
k                    LONG
pStringStart         LONG
pStringEnd           LONG
pCommentMarker       LONG
bMatchMode           LONG
pMatch               LONG
szMatchText          LIKE(SearchQueue.ResultQueue.Text)
strOptions           &STRING
findStrOptions       GROUP(FindStrOptionsGroupType),PRE(fso)
                     END
thisProcInfo         &PROCESS_INFORMATION
cc                   LONG
dwExitCode           DWORD
errMsg               CSTRING(1024)
thisCancelFlag       &BYTE
currentOrientation   BYTE
currentSplitX        BYTE
currentSplitY        BYTE
XMax                 LONG
YMax                 LONG
PropertiesChanged    BOOL(FALSE)
tabText              CSTRING(256)
bRebuildResultListMenu  BOOL(FALSE)

rrlQueue             QUEUE(ff_:queue),PRE(rrl)
                     END
szRRLFileName        CSTRING(261)
[END]
[END]
WHEN 'TakeFieldEvent'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
i                    LONG
j                    LONG
sLineNo              STRING(10)
SortName             LIKE(SearchQueue.ResultQueue.SortName)
lpBookmarkQueue      LONG
pBookmarkQueue       STRING(4),OVER(lpBookmarkQueue)
thisText             LIKE(SearchQueue.ResultQueue.Text)
findStrOptions       GROUP(FindStrOptionsGroupType),PRE(fso)
                     END
X                    LONG
XMax                 LONG
Y                    LONG
YMax                 LONG
MenuSelection        CSTRING(32)
szSelection          CSTRING(261)
MouseDownRow         LONG
[END]
[END]
WHEN 'Kill'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
i                    LONG
j                    LONG
thisProcInfo         &PROCESS_INFORMATION
dwId                 DWORD
szDirPath            CSTRING(261)
[END]
[END]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
i                    LONG
j                    LONG
k                    LONG
hKeyResult           ULONG
pType                ULONG
pData                ULONG
RetVal               LONG
szSubKey             CSTRING(256)
szValueName          CSTRING(256)
loc:szViewerStyle    CSTRING(256)
cMonitors            LONG
newX                 LONG
newY                 LONG
newW                 LONG
newH                 LONG
[END]
[END]
WHEN 'TakeEvent'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
!saveTabNumber        LONG
feqProgress          LONG
thisProgress         LONG
i                    LONG
k                    LONG
MenuSelection        CSTRING(32)
szSelection          CSTRING(261)
targetLine           LONG
scrollDelta          LONG
[END]
[END]
WHEN 'TakeWindowEvent'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
i                    LONG
j                    LONG
p                    LONG
X                    LONG
thisProcInfo         &PROCESS_INFORMATION
nCode                LONG
buttonPressed        LONG
[END]
[END]
WHEN 'TakeNewSelection'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
n      LONG
[END]
[END]
WHEN 'Run'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
cbBuffer             LONG(0)
[END]
[END]
[END]
EMBED %ControlEventHandling
[INSTANCES]
WHEN '?cmdFindAndDelete'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
DO FindAndDelete
[END]
[END]
WHEN '?cmdDeletePath'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
DO DeletePath
[END]
[END]
WHEN '?cmdDeleteFile'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
DO DeleteFilename
[END]
[END]
WHEN '?cmdDeleteLine'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
DO DeleteLine
[END]
[END]
WHEN '?cmdDeleteExtension'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
DO DeleteExtension
[END]
[END]
WHEN '?SplitterBar'
[INSTANCES]
WHEN 'MouseMove'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
IF KEYCODE() = MouseLeft AND bTrackMouse
   IF glo:SplitterOrientation = SplitterOrientation:Vertical
      X = MouseX()
      XMax = Window{PROP:Width}-MIN_PANELWIDTH
      IF INRANGE(X,MIN_PANELWIDTH,XMax)
         ?SplitterBar{PROP:Fill} = COLOR:BLUE
         ?SplitterBar{PROP:XPos} = X
         DISPLAY(?SplitterBar)
      END
   ELSE
      Y = MouseY()
      YMax = Window{PROP:Height}-(MIN_PANELHEIGHT-8)
      IF INRANGE(Y,MIN_PANELHEIGHT,YMax)
         ?SplitterBar{PROP:Fill} = COLOR:BLUE
         ?SplitterBar{PROP:YPos} = Y
         DISPLAY(?SplitterBar)
      END
   END
   glo:SplitX = ?SplitterBar{PROP:XPos}
   glo:SplitY = ?SplitterBar{PROP:YPos}
END
[END]
WHEN 'MouseUp'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
SETKEYCODE(0)
!message(?SplitterBar{PROP:xpos} & ', ' & ?SplitterBar{PROP:ypos} & ', ' & window{PROP:Width} & ', ' & Window{PROP:Height})
?SplitterBar{PROP:Fill} = 00B48246h
DO HandleResize
bTrackMouse = FALSE
SELF.Reset(TRUE)
[END]
WHEN 'MouseIn'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
IF glo:SplitterOrientation = SplitterOrientation:Vertical
   SETCURSOR('~SPLITH.CUR')
ELSE
   SETCURSOR('~SPLITV.CUR')
END
[END]
WHEN 'MouseOut'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
IF ShowWaitCursor = TRUE
   SETCURSOR(CURSOR:Wait)
ELSE
   SETCURSOR()
END
[END]
[END]
WHEN '?CurrentSearch'
[INSTANCES]
WHEN 'TabChanging'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
DO UpdateSearchQueueRecord
[END]
WHEN 'NewSelection'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
IF FoldMarginClicked = TRUE
   FoldMarginClicked = FALSE
ELSE
   IF ?CurrentSearch{PROP:ChoiceFEQ} = NewTab
      !dbx.debugout('Current Search Choice is New Tab')
      DO UpdateSearchQueueRecord
      DO SetTabFont
      NewTab{PROP:Text} = 'New Search'
      LastTabNumber += 1
      DO AddSearchQueueRecord
      NewTab = CREATE(0,CREATE:tab,?CurrentSearch)
      DO SetNewTabFont
      NewTab{PROP:Text} = NewSearchText
      NewTab{PROP:Hide} = FALSE
      IF ViewerActive
         !SciControl.SetReadOnly(FALSE)
         SciControl.ClearBuffer()
         ViewerActive = FALSE
      END
      bAutoSearch = TRUE
   ELSE
      DO GetSearchQueueRecord
   END

   ?ResultList{PROP:Format} = SearchQueue.szListBoxFormat

   !hide location column if no data
   IF ResultQueueHasLocations(SearchQueue.ResultQueue)
      LOOP n = 1 TO 6
        IF ?ResultList{PROPLIST:Header,n} = 'Location'
           IF ?ResultList{PROPLIST:width,n} = 0
              ?ResultList{PROPLIST:width,n} = CHOOSE(saveColWidth > 0,saveColWidth, 50)
              saveColWidth = 0
           END
           BREAK
        END
      END
   ELSE
      LOOP n = 1 TO 6
        IF ?ResultList{PROPLIST:Header,n} = 'Location'
           saveColWidth = ?ResultList{PROPLIST:width,n}
           ?ResultList{PROPLIST:width,n} = 0
           BREAK
        END
      END
   END

   ?ResultList{PROP:From} = SearchQueue.ResultQueue

   AutoSizer.Reset(?ResultList,SearchQueue.ResultQueue)

   IF glo:AutoSizeResultColumns = TRUE AND bDoAutoSize = TRUE
      AutoSizer.ResizeAll(?ResultList)
      SearchQueue.szListBoxFormat = ?ResultList{PROP:Format}
      bDoAutoSize = FALSE
   END

   ?ResultList{PROP:Selected} = SearchQueue.lPointer
   GET(SearchQueue.ResultQueue,SearchQueue.lPointer)

   cs.Wait()
   ThreadQueue.tabNumber = ?CurrentSearch{PROP:ChoiceFEQ}
   GET(ThreadQueue,+ThreadQueue.tabNumber)
   IF NOT ERRORCODE()
      !dbx.Debugout('ThreadQueue for tab ' & ThreadQueue.tabNumber & ' found in take new selection')
      ShowWaitCursor = TRUE
      SETCURSOR(CURSOR:Wait)
      DISABLE(?cmdSearch)
      ResultListMenu.SetItemEnable('Search',FALSE)
      ResultListMenu.SetItemEnable('RedoSearch',FALSE)

      HIDE(?cmdCloseTab)
      ResultListMenu.SetItemEnable('Close',FALSE)
      UNHIDE(?cmdCancelSearch)

      ENABLE(?cmdCancelSearch)
      ResultListMenu.SetItemEnable('Cancel',TRUE)
      SearchQueue.szMatchesFound = ''
   ELSE
      !dbx.Debugout('ThreadQueue for tab ' & ThreadQueue.tabNumber & ' NOT found in take new selection')
      SearchQueue.feqSearchProgress{PROP:Progress} = MAX_PROGRESS
      ShowWaitCursor = FALSE
      SETCURSOR()
      HIDE(SearchQueue.feqSearchProgress)
      IF glo:bHideResultsPanel = FALSE
         UNHIDE(?szMatchesFound)
      END
      ENABLE(?cmdSearch)
      ResultListMenu.SetItemEnable('Search',TRUE)
      ResultListMenu.SetItemEnable('RedoSearch',TRUE)

      DISABLE(?cmdCancelSearch)
      ResultListMenu.SetItemEnable('Cancel',FALSE)
      HIDE(?cmdCancelSearch)

      IF glo:bHideResultsPanel = FALSE
        UNHIDE(?cmdCloseTab)
      END
      IF ?CurrentSearch{PROP:ChoiceFEQ} = ?Search1
         ResultListMenu.SetItemEnable('Close',FALSE)
      ELSE
         ResultListMenu.SetItemEnable('Close',TRUE)
      END

      IF SearchQueue.bSearchPressed
         DO UpdateMatchCount
         IF glo:bDontShowSubdirectoryWarning = FALSE
            IF RECORDS(SearchQueue.ResultQueue) = 0 AND SearchQueue.bSearchSubdirectories = FALSE
               CASE GetSearchSubdirectories()
                 OF BUTTON:YES
                    redoSearch = TRUE
                    SearchQueue.bSearchSubdirectories = TRUE
                    POST(EVENT:Accepted,?cmdSearch)
                 OF BUTTON:NO
                    SELECT(?ResultList)
               END
               SearchQueue.bSearchPressed = FALSE
            END
         END
      ELSE
         !SearchQueue.szMatchesFound = ''
      END
   END
   PUT(SearchQueue)
   cs.Release()

   DO HandleNewSelection
   DISPLAY()
END
[END]
[END]
WHEN '?ResultList'
[INSTANCES]
WHEN 'AlertKey'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
CASE KEYCODE()
  OF F5Key
     redoSearch = TRUE
     POST(EVENT:Accepted,?cmdSearch)
  OF CtrlT
     ?CurrentSearch{PROP:ChoiceFEQ} = NewTab
     POST(EVENT:NewSelection,?CurrentSearch)
  OF CtrlF4 OROF CtrlW
     DO HandleCloseTab
  OF EnterKey
     IF RECORDS(SearchQueue.ResultQueue) = 0
        POST(EVENT:Accepted,?cmdSearch)
     ELSE
        ListWithFocus = -1
        Window{Prop:StatusText,2} = 'EDITOR'
        SciControl.GrabFocus()
     END
  OF CtrlC
     SETCLIPBOARD(SearchQueue.ResultQueue.SortName)
  OF MouseLeft2
     ListWithFocus = ?ResultList
     Window{Prop:StatusText,2} = 'RESULTS LIST'
     IF ?ResultList{PROPLIST:MouseDownZone} = LISTZONE:Right
        i = POINTER(SearchQueue.ResultQueue)
        AutoSizer.ResizeColumn(?ResultList,?ResultList{PROPLIST:MouseDownField})
        SearchQueue.szListBoxFormat = ?ResultList{PROP:Format}
        GET(SearchQueue.ResultQueue,i)
        ?ResultList{PROP:Selected} = i
     END
  OF MouseRight
     ListWithFocus = ?ResultList
     Window{Prop:StatusText,2} = 'RESULTS LIST'
     IF ?ResultList{PROPLIST:MouseDownZone} = LISTZONE:Header
        IF POPUP('Results List Formatter')
           DO FillListFormatQueue
           szListBoxFormat = ListBoxFormatter(ListFormatQueue)
           ?ResultList{PROP:Format} = szListBoxFormat
        END
     ELSE
        IF RECORDS(SearchQueue.ResultQueue)
           ResultListMenu.SetItemEnable('Delete',TRUE)
           ResultListMenu.SetItemEnable('Macro',TRUE)
           ResultListMenu.SetItemEnable('Jump',TRUE)
           ResultListMenu.SetItemEnable('Create',TRUE)
           ResultListMenu.SetItemEnable('SendTo',TRUE)
           ResultListMenu.SetItemEnable('Replace',TRUE)
           ResultListMenu.SetItemEnable('Save',TRUE)
           ResultListMenu.SetItemEnable('Print',TRUE)
           ResultListMenu.SetItemEnable('Copy',TRUE)
           ResultListMenu.SetItemEnable('CopyPath',TRUE)
           ResultListMenu.SetItemEnable('ExplorePath',TRUE)
        ELSE
           ResultListMenu.SetItemEnable('Delete',FALSE)
           ResultListMenu.SetItemEnable('Macro',FALSE)
           ResultListMenu.SetItemEnable('Jump',FALSE)
           ResultListMenu.SetItemEnable('Create',FALSE)
           ResultListMenu.SetItemEnable('SendTo',FALSE)
           ResultListMenu.SetItemEnable('Replace',FALSE)
           ResultListMenu.SetItemEnable('Save',FALSE)
           ResultListMenu.SetItemEnable('Print',FALSE)
           ResultListMenu.SetItemEnable('Copy',FALSE)
           ResultListMenu.SetItemEnable('CopyPath',FALSE)
           ResultListMenu.SetItemEnable('ExplorePath',FALSE)
        END
        IF Records(SearchQueue.UndoQueue) = 0
           ResultListMenu.SetItemEnable('Undo',FALSE)
        ELSE
           ResultListMenu.SetItemEnable('Undo',TRUE)
        END
        IF ?CurrentSearch{PROP:ChoiceFEQ} = ?Search1
           ResultListMenu.SetItemEnable('Close',FALSE)
        ELSE
           ResultListMenu.SetItemEnable('Close',TRUE)
        END
        ResultListMenu.SetItemEnable('HideEdit',CHOOSE(glo:bHideResultsPanel=FALSE,TRUE,FALSE))

        GET(SearchQueue.ResultQueue,?ResultList{PROPLIST:MouseDownRow}+0)
        ?ResultList{PROP:Selected} = POINTER(SearchQueue.ResultQueue)
        DISPLAY(?ResultList)

        MenuSelection = ResultListMenu.Ask()
        CASE MenuSelection
          OF 'Cancel'
             POST(EVENT:Accepted,?cmdCancelSearch)
          OF 'Close'
             DO HandleCloseTab
          OF 'Line'
             DO DeleteLine
          OF 'Path'
             DO DeletePath
          OF 'Filename'
             DO DeleteFilename
          OF 'Extension'
             DO DeleteExtension
          OF 'CommentLines'
             DO DeleteCommentLines
          OF 'LabelLines'
             DO DeleteLabelLines
          OF 'MatchesinDATA'
             DO DeleteDataMatches
          OF 'MatchesinCODE'
             DO DeleteCodeMatches
          OF 'FindandDelete'
             DO FindAndDelete
          OF 'Undo'
             DO HandleUnDo
          OF 'Search'
             POST(EVENT:Accepted,?cmdSearch)
          OF 'RedoSearch'
             redoSearch = TRUE
             POST(EVENT:Accepted,?cmdSearch)
          OF 'Summary'
             szSelection = winShowMatchSummary(SearchQueue.ResultQueue,SearchQueue.UndoQueue,SearchQueue.bCaseSensitive, SearchQueue.bUseRegularExpressions, SearchQueue.szPattern)
             IF szSelection <> ''
                SearchQueue.ResultQueue.SortName = CLIP(szSelection)
                GET(SearchQueue.ResultQueue,SearchQueue.ResultQueue.SortName)
                IF NOT ERRORCODE()
                   ?ResultList{PROP:Selected} = POINTER(SearchQueue.ResultQueue)
                   POST(EVENT:NewSelection,?ResultList)
                END
             END
          OF 'SendTo'
             GET(SearchQueue.ResultQueue,CHOICE(?ResultList))
             szSendToFilename = SearchQueue.ResultQueue.SortName
             DO CheckEditor
          OF 'Replace'
             SciControl.ReplaceAsk()
          OF 'Save'
             POST(EVENT:Accepted,?cmdSave)
          OF 'Copy'
             SETCLIPBOARD(SearchQueue.ResultQueue.SortName)
          OF 'CopyPath'
             SETCLIPBOARD(SearchQueue.ResultQueue.Path)
          OF 'CopyFindstr'
             SETCLIPBOARD(glo:findstrCommandLine)
          OF 'ExplorePath'
             RUN('explorer.exe /select,"' & SearchQueue.ResultQueue.SortName & '"')
          OF 'PreviousFolder'
             DO MoveToPreviousFolder
          OF 'NextFolder'
             DO MoveToNextFolder
          OF 'PreviousFile'
             DO MoveToPreviousFile
          OF 'NextFile'
             DO MoveToNextFile
          OF 'PreviousLine' & keyCodeName.ToName(glo:MinusKey)
             DO MoveToPreviousLine
          OF 'NextLine' & keyCodeName.ToName(glo:PlusKey)
             DO MoveToNextLine
          OF 'Options'
             POST(EVENT:Accepted,?cmdUserOptions)
          OF 'Format'
             DO FillListFormatQueue
             szListBoxFormat = ListBoxFormatter(ListFormatQueue)
             ?ResultList{PROP:Format} = szListBoxFormat
          OF 'Layout'
             POST(EVENT:Accepted,?cmdLayout)
          OF 'CenterBar'
             DO HandleCenterBar
          OF 'AutoSizeColumns'
             i = POINTER(SearchQueue.ResultQueue)
             AutoSizer.ResizeAll(?ResultList)
             SearchQueue.szListBoxFormat = ?ResultList{PROP:Format}
             GET(SearchQueue.ResultQueue,i)
             ?ResultList{PROP:Selected} = i
          OF 'Player'
             IF MacroPlayerThread = 0
                MacroPlayerThread = START(MacroPlayer,25000)
                bRecording = FALSE
                ResultListMenu.SetItemEnable('Player',FALSE)
                ResultListMenu.SetText('Record','Record')
                ResultListMenu.SetItemEnable('Record',FALSE)
             END
          OF 'Record'
             IF bRecording = FALSE
                bRecording = TRUE
                ResultListMenu.SetText('Record','Stop Recording')
             ELSE
                bRecording = FALSE
                ResultListMenu.SetText('Record','Record')
             END
          OF 'HideEdit'
             glo:bHideEditPanel = 1 - glo:bHideEditPanel
             ResultListMenu.SetIcon('HideEdit',CHOOSE(glo:bHideEditPanel,'Checkbox_on.ico','Checkbox_off.ico'))
             DO HandleHideEdit
        ELSE
           IF MenuSelection
              MESSAGE(MenuSelection)
           END
        END
     END
  OF DeleteKey
     IF RECORDS(SearchQueue.ResultQueue)
        DO DeleteLine
     END
  OF CtrlE
     IF RECORDS(SearchQueue.ResultQueue)
        FocusPosition = POINTER(SearchQueue.ResultQueue)
        GET(SearchQueue.ResultQueue,CHOICE(?ResultList))
        szSendToFilename = SearchQueue.ResultQueue.SortName
        SETKEYCODE(0)
        DO CheckEditor
     END
  OF CtrlF
     IF ListWithFocus = ?ResultList
        POST(EVENT:Accepted,?cmdSearch)
     END
  OF CtrlZ
     IF RECORDS(SearchQueue.UndoQueue)
        DO HandleUnDo
     END
END
[END]
WHEN 'NewSelection'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
 IF bClosingDown = TRUE
    CYCLE
 ELSE
    DO HandleNewSelection
 END
[END]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
ListWithFocus = ?ResultList
Window{Prop:StatusText,2} = 'RESULTS LIST'
[END]
WHEN 'ColumnResize'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
SearchQueue.szListBoxFormat = ?ResultList{PROP:Format}
[END]
[END]
WHEN '?cmdSearch'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
 UPDATE()

 IF SciControl.GetModify() AND szTitle <> ''
    DO Handle_FileModified
 END

 findStrOptions = SearchQueue
 IF redoSearch = TRUE
    redoSearch = FALSE
    cc = Level:Benign
 ELSE
    cc = winGetSearchParameters(findStrOptions)
 END

 CASE cc
   OF Level:Benign
      SearchQueue = findStrOptions

      IF glo:NewSearchAction = 1 AND (?CurrentSearch{PROP:ChoiceFEQ}){PROP:Text} <> 'New Search'
         DO UpdateLocalSearchOptions

         LastTabNumber += 1
         DO SetTabFont
         NewTab{PROP:Text} = 'New Search'
         DO AddSearchQueueRecord
         SELECT(NewTab)
         NewTab = CREATE(0,CREATE:tab,?CurrentSearch)
         NewTab{PROP:Text} = NewSearchText
         DO SetNewTabFont
         NewTab{PROP:Hide} = FALSE

         ?ResultList{PROP:From} = SearchQueue.ResultQueue
         ?ResultList{PROP:Format} = SearchQueue.szListBoxFormat

         AutoSizer.Reset(?ResultList,SearchQueue.ResultQueue)

         HIDE(SearchQueue.feqSearchProgress)
         IF glo:bHideResultsPanel = FALSE
            UNHIDE(?szMatchesFound)
         END
         SearchQueue.szMatchesFound = ''
      END

      IF LEN(SearchQueue.szPattern) > 23
         !(?CurrentSearch{PROP:ChoiceFEQ}){PROP:Text} = SearchQueue.szPattern[1 : 10] & '...' & SearchQueue.szPattern[LEN(SearchQueue.szPattern)-9 : LEN(SearchQueue.szPattern)]
         tabText = SearchQueue.szPattern[1 : 10] & '...' & SearchQueue.szPattern[LEN(SearchQueue.szPattern)-9 : LEN(SearchQueue.szPattern)]
      ELSE
         !(?CurrentSearch{PROP:ChoiceFEQ}){PROP:Text} = SearchQueue.szPattern
         tabText = SearchQueue.szPattern
      END

      i = INSTRING('&',tabText)
      LOOP WHILE i > 0
         tabText = tabText[1 : i] & '&' & tabText[i+1 : LEN(tabText)]
         i = INSTRING('&',tabText,1,i+2)
      END
      (?CurrentSearch{PROP:ChoiceFEQ}){PROP:Text} = tabText

      SearchQueue.szMatchesFound = ''
      SearchQueue.bSearchPressed = TRUE
      IF SearchQueue.szSearchPath[LEN(SearchQueue.szSearchPath)] = '\'
         SearchQueue.szSearchPath[LEN(SearchQueue.szSearchPath)] = '<0>'
      END

      SearchQueue.lPointer = 1
      PUT(SearchQueue)
      !DO UpdateSearchQueueRecord

      FREE(SearchQueue.ResultQueue)
      FREE(SearchQueue.UndoQueue)

      DISPLAY(?ResultList)
      DISPLAY(?szMatchesFound)

      HIDE(?szMatchesFound)
      SearchQueue.feqSearchProgress{PROP:Progress} = 0
      UNHIDE(SearchQueue.feqSearchProgress)

      DO SaveSearchParameters

      CurrentFilename = ''
      IF ViewerActive
         !SciControl.SetReadOnly(FALSE)
         SciControl.ClearBuffer()
         ViewerActive = FALSE
      END

      strOptions &= NEW STRING(SIZE(FindStrOptionsGroupType))
      ASSERT(0,eqDBG & 'NEW FindStrOptions [' & ADDRESS(strOptions) & ']')
      strOptions = SearchQueue

      cs.wait()
      ThreadQueue.ID = START(FindStr,25000,strOptions)
      ThreadQueue.tabNumber = SearchQueue.tabNumber
      ThreadQueue.ThreadNo = 0
      ThreadQueue.TargetProcessHandle = kcr_GetCurrentProcess()
      ADD(ThreadQueue,+ThreadQueue.tabNumber)
      cs.release()

      RESUME(ThreadQueue.ID)
      ClockQueue.tabNumber = SearchQueue.tabNumber
      GET(ClockQueue,ClockQueue.tabNumber)
      IF ERRORCODE()
         ClockQueue.lClock = CLOCK()
         ADD(ClockQueue,+ClockQueue.tabNumber)
      ELSE
         ClockQueue.lClock = CLOCK()
         PUT(ClockQueue)
      END

      ASSERT(0,eqDBG & 'DISPOSE FindStrOptions [' & ADDRESS(strOptions) &']')
      DISPOSE(strOptions)
      strOptions &= NULL
      ShowWaitCursor = TRUE
      SETCURSOR(CURSOR:Wait)
      DISABLE(?cmdSearch)
      ResultListMenu.SetItemEnable('Search',FALSE)
      ResultListMenu.SetItemEnable('RedoSearch',FALSE)

      HIDE(?cmdCloseTab)
      ResultListMenu.SetItemEnable('Close',FALSE)

      UNHIDE(?cmdCancelSearch)
      ENABLE(?cmdCancelSearch)
      ResultListMenu.SetItemEnable('Cancel',TRUE)

      DISPLAY()

      IF glo:RestorePointTimerInterval > 0 AND glo:RestorePointTimerThread = 0
         START(RestorePointTimer,25000)
      END

   OF Level:User    !reload saved
      IF glo:NewSearchAction = 1
         LastTabNumber += 1
         DO SetTabFont
         NewTab{PROP:Text} = 'New Search'
         DO AddSearchQueueRecord
         SELECT(NewTab)
         NewTab = CREATE(0,CREATE:tab,?CurrentSearch)
         DO SetNewTabFont
         NewTab{PROP:Text} = NewSearchText
         NewTab{PROP:Hide} = FALSE
      END
      findStrOptions = SearchQueue
      IF LoadRestorePoint(findStrOptions) = Level:Benign
         SearchQueue = findStrOptions
         SearchQueue.tabNumber = (?CurrentSearch{PROP:ChoiceFEQ})
         PUT(SearchQueue)
         (?CurrentSearch{PROP:ChoiceFEQ}){PROP:Text} = SearchQueue.szPattern
         ?ResultList{PROP:From} = SearchQueue.ResultQueue
         ?ResultList{PROP:Format} = SearchQueue.szListBoxFormat

         AutoSizer.Reset(?ResultList,SearchQueue.ResultQueue)

         HIDE(SearchQueue.feqSearchProgress)
         IF glo:bHideResultsPanel = FALSE
            UNHIDE(?szMatchesFound)
         END
      ELSE
         IF ?CurrentSearch{PROP:ChoiceFEQ} <> ?Search1 AND glo:NewSearchAction = 1
            !DO HandleCloseTab
            MESSAGE((?CurrentSearch{PROP:ChoiceFEQ}){PROP:Text})
            DO CloseTab
         END
      END

      IF glo:RestorePointTimerInterval > 0 AND glo:RestorePointTimerThread = 0
         START(RestorePointTimer,25000)
      END

   OF Level:Program    !reload restore point

      DIRECTORY(rrlQueue,glo:RestorePointFolder & '\*.rrl',ff_:NORMAL)
      SORT(rrlQueue,rrlQueue.name)
      !SELECT(NewTab)
      LOOP i = 1 TO RECORDS(rrlQueue)
         GET(rrlQueue,i)
         IF i > 1
         !IF glo:NewSearchAction = 1
            LastTabNumber += 1
            DO SetTabFont
            NewTab{PROP:Text} = 'New Search'
            DO AddSearchQueueRecord
            SELECT(NewTab)
            NewTab = CREATE(0,CREATE:tab,?CurrentSearch)
            DO SetNewTabFont
            NewTab{PROP:Text} = NewSearchText
            NewTab{PROP:Hide} = FALSE
         END

         findStrOptions = SearchQueue
         szRRLFileName = glo:RestorePointFolder & '\' & rrlQueue.name
         IF LoadRestorePoint(findStrOptions, szRRLFileName) = Level:Benign
            SearchQueue = findStrOptions
            SearchQueue.tabNumber = (?CurrentSearch{PROP:ChoiceFEQ})
            PUT(SearchQueue)
            (?CurrentSearch{PROP:ChoiceFEQ}){PROP:Text} = SearchQueue.szPattern
            ?ResultList{PROP:From} = SearchQueue.ResultQueue
            ?ResultList{PROP:Format} = SearchQueue.szListBoxFormat

            AutoSizer.Reset(?ResultList,SearchQueue.ResultQueue)

            HIDE(SearchQueue.feqSearchProgress)
            IF glo:bHideResultsPanel = FALSE
               UNHIDE(?szMatchesFound)
            END
         ELSE
            IF ?CurrentSearch{PROP:ChoiceFEQ} <> ?Search1 AND glo:NewSearchAction = 1
               !DO HandleCloseTab
               DO CloseTab
            END
         END
      END

      !NewTab = CREATE(0,CREATE:tab,?CurrentSearch)
      !DO SetNewTabFont
      !NewTab{PROP:Text} = NewSearchText
      !NewTab{PROP:Hide} = FALSE

      SilentlyRemoveDirectory(glo:RestorePointFolder)
      glo:RestorePointFolder = ''

      IF glo:RestorePointTimerInterval > 0 AND glo:RestorePointTimerThread = 0
         START(RestorePointTimer,25000)
      END

   OF Level:Cancel
      IF ?CurrentSearch{PROP:ChoiceFEQ} <> ?Search1 AND glo:NewSearchAction = 1
         IF (?CurrentSearch{PROP:ChoiceFEQ}){PROP:Text} = 'New Search'
            DO CloseTab
         ELSE
         END
      END
 END  !CASE
[END]
[END]
WHEN '?cmdNextFile'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
DO MoveToNextFile
[END]
[END]
WHEN '?cmdPreviousFolder'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
DO MoveToPreviousFolder
[END]
[END]
WHEN '?cmdNextFolder'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
DO MoveToNextFolder
[END]
[END]
WHEN '?cmdPreviousFile'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
DO MoveToPreviousFile
[END]
[END]
WHEN '?cmdSave'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
findStrOptions = SearchQueue
IF SaveResults(findStrOptions, szSendToFilename)
   !SendTo
   !POST(EVENT:Accepted,?cmdEdit)
   DO CheckEditor
END
[END]
[END]
WHEN '?cmdEdit'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
GET(SearchQueue.ResultQueue,CHOICE(?ResultList))
szSendToFilename = SearchQueue.ResultQueue.SortName
DO CheckEditor
[END]
[END]
WHEN '?cmdUndoDelete'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
DO HandleUndo
[END]
[END]
WHEN '?cmdDeleteCode'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
DO DeleteCodeMatches
[END]
[END]
WHEN '?cmdDeleteData'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
DO DeleteDataMatches
[END]
[END]
WHEN '?cmdDeleteComments'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
DO DeleteCommentLines
[END]
[END]
WHEN '?cmdDeleteLabels'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
DO DeleteLabelLines
[END]
[END]
WHEN '?cmdUserOptions'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4499
PROPERTY:END
CurrentOrientation = glo:SplitterOrientation
currentSplitX      = glo:SplitX
currentSplitY      = glo:SplitY
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
szInstallProgram = ''
PropertiesChanged = UserOptions( (2^SciControl.GetStyleBits()) - 1, szInstallProgram )
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
IF currentOrientation <> glo:SplitterOrientation
   IF currentOrientation = SplitterOrientation:Vertical
      !switching to horizontal
      YMax = Window{PROP:Height}-(MIN_PANELHEIGHT-8)
      glo:SplitY = (glo:SplitX / Window{PROP:Width}) * Window{PROP:Height}
      IF NOT INRANGE(glo:SplitY,MIN_PANELHEIGHT,YMax)
         IF glo:SplitY < MIN_PANELHEIGHT
            glo:SplitY = MIN_PANELHEIGHT
         ELSIF glo:SplitY < YMax
            glo:SplitY = YMax
         END
      END

   ELSE
      XMax = Window{PROP:Width}-MIN_PANELWIDTH
      glo:SplitX = (glo:SplitY / Window{PROP:Height}) * Window{PROP:Width}
      IF NOT INRANGE(glo:SplitX,MIN_PANELWIDTH,XMax)
         IF glo:SplitX < MIN_PANELWIDTH
            glo:SplitX = MIN_PANELWIDTH
         ELSIF glo:SplitX > XMax
            glo:SplitX = XMax
         END
      END
   END
   DO HandleOrientationChange
END

IF PropertiesChanged
   SciControl.ResetPopupMenu()
   LoadLexerProperties(SciControl,SearchQueue.szPropertyFile)
   SciControl.Colourise(0,-1)
   SciControl.MarkerSetBack(markerBookmark, glo:BookmarkBack)
   SciControl.SetSelBack(TRUE,glo:SelectedBack)

   !Window{PROP:Color}    = glo:ApplicationColor
   ?Application:Box{PROP:Fill} = glo:ApplicationColor
   ?Application:Box{PROP:COLOR} = glo:ApplicationColor
   ?szTitle:2{PROP:COLOR} = glo:ApplicationColor

   ?Toolbar1{PROP:Color} = glo:ToolbarColor

   DO AdjustFontColour   !adjust some font colours based on brightness of toolbar and application colours

   ?ResultList{PROP:FontName}   = glo:ResultListFontName
   ?ResultList{PROP:FontSize}   = glo:ResultListFontSize
   ?ResultList{PROP:FontColor}  = glo:ResultListForeColor
   ?ResultList{PROP:FontStyle}  = glo:ResultListFontStyle
   ?ResultList{PROP:LineHeight} = glo:ResultListFontSize

   IF glo:OldMinusKey <> glo:MinusKey
      LOOP I# = 1 TO 255
         IF SELF.MyWindow{Prop:ALRT,I#} = glo:OldMinusKey
            SELF.MyWindow{Prop:ALRT,I#} = glo:MinusKey
            BREAK
          END
      END
      glo:OldMinusKey = glo:MinusKey
      ?cmdPreviousLine{PROP:Tip} = 'Jump to Previous Line<0DH,0AH>in Results List<09H>[' & keyCodeName.ToName(glo:MinusKey) & ']'
      bRebuildResultListMenu = TRUE
   END

   IF glo:OldPlusKey <> glo:PlusKey
      LOOP I# = 1 TO 255
         IF SELF.MyWindow{Prop:ALRT,I#} = glo:OldPlusKey
            SELF.MyWindow{Prop:ALRT,I#} = glo:PlusKey
            BREAK
          END
      END
      glo:OldPlusKey = glo:PlusKey
      ?cmdNextLine{PROP:Tip} = 'Jump to Next Line<0DH,0AH>in Results List<09H>[' & keyCodeName.ToName(glo:PlusKey) & ']'
      bRebuildResultListMenu = TRUE
   END

   IF bRebuildResultListMenu = TRUE
      bRebuildResultListMenu = FALSE
      ResultListMenu.Kill()
      ResultListMenu.Init(INIMgr)
      DO SetupResultListMenu
   END

END

IF szInstallProgram <> ''
   bClosingDown = TRUE
   POST(EVENT:CloseWindow)
END

!ThisWindow.Reset
[END]
[END]
WHEN '?cmdCloseTab'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
DO HandleCloseTab
[END]
WHEN 'Selected'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2500
PROPERTY:END
IF bShowEvalMessage = TRUE
   MESSAGE('Usage of this ' & RegisteredTo & ' will expire on ' & FORMAT(ExpiryDate,@D4),'Kwik Source Search Evaluation Copy',ICON:Exclamation)
   bShowEvalMessage = FALSE
   DO HandleNewSelection
END
[END]
[END]
WHEN '?cmdCancelSearch'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
cs.Wait()
ThreadQueue.tabNumber = SearchQueue.tabNumber
GET(ThreadQueue,ThreadQueue.tabNumber)
IF NOT ERRORCODE()
   thisProcInfo &= (INSTANCE(piProcInfo,ThreadQueue.ID))
   IF NOT thisProcInfo &= NULL
      cc = kcr_TerminateProcess(thisProcInfo.hProcess,0)
      ASSERT(0,eqDBG & 'TerminateProcess called for thread ' & ThreadQueue.ID & ' cc=' & cc)
      IF cc = 0
         cc = kcr_FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM, 0, kcr_GetLastError(), 0, errMsg, SIZE(errMsg), 0)
         ASSERT(0,eqDBG & 'TerminateProcess failed for thread ' & ThreadQueue.ID & ' ' & errMsg)
      END
      !YIELD()
   ELSE
      ASSERT(0,eqDBG & 'thisProcInfo is NULL')
   END
   ThisCancelFlag &= INSTANCE(CancelFlag,ThreadQueue.ID)
   ThisCancelFlag = TRUE
ELSE
   ASSERT(0,eqDBG & ERROR())
END
cs.Release()
YIELD()
[END]
[END]
WHEN '?cmdLayout'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
glo:SplitterOrientation = 1 - glo:SplitterOrientation
DO HandleOrientationChange
[END]
[END]
WHEN '?sciControl:Region'
[INSTANCES]
WHEN 'Selected'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
kcr_SetFocus(SciControl.GetHwnd())
[END]
[END]
WHEN '?cmdPreviousLine'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
DO MoveToPreviousLine
[END]
[END]
WHEN '?cmdNextLine'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
DO MoveToNextLine
[END]
[END]
WHEN '?cmdSaveWarn'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
SciControl.SaveFileAs(szTitle)
[END]
[END]
WHEN '?cmdSaveWarn:2'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
SciControl.SaveFileAs(szTitle)
[END]
[END]
WHEN '?cmdRedoSearch'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
redoSearch = TRUE
POST(EVENT:Accepted,?cmdSearch)
[END]
[END]
WHEN '?cmdHelp'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
PRESSKEY(F1Key)
[END]
[END]
WHEN '?cmdReplaceResults'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
SciControl.ReplaceAsk()
[END]
[END]
[END]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3600
PROPERTY:END
SetupResultListMenu  ROUTINE
   ResultListMenu.AddItem('Search<9>Ctrl+F','Search')
   ResultListMenu.AddItem('Redo Search<9>F5','RedoSearch')
   ResultListMenu.AddItem('Show Match Summary','Summary')
   ResultListMenu.AddItem('-','Separator3')
   ResultListMenu.AddItem('-','Separator0')
   ResultListMenu.AddItem('-','Separator1')
   ResultListMenu.AddItem('Undo Delete','Undo')
   ResultListMenu.AddItem('-','Separator2')
   ResultListMenu.AddItem('Replace...<9>Ctrl+R','Replace')
   ResultListMenu.AddItem('Save Results...','Save')
   ResultListMenu.AddItem('Send To<9>Ctrl+E','SendTo')
   ResultListMenu.AddItem('-','Separator3')
   ResultListMenu.AddItem('Copy Fullname to Clipboard<9>Ctrl+C','Copy')
   ResultListMenu.AddItem('Copy Path to Clipboard','CopyPath')
   ResultListMenu.AddItem('Copy Findstr to Clipboard<9>Ctrl+?','CopyFindstr')
   ResultListMenu.AddItem('Reveal in Explorer','ExplorePath')
   ResultListMenu.AddItem('-','Separator4')
   ResultListMenu.AddItem('Options','Options')
   ResultListMenu.AddItem('Change Layout','Layout')
   ResultListMenu.AddItem('Center Resizer Bar<9>Ctrl+<166>','CenterBar')
   ResultListMenu.AddItem('Change Results List Format','Format')
   ResultListMenu.AddItem('Auto Size Columns','AutoSizeColumns')
   ResultListMenu.AddItem('-','Separator5')
   ResultListMenu.AddItem('Close Tab','Close')
   ResultListMenu.AddItem('Cancel Search','Cancel')
   ResultListMenu.AddItem('-','Separator6')
   ResultListMenu.AddItem('Hide Edit Panel','HideEdit')
   ResultListMenu.AddSubMenu('Jump','{{Previous Folder|Previous File|Previous Line<9>' & keyCodeName.ToName(glo:MinusKey) & '|Next Line<9>' & keyCodeName.ToName(glo:PlusKey) & '|Next File|Next Folder}','Separator0')
   ResultListMenu.AddSubMenu('Delete','{{Selected{{Line|Filename|Extension|Path}|-|Comment Lines|Label Lines|-|Matches in CODE|Matches in DATA|-|Find and Delete...}','Separator1')
   ResultListMenu.AddSubMenu('Macro','{{Player|Record}','Undo')
   ResultListMenu.DeleteItem('Separator0')

   ResultListMenu.SetIcon('Search','Search.ico')
   ResultListMenu.SetIcon('RedoSearch','RedoSearch.ico')
   ResultListMenu.SetIcon('Replace','Replace.ico')
   ResultListMenu.SetIcon('Save','FileSave.ico')
   ResultListMenu.SetIcon('SendTo','SendTo.ico')
   ResultListMenu.SetIcon('Print','Printer.ico')
   ResultListMenu.SetIcon('Close','CloseTab.ico')
   ResultListMenu.SetIcon('Cancel','CancelSearch.ico')
   ResultListMenu.SetIcon('HideEdit',CHOOSE(glo:bHideEditPanel,'Checkbox_on.ico','Checkbox_off.ico'))
   ResultListMenu.SetIcon('Line','DeleteLine.ico')
   ResultListMenu.SetIcon('Filename','DeleteFile.ico')
   ResultListMenu.SetIcon('Extension','DeleteExtension.ico')
   ResultListMenu.SetIcon('Path','DeletePath.ico')
   ResultListMenu.SetIcon('CommentLines','DeleteComment.ico')
   ResultListMenu.SetIcon('LabelLines','DeleteLabel.ico')
   ResultListMenu.SetIcon('MatchesinCODE','DeleteCode.ico')
   ResultListMenu.SetIcon('MatchesinDATA','DeleteData.ico')
   ResultListMenu.SetIcon('FindandDelete','FindDelete.ico')
   ResultListMenu.SetIcon('Undo','UndoDelete.ico')
   ResultListMenu.SetIcon('PreviousFolder','PreviousFolder.ico')
   ResultListMenu.SetIcon('NextFolder','NextFolder.ico')
   ResultListMenu.SetIcon('PreviousFile','PreviousFile.ico')
   ResultListMenu.SetIcon('NextFile','NextFile.ico')
   ResultListMenu.SetIcon('PreviousLine' & keyCodeName.ToName(glo:MinusKey),'PreviousLine.ico')
   ResultListMenu.SetIcon('NextLine' & keyCodeName.ToName(glo:PlusKey),'NextLine.ico')
   ResultListMenu.SetIcon('Options','UserOptions.ico')
   IF glo:SplitterOrientation = SplitterOrientation:Vertical
      ResultListMenu.SetIcon('Layout','SplitH.ico')
   ELSE
      ResultListMenu.SetIcon('Layout','SplitV.ico')
   END
   !  ResultListMenu.SetIcon('Play','button_play.ico')
   !  ResultListMenu.SetIcon('Record','button_record.ico')
   !  ResultListMenu.SetIcon('Stop','button_stop.ico')
   !ResultListMenu.SetItemCheck('Stop',TRUE)

   ResultListMenu.SetItemEnable('SendTo',TRUE)
   ResultListMenu.SetItemEnable('Replace',FALSE)
   ResultListMenu.SetItemEnable('Save',FALSE)
   IF Records(SearchQueue.UndoQueue) = 0
      ResultListMenu.SetItemEnable('Undo',FALSE)
   END
   ResultListMenu.SetItemEnable('Cancel',FALSE)
   ResultListMenu.SetItemEnable('HideEdit',CHOOSE(glo:bHideResultsPanel=FALSE,TRUE,FALSE))
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
AddSearchQueueRecord    ROUTINE
  SearchQueue.tabNumber = NewTab
  SearchQueue.bMatchPatternStartOfLine = bMatchPatternStartOfLine
  SearchQueue.bMatchPatternEndOfLine   = bMatchPatternEndOfLine
  SearchQueue.bUseRegularExpressions   = bUseRegularExpressions
  SearchQueue.bSearchSubdirectories    = bSearchSubdirectories
  SearchQueue.nLevels                  = nLevels
  SearchQueue.nCurrentLevel            = nCurrentLevel
  SearchQueue.bCaseSensitive           = bCaseSensitive
  SearchQueue.bExactMatch              = bExactMatch
  SearchQueue.bExcludeMatch            = bExcludeMatch
  SearchQueue.bExcludeComments         = bExcludeComments
  SearchQueue.bIncludeBinary           = bIncludeBinary
  SearchQueue.bSearchPressed           = FALSE
  SearchQueue.szPattern                = szPattern
  SearchQueue.szSearchPath             = szSearchPath
  SearchQueue.szFileMask               = szFileMask

  SearchQueue.bFilenamesOnly           = bFilenamesOnly
  SearchQueue.bFileListFromFile        = bFileListFromFile
  SearchQueue.szFileListFilename       = szFileListFilename
  SearchQueue.bSearchStringsFromFile   = bSearchStringsFromFile
  SearchQueue.szSearchStringFilename   = szSearchStringFilename

  SearchQueue.szMatchesFound           = ''
  SearchQueue.ResultQueue              &= NEW(ResultQueueType)
  ASSERT(0,eqDBG & 'NEW ResultQueue [' & ADDRESS(SearchQueue.ResultQueue) & ']')
  SearchQueue.UndoQueue                &= NEW(ResultQueueType)
  ASSERT(0,eqDBG & 'NEW UndoQueue [' & ADDRESS(SearchQueue.UndoQueue) & ']')
  SearchQueue.feqSearchProgress        = CREATE(0,CREATE:progress,NewTab)
  SETPOSITION(SearchQueue.feqSearchProgress,?szMatchesFound{PROP:XPos},?szMatchesFound{PROP:YPos},160,8)
  SearchQueue.feqSearchProgress{PROP:RangeLow} = 0
  SearchQueue.feqSearchProgress{PROP:RangeHigh} = MAX_PROGRESS
  SearchQueue.lPointer = 1
  ?ResultList{PROP:Selected} = 1

  SearchQueue.szListBoxFormat = ?ResultList{PROP:Format}

  SearchQueue.FindGroup.What = ''   !SELF.GetFindWhat()
  SearchQueue.FindGroup.Direction = 'Down'
  SearchQueue.FindGroup.MatchCase = FALSE
  SearchQueue.FindGroup.WholeWord = FALSE
  SearchQueue.FindGroup.WordStart = FALSE
  SearchQueue.FindGroup.RegExp    = FALSE
  SearchQueue.FindGroup.POSIX     = FALSE
  SearchQueue.szReplaceWith       = ''
  SearchQueue.FindGroup.bWordWrap = TRUE

  ADD(SearchQueue,SearchQueue.tabNumber)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
GetSearchQueueRecord    ROUTINE
  SearchQueue.tabNumber = ?CurrentSearch{PROP:ChoiceFeq}
  GET(SearchQueue,SearchQueue.tabNumber)
  IF NOT ERRORCODE()
     DO UpdateLocalSearchOptions
  END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
UpdateLocalSearchOptions   ROUTINE
     bMatchPatternStartOfLine = SearchQueue.bMatchPatternStartOfLine
     bMatchPatternEndOfLine   = SearchQueue.bMatchPatternEndOfLine
     bUseRegularExpressions   = SearchQueue.bUseRegularExpressions
     bSearchSubdirectories    = SearchQueue.bSearchSubdirectories
     nLevels                  = SearchQueue.nLevels
     nCurrentLevel            = SearchQueue.nCurrentLevel
     bCaseSensitive           = SearchQueue.bCaseSensitive
     bExactMatch              = SearchQueue.bExactMatch
     bExcludeMatch            = SearchQueue.bExcludeMatch
     bExcludeComments         = SearchQueue.bExcludeComments
     bIncludeBinary           = SearchQueue.bIncludeBinary
     szPattern                = SearchQueue.szPattern
     szSearchPath             = SearchQueue.szSearchPath
     szFileMask               = SearchQueue.szFileMask

     bFilenamesOnly           = SearchQueue.bFilenamesOnly
     bFileListFromFile        = SearchQueue.bFileListFromFile
     szFileListFilename       = SearchQueue.szFileListFilename
     bSearchStringsFromFile   = SearchQueue.bSearchStringsFromFile
     szSearchStringFilename   = SearchQueue.szSearchStringFilename
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
UpdateSearchQueueRecord    ROUTINE
  GET(SearchQueue.ResultQueue,?ResultList{PROP:Selected})
  SearchQueue.lPointer        = POINTER(SearchQueue.ResultQueue)
  PUT(SearchQueue)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
SaveSearchParameters ROUTINE
   DATA
n                 LONG
LocationColWidth  LONG

   CODE
      INIMgr.Update('Search Options','bMatchPatternStartOfLine',SearchQueue.bMatchPatternStartOfLine)
      INIMgr.Update('Search Options','bMatchPatternEndOfLine',SearchQueue.bMatchPatternEndOfLine)
      INIMgr.Update('Search Options','bUseRegularExpressions',SearchQueue.bUseRegularExpressions)
      INIMgr.Update('Search Options','bSearchSubdirectories',SearchQueue.bSearchSubdirectories)
      INIMgr.Update('Search Options','nLevels',SearchQueue.nLevels)
      INIMgr.Update('Search Options','bCaseSensitive',SearchQueue.bCaseSensitive)
      INIMgr.Update('Search Options','bExactMatch',SearchQueue.bExactMatch)
      INIMgr.Update('Search Options','bExcludeMatch',SearchQueue.bExcludeMatch)
      INIMgr.Update('Search Options','bExcludeComments',SearchQueue.bExcludeComments)
      INIMgr.Update('Search Options','bIncludeBinary',SearchQueue.bIncludeBinary)

      ReplaceChr(SearchQueue.szPattern,'''','§')
      INIMgr.Update('Search Options','szPattern',SearchQueue.szPattern)

      INIMgr.Update('Search Options','szSearchPath',SearchQueue.szSearchPath)
      INIMgr.Update('Search Options','szFileMask',SearchQueue.szFileMask)

      INIMgr.Update('Search Options','bFilenamesOnly',SearchQueue.bFilenamesOnly)
      INIMgr.Update('Search Options','bFileListFromFile',SearchQueue.bFileListFromFile)
      INIMgr.Update('Search Options','szFileListFilename',SearchQueue.szFileListFilename)
      INIMgr.Update('Search Options','bSearchStringsFromFile',SearchQueue.bSearchStringsFromFile)
      INIMgr.Update('Search Options','szSearchStringFilename',SearchQueue.szSearchStringFilename)

      INIMgr.Update('Search Options','FindText',SearchFindOptions.szFindText)

      INIMgr.Update('Find and Delete Options','SearchLocation',SearchFindOptions.SearchLocation)
      INIMgr.Update('Find and Delete Options','DeleteCondition',SearchFindOptions.DeleteCondition)
      INIMgr.Update('Find and Delete Options','MatchType',SearchFindOptions.MatchType)
      INIMgr.Update('Find and Delete Options','MatchCase',SearchFindOptions.MatchCase)

      INIMgr.Update('Global','szEditCommand',glo:szEditorCommand)
      INIMgr.Update('Global','PromptForEditor',glo:PromptForEditor)
      INIMgr.Update('Global','AllExtensions',glo:bAllExtensions)
      INIMgr.Update('Global','NewSearchAction',glo:NewSearchAction)
      INIMgr.Update('Global','NoDownloadVersion',glo:szNoDownloadVersion)
      INIMgr.Update('Global','DeleteWarningCount',glo:nDeleteWarningCount)
      INIMgr.Update('Global','DefaultSearchButton',glo:nDefaultSearchButton)
      INIMgr.Update('Global','DontShowSubdirectoryWarning',glo:bDontShowSubdirectoryWarning)
      INIMgr.Update('Global','SyncPathWithPattern',glo:SyncPathWithPattern)
      INIMgr.Update('Global','DefaultPropertyFile',glo:szDefaultPropertyFile)

      INIMgr.Update('Global','SelectedBack',glo:SelectedBack)
      INIMgr.Update('Global','BookmarkBack',glo:BookmarkBack)

      INIMgr.Update('Global','ResultListFontName',glo:ResultListFontName)
      INIMgr.Update('Global','ResultListFontSize',glo:ResultListFontSize)
      INIMgr.Update('Global','ResultListForeColor',glo:ResultListForeColor)
      INIMgr.Update('Global','ResultListFontStyle',glo:ResultListFontStyle)
      INIMgr.Update('Global','ResultListPlusKey',glo:PlusKey)
      INIMgr.Update('Global','ResultListMinusKey',glo:MinusKey)

      INIMgr.Update('Global','ApplicationColor',glo:ApplicationColor)
      INIMgr.Update('Global','ToolbarColor',glo:ToolbarColor)
      INIMgr.Update('Global','SplitOrientation',glo:SplitterOrientation)
      INIMgr.Update('Global','SplitX',?SplitterBar{PROP:XPos})
      INIMgr.Update('Global','SplitY',?SplitterBar{PROP:YPos})
      INIMgr.Update('Global','Zoom',glo:Zoom)

      INIMgr.Update('Global','ClarionHelpFile',glo:szClarionHelpFile)
      INIMgr.Update('Global','HotSpotsEnabled',glo:bHotSpotsEnabled)
      INIMgr.Update('Global','AutoSave',glo:bAutoSave)

      INIMgr.Update('Global','AllowMultipleInstances',glo:AllowMultipleInstances)
      INIMgr.Update('Global','AutoSizeResultColumns',glo:AutoSizeResultColumns)
      INIMgr.Update('Global','RestorePointTimerInterval',glo:RestorePointTimerInterval)

      INIMgr.Update('Global','sqlProperties',glo:sqlProperties)

      !only save the listbox format if the 'location' column is not hidden
      LOOP n = 1 TO 6
         IF ?ResultList{PROPLIST:Header,n} = 'Location'
            LocationColWidth = ?ResultList{PROPLIST:width,n}
            IF LocationColWidth <> 0
               szListBoxFormat = ?ResultList{PROP:Format}
               INIMgr.Update('Main','szListBoxFormat',szListBoxFormat)
               BREAK
            END
         END
      END

      INIMgr.UpdateQueue('Macro Queue','Macro',MacroQueue,MacroQueue.feqButton,MacroQueue.szField1,MacroQueue.szField2,MacroQueue.szField3)
   EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
HandleCloseTab ROUTINE
      IF ?CurrentSearch{PROP:ChoiceFEQ} <> ?Search1
         DO CloseTab
      ELSE
         (?CurrentSearch{PROP:ChoiceFEQ}){PROP:Text} = 'New Search'
         SearchQueue.szMatchesFound = ''
         DISPLAY(?szMatchesFound)
         FREE(SearchQueue.ResultQueue)
         FREE(SearchQueue.UndoQueue)
         DISPLAY(?ResultList)
         IF ViewerActive
            !SciControl.SetReadOnly(FALSE)
            SciControl.ClearBuffer()
            ViewerActive = FALSE
         END
         szTitle = ''
         DISPLAY(?szTitle)
         DISPLAY(?szTitle:2)
         POST(EVENT:Accepted,?cmdSearch)
      END

CloseTab    ROUTINE
   DATA
i                    LONG
j                    LONG
p                    LONG
thisProcInfo         &PROCESS_INFORMATION

   CODE
      SearchQueue.tabNumber = ?CurrentSearch{PROP:ChoiceFEQ}
      GET(SearchQueue,SearchQueue.tabNumber)
      IF ~ERRORCODE()
         p = POINTER(SearchQueue)

         cs.wait()
         j = RECORDS(ThreadQueue)
         LOOP i = 1 TO j
            GET(ThreadQueue,i)
            IF ThreadQueue.tabNumber = SearchQueue.tabNumber
               thisProcInfo &= (INSTANCE(piProcInfo,ThreadQueue.ID))
               IF NOT thisProcInfo &= NULL
                  kcr_TerminateProcess(thisProcInfo.hProcess,0)
               END
               POST(EVENT:CloseWindow,,ThreadQueue.ID)
               !YIELD()
            END
         END
         cs.release()
         YIELD()

         ?ResultList{PROP:From} = ''

         FREE(SearchQueue.ResultQueue)
         ASSERT(0,eqDBG & 'DISPOSE ResultQueue [' & ADDRESS(SearchQueue.ResultQueue) &']')
         DISPOSE(SearchQueue.ResultQueue)
         SearchQueue.ResultQueue &= NULL

         FREE(SearchQueue.UndoQueue)
         ASSERT(0,eqDBG & 'DISPOSE UndoQueue [' & ADDRESS(SearchQueue.UndoQueue) &']')
         DISPOSE(SearchQueue.UndoQueue)
         SearchQueue.UndoQueue &= NULL

         DESTROY(SearchQueue.feqSearchProgress)
         SearchQueue.feqSearchProgress = 0
         DESTROY(SearchQueue.tabNumber)
         SearchQueue.tabNumber = 0
         PUT(SearchQueue)
         DELETE(SearchQueue)
         GET(SearchQueue,p-1)
         ?CurrentSearch{PROP:ChoiceFEQ} = SearchQueue.tabNumber
      END
      POST(EVENT:NewSelection,?CurrentSearch)

[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
CheckEditor ROUTINE
      IF RECORDS(EditorQueue) > 1 AND glo:PromptForEditor = TRUE
         IF SelectSendToCommand() = Level:Benign
            IF glo:szEditorCommand <> ''
               DO HandleEdit
            END
         END
      ELSE
         IF glo:szEditorCommand <> ''
            DO HandleEdit
         END
      END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
HandleEdit  ROUTINE
   DATA
szURL                CSTRING(1024)
szFilename           CSTRING(MAXPATH)
i                    LONG
j                    LONG

   CODE
      szURL = glo:szEditorCommand

      !GET(SearchQueue.ResultQueue,CHOICE(?ResultList))
      !szSendToFilename = SearchQueue.ResultQueue.SortName

      j = 0
      IF INSTRING('SCITE',UPPER(szURL),1)
         LOOP i = 1 TO LEN(szSendToFilename)
            j += 1
            szFilename[j] = szSendToFilename[i]
            IF szSendToFilename[i] = '\'
               j += 1
               szFilename[j] = szSendToFilename[i]
            END
         END
      ELSE
         szFilename = szSendToFilename
      END

      i = INSTRING('%1',szURL,1,1)
      IF i
         szURL = szURL[1 : i-1] & szFilename & szURL[i+2 : LEN(szURL)]
      ELSE
         i = INSTRING('%FILE',UPPER(szURL),1,1)
         IF i
            szURL = szURL[1 : i-1] & szFilename & szURL[i+5 : LEN(szURL)]
         END
      END

      i = INSTRING('%2',szURL,1,1)
      IF i
         szURL = szURL[1 : i-1] & SearchQueue.ResultQueue.LineNo & szURL[i+2 : LEN(szURL)]
      ELSE
         i = INSTRING('%LINE',UPPER(szURL),1,1)
         IF i
            szURL = szURL[1 : i-1] & SearchQueue.ResultQueue.LineNo & szURL[i+5 : LEN(szURL)]
         END
      END
      IF UPPER(szURL) = '<<USE WINDOWS DEFAULT>'
         szNull = ''
         kcr_ShellExecute(window{prop:handle},0,szFilename,0,szNull,1)
      ELSE
         RUN(szURL)
         IF RUNCODE() = -4
            MESSAGE('An unexpected error has occurred.|' & ERROR() & '|attempting to run ' & szURL,'Error',ICON:Exclamation)
         END
      END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
HandleUnDo  ROUTINE
   DATA
indx     LONG

   CODE
      saveFilename = SearchQueue.ResultQueue.SortName
      saveLineNo   = SearchQueue.ResultQueue.LineNo
      GET(SearchQueue.UndoQueue,RECORDS(SearchQueue.UndoQueue))
      thisDeleteInstance = SearchQueue.UndoQueue.DeleteInstance
      LOOP WHILE SearchQueue.UndoQueue.DeleteInstance = thisDeleteInstance
         SearchQueue.ResultQueue = SearchQueue.UndoQueue
         ADD(SearchQueue.ResultQueue,SearchQueue.UndoQueue.Position)
         IF CurrentFilename = SearchQueue.ResultQueue.SortName
            BookmarkAdd(SearchQueue.ResultQueue.LineNo-1)
         END
         DELETE(SearchQueue.UndoQueue)
         GET(SearchQueue.UndoQueue,RECORDS(SearchQueue.UndoQueue))
         IF ERRORCODE()
            BREAK
         END
      END
      IF RECORDS(SearchQueue.UndoQueue) = 0
         ResultListMenu.SetItemEnable('Undo',FALSE)
      ELSE
         ResultListMenu.SetItemEnable('Undo',TRUE)
      END

      indx = POINTER(SearchQueue.ResultQueue)
      SearchQueue.ResultQueue.SortName = saveFilename
      SearchQueue.ResultQueue.LineNo   = saveLineNo
      GET(SearchQueue.ResultQueue,+SearchQueue.ResultQueue.SortName,+SearchQueue.ResultQueue.LineNo)
      IF ERRORCODE()
         GET(SearchQueue.ResultQueue,indx)
      END
      ?ResultList{PROP:Selected} = POINTER(SearchQueue.ResultQueue)

      DO UpdateMatchCount
      POST(EVENT:NewSelection,?ResultList)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
HandleNewSelection   ROUTINE
  ListWithFocus = ?ResultList
  Window{Prop:StatusText,2} = 'RESULTS LIST'

  CASE KEYCODE()
     OF UpKey OROF DownKey OROF PgUpKEy OROF PgDnKey OROF glo:PlusKey OROF glo:MinusKey
        Window{PROP:Timer} = 5
        LastNavTime = CLOCK()
        EditPaneRefreshPending = TRUE
  ELSE
        DO RefreshEditPane
  END


RefreshEditPane   ROUTINE
   DATA
p              LONG
targetLine     LONG
scrollDelta    LONG

   CODE
      IF SearchQueue.feqSearchProgress{PROP:Hide} = FALSE
         EXIT
      END

      EditPaneRefreshPending = FALSE
      ThisWindow.Update()

      IF bAutoSearch = TRUE AND bClosingDown = FALSE
         bAutoSearch = FALSE
         POST(EVENT:Accepted,?cmdSearch)
      END

      IF RECORDS(SearchQueue.ResultQueue) = 0
         IF ViewerActive
            IF SciControl.GetModify() AND szTitle <> ''
               DO Handle_FileModified
            END
            SciControl.SetDefaultStyles()
            ViewerActive = FALSE
         END
         Window{PROP:StatusText,1} = ''
      ELSE
         IF CHOICE(?ResultList) = 0
            GET(SearchQueue.ResultQueue,1)
         ELSE
            GET(SearchQueue.ResultQueue,CHOICE(?ResultList))
         END
         IF ViewerActive AND CurrentFilename <> SearchQueue.ResultQueue.SortName
            IF SciControl.GetModify() AND szTitle <> ''
               DO Handle_FileModified
            END
            ViewerActive = FALSE
         END
         IF ViewerActive = FALSE
            CurrentFilename = CLIP(SearchQueue.ResultQueue.SortName)
            szTitle = SearchQueue.ResultQueue.Path & SearchQueue.ResultQueue.Filename & SearchQueue.ResultQueue.szExtension
            IF glo:bHideEditPanel = FALSE
               DISPLAY(?szTitle)
            END
            ViewerActive = SciControl.OpenFile(CurrentFilename)
            IF ViewerActive = TRUE
               SciControl.MarkerDeleteAll(markerBookmark)
               !set bookmarks
               p = CHOOSE(POINTER(SearchQueue.ResultQueue) > 0,POINTER(SearchQueue.ResultQueue),1)
               GET(SearchQueue.ResultQueue,+SearchQueue.ResultQueue.SortName)
               LOOP WHILE ((NOT ERRORCODE()) AND (SearchQueue.ResultQueue.SortName = CurrentFilename))
                  BookmarkAdd(SearchQueue.ResultQueue.LineNo-1)
                  GET(SearchQueue.ResultQueue,POINTER(SearchQueue.ResultQueue)+1)
               END
               GET(SearchQueue.ResultQueue,p)
               ?ResultList{PROP:Selected} = p

               IF glo:bHideEditPanel = TRUE
                  SciControl.SetHide(TRUE)
               END

               !EVENT:GOTONEWLINE sometimes goes missing
               !this code forces the issue on a new file load
               SciControl.GoToLine(SearchQueue.ResultQueue.LineNo-1)
               targetLine = SciControl.GetFirstVisibleLine()+(SciControl.LinesOnScreen()/2)
               scrollDelta = SearchQueue.ResultQueue.LineNo - targetLine
               SciControl.LineScroll(0,scrollDelta)

            END
         END
         POST(EVENT:GOTONEWLINE)
      END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
HandleOrientationChange ROUTINE
   IF glo:SplitterOrientation = SplitterOrientation:Vertical
      ResultListMenu.SetIcon('Layout','SplitH.ico')
      ?cmdLayout{PROP:Icon} = '~SplitH.ico'
      ?cmdLayout{PROP:Tip} = 'Switch to Horizontal Layout'
      HIDE(?szTitle:2)
      HIDE(?cmdSaveWarn:2)
      IF glo:bHideEditPanel = FALSE
         UNHIDE(?szTitle)
         UNHIDE(?cmdSaveWarn)
      END
      IF glo:SplitX = 0
         glo:SplitX = (Window{PROP:Width}/2)
      END
      SETPOSITION(?SplitterBar,glo:SplitX,0,SplitterBarSize,Window{PROP:Height}+1)
   ELSE
      ResultListMenu.SetIcon('Layout','SplitV.ico')
      ?cmdLayout{PROP:Icon} = '~SplitV.ico'
      ?cmdLayout{PROP:Tip} = 'Switch to Vertical Layout'
      HIDE(?szTitle)
      HIDE(?cmdSaveWarn)
      IF glo:bHideEditPanel = FALSE
         UNHIDE(?szTitle:2)
         UNHIDE(?cmdSaveWarn:2)
      END
      IF glo:SplitY = 0
         glo:SplitY = (Window{PROP:Height}/2)-1
      END
      SETPOSITION(?SplitterBar,0,glo:SplitY,Window{PROP:Width}+1,SplitterBarSize)
   END
   DO HandleResize
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
HandleCenterBar   ROUTINE
   CASE glo:SplitterOrientation
     OF SplitterOrientation:Vertical
        glo:SplitX = (Window{PROP:Width}/2)
        SETPOSITION(?SplitterBar,glo:SplitX,0,SplitterBarSize,Window{PROP:Height}+1)
     OF SplitterOrientation:Horizontal
        glo:SplitY = (Window{PROP:Height}/2)
        SETPOSITION(?SplitterBar,0,glo:SplitY,Window{PROP:Width}+1,SplitterBarSize)
   END
   DO HandleResize
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
HandleHideResults ROUTINE
      IF glo:bHideResultsPanel = TRUE
         HIDE(?Application:Box)
         HIDE(?CurrentSearch)
         HIDE(?cmdCloseTab)
         HIDE(?szMatchesFound)
         HIDE(?ResultList)
         HIDE(?SplitterBar)
      ELSE
         UNHIDE(?Application:Box)
         UNHIDE(?CurrentSearch)
         UNHIDE(?cmdCloseTab)
         UNHIDE(?szMatchesFound)
         UNHIDE(?ResultList)
         UNHIDE(?SplitterBar)
      END
      DO HandleResize
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
HandleHideEdit    ROUTINE
      IF glo:bHideEditPanel = TRUE
         CASE glo:SplitterOrientation
           OF SplitterOrientation:Vertical
              HIDE(?szTitle)
              HIDE(?cmdSaveWarn)
         ELSE
              HIDE(?szTitle:2)
              HIDE(?cmdSaveWarn:2)
         END
         HIDE(?SplitterBar)
         SciControl.SetHide(TRUE)
      ELSE
         CASE glo:SplitterOrientation
           OF SplitterOrientation:Vertical
              UNHIDE(?szTitle)
              UNHIDE(?cmdSaveWarn)
         ELSE
              UNHIDE(?szTitle:2)
              UNHIDE(?cmdSaveWarn:2)
         END
         UNHIDE(?SplitterBar)
         SciControl.SetHide(FALSE)
      END
      DO HandleResize
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
HandleResize      ROUTINE
   DATA
X        LONG
Y        LONG
W        LONG
H        LONG
Xpixels  LONG
Ypixels  LONG
Wpixels  LONG
Hpixels  LONG

   CODE
      IF glo:bHideEditPanel = TRUE OR glo:bHideResultsPanel = TRUE
         IF glo:bHideEditPanel = TRUE
            SETPOSITION(?CurrentSearch,,,Window{PROP:Width},Window{PROP:Height})
            SETPOSITION(?ResultList,,,Window{PROP:Width}-2,Window{PROP:Height}-47)
            ?Application:Box{PROP:Width} = Window{PROP:Width}
         ELSE
            CASE glo:SplitterOrientation
              OF SplitterOrientation:Vertical
                 SETPOSITION(?SciControl:Region,1,-18,Window{PROP:Width}-3,Window{PROP:Height}-20)
              OF SplitterOrientation:Horizontal
                 SETPOSITION(?SciControl:Region,1,-9,Window{PROP:Width}-3,Window{PROP:Height}-27)
            END
            Window{PROP:Pixels} = TRUE
            GETPOSITION(?sciControl:Region,Xpixels,Ypixels,Wpixels,Hpixels)
            Wpixels += 2
            SETPOSITION(?sciControl:Region,Xpixels,Ypixels,Wpixels,Hpixels)
            Window{PROP:Pixels} = FALSE

            SciControl.Reset(FALSE)

            CASE glo:SplitterOrientation
              OF SplitterOrientation:Vertical
            ELSE
                 ?szTitle:2{PROP:Width} = Window{PROP:Width}
                 ?szTitle:2{PROP:YPos} = 0
                 ?cmdSaveWarn:2{PROP:XPos} = 0
                 ?cmdSaveWarn:2{PROP:YPos} = 0
            END
         END
      ELSE
         CASE glo:SplitterOrientation
           OF SplitterOrientation:Vertical
              X = ?SplitterBar{PROP:Xpos}
              ?SplitterBar{PROP:Height} = Window{PROP:Height}

              !SETPOSITION(?SciControl:Region,X+2,-18,Window{PROP:Width}-(X+3),Window{PROP:Height}-20)
              SETPOSITION(?SciControl:Region,X+SplitterBarSize,-18,Window{PROP:Width}-(X+SplitterBarSize+1),Window{PROP:Height}-20)
              Window{PROP:Pixels} = TRUE
              W = ?SciControl:Region{PROP:Height}
              W += 2
              ?SciControl:Region{PROP:Height} = W
              Window{PROP:Pixels} = FALSE
              SciControl.Reset(FALSE)

              SETPOSITION(?CurrentSearch,,,X,Window{PROP:Height})
              SETPOSITION(?ResultList,,,X-2,Window{PROP:Height}-47)

              W = CHOOSE(X <= 420, 396 - (420 - X),398)
              W = CHOOSE(W < 0,0,W)
              ?szMatchesFound{Prop:Width} = W

              SearchQueue.feqSearchProgress{PROP:Width} = W
              DISPLAY(SearchQueue.feqSearchProgress)

              IF X < LastToolbarButton{PROP:Xpos} + LastToolbarButton{PROP:Width} - 3
                 ?szTitle{PROP:Xpos} = LastToolbarButton{PROP:Xpos} + LastToolbarButton{PROP:Width} + 5
              ELSE
                 ?szTitle{PROP:Xpos} = ?SciControl:Region{PROP:Xpos} + 5
              END
              W = (Window{PROP:Width} - ?szTitle{PROP:Xpos}) - 20
              W = CHOOSE(W < 0,0,W)
              ?szTitle{PROP:Width} = W

              ?cmdSaveWarn{PROP:XPos} = ?szTitle{PROP:Xpos} + W + 4
              ?cmdSaveWarn{PROP:YPos} = ?szTitle{PROP:Ypos}



           OF SplitterOrientation:Horizontal
              Y = ?SplitterBar{PROP:Ypos}
              IF Y < 10
                 Y = (Window{PROP:Height}/2) - 1
              END
              ?SplitterBar{PROP:Width} = Window{PROP:Width}

              !SETPOSITION(?SciControl:Region,1,Y-8,Window{PROP:Width}-3,Window{PROP:Height}-(Y+28))
              SETPOSITION(?SciControl:Region,1,Y-6,Window{PROP:Width}-3,Window{PROP:Height}-(Y+31))
              Window{PROP:Pixels} = TRUE
              GETPOSITION(?sciControl:Region,Xpixels,Ypixels,Wpixels,Hpixels)
              !Ypixels -= 1
              Wpixels += 2
              !Hpixels += 3
              SETPOSITION(?sciControl:Region,Xpixels,Ypixels,Wpixels,Hpixels)
              Window{PROP:Pixels} = FALSE

              SciControl.Reset(FALSE)

              SETPOSITION(?CurrentSearch,0,,Window{PROP:Width},Y)
              SETPOSITION(?ResultList,1,,Window{PROP:Width}-2,Y-29)

              ?szMatchesFound{Prop:Width} = 398

              ?szTitle:2{PROP:Width} = Window{PROP:Width}
              ?szTitle:2{PROP:YPos} = Y+(SplitterBarSize-1)
              Window{PROP:Pixels} = TRUE
              ?szTitle:2{PROP:YPos} = ?szTitle:2{PROP:YPos} + 1
              Window{PROP:Pixels} = FALSE

              ?cmdSaveWarn:2{PROP:XPos} = 0
              ?cmdSaveWarn:2{PROP:YPos} = Y+(SplitterBarSize-1)
              Window{PROP:Pixels} = TRUE
              ?cmdSaveWarn:2{PROP:YPos} = ?cmdSaveWarn:2{PROP:YPos} + 1
              Window{PROP:Pixels} = FALSE

         END
         ?Application:Box{PROP:Width} = ?CurrentSearch{PROP:Width}
      END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
Handle_FileModified  ROUTINE
   IF glo:bAutoSave = TRUE
      IF glo:bShowAutoSaveWarning = TRUE
         CASE ConfirmAutoSave()
           OF BUTTON:YES
              SciControl.SaveFile(szTitle)
           OF BUTTON:NO
         END
      ELSE
         SciControl.SaveFile(szTitle)
      END
   ELSE
      CASE MESSAGE('Save changes to ' & szTitle & '?','Kwik Source Search',ICON:Exclamation,BUTTON:YES+BUTTON:NO,BUTTON:YES)
        OF BUTTON:YES
           SciControl.SaveFile(szTitle)
        OF BUTTON:NO
      END
   END
   EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
UpdateMatchCount     ROUTINE
   DATA
Matches        LONG
Deletes        LONG
Remaining      LONG

      CODE
         ClockQueue.tabNumber = SearchQueue.tabNumber
         GET(ClockQueue,ClockQueue.tabNumber)
         Deletes = RECORDS(SearchQueue.UndoQueue)
         Remaining = RECORDS(SearchQueue.ResultQueue)
         Matches = Remaining + Deletes
         SearchQueue.szMatchesFound = CLIP(LEFT(FORMAT(Matches,@N_14)))   & ' match' & CHOOSE(Matches = 1,'','es') & ' found in '          & |
                                      CLIP(LEFT(FORMAT(ClockQueue.lClock/100,@N7.1)))  & ' seconds'
         IF Deletes = 0
            SearchQueue.szMatchesFound = SearchQueue.szMatchesFound & '.'
         ELSE
            SearchQueue.szMatchesFound = SearchQueue.szMatchesFound & ', ' & CLIP(LEFT(FORMAT(Remaining,@N_14))) & ' remaining.'
         END

         DISPLAY(?szMatchesFound)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
PreDelete   ROUTINE
   GET(SearchQueue.UndoQueue,RECORDS(SearchQueue.UndoQueue))
   IF ERRORCODE()
      thisDeleteInstance = 1
   ELSE
      thisDeleteInstance = SearchQueue.UndoQueue.DeleteInstance + 1
   END
   DeleteCount = 0
   FREE(DeleteQueue)
   GET(SearchQueue.ResultQueue,CHOICE(?ResultList))
   saveFilename = SearchQueue.ResultQueue.SortName
   saveLineNo   = SearchQueue.ResultQueue.LineNo
   savePosition = POINTER(SearchQueue.ResultQueue)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
PostDelete  ROUTINE
   ResultCount = RECORDS(SearchQueue.ResultQueue)
   DeleteCount = RECORDS(DeleteQueue)
   RemainingCount = ResultCount - DeleteCount
   IF DeleteCount > 0
      IF glo:nDeleteWarningCount > 0 AND DeleteCount >= glo:nDeleteWarningCount
         CASE MESSAGE(DeleteCount & ' record' & CHOOSE(DeleteCount > 1,'s','') & ' out of ' & ResultCount & ' will be deleted leaving ' & RemainingCount & ' record' & CHOOSE(RemainingCount > 1,'s','') & '.|Do you want to continue?','Confirm Delete',ICON:Question,BUTTON:YES+BUTTON:NO,BUTTON:YES)
           OF BUTTON:YES
              DO ProcessDeleteQueue
           OF BUTTON:NO
         END
      ELSE
         DO ProcessDeleteQueue
      END
      FREE(DeleteQueue)
      DISPLAY(?ResultList)
      DO UpdateMatchCount
      DO HandleNewSelection
      IF bPlaying
         MacroQueue.mark = FALSE
         PUT(MacroQueue)
         POST(EVENT:PLAYNEXTSELECTION)
      END
   END
   EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
ProcessDeleteQueue      ROUTINE
   DATA
indx        LONG

   CODE
      LOOP indx = 1 TO RECORDS(DeleteQueue)
         GET(DeleteQueue,indx)
         GET(SearchQueue.ResultQueue,DeleteQueue.pointer)
         SearchQueue.UndoQueue = SearchQueue.ResultQueue
         SearchQueue.UndoQueue.Position = POINTER(SearchQueue.ResultQueue)
         SearchQueue.UndoQueue.DeleteInstance = thisDeleteInstance
         ADD(SearchQueue.UndoQueue)
         IF CurrentFilename = SearchQueue.ResultQueue.SortName
            BookmarkDelete(SearchQueue.ResultQueue.LineNo-1)
         END
         DELETE(SearchQueue.ResultQueue)
      END
      IF bRecording = TRUE
         ADD(MacroQueue)
      END

      SearchQueue.ResultQueue.SortName = saveFilename
      SearchQueue.ResultQueue.LineNo   = saveLineNo
      GET(SearchQueue.ResultQueue,+SearchQueue.ResultQueue.SortName,+SearchQueue.ResultQueue.LineNo)
      IF ERRORCODE()
         IF savePosition > RECORDS(SearchQueue.ResultQueue)
            savePosition = RECORDS(SearchQueue.ResultQueue)
         END
         GET(SearchQueue.ResultQueue,savePosition)
      END
      ?ResultList{PROP:Selected} = POINTER(SearchQueue.ResultQueue)
   EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
DeleteLine  ROUTINE
   DATA
errFlag        BOOL(FALSE)

   CODE
      DO PreDelete

      IF bPlaying > 0
         SearchQueue.ResultQueue.SortName = MacroQueue.szField1
         SearchQueue.ResultQueue.LineNo   = MacroQueue.szField2
         GET(SearchQueue.ResultQueue,+SearchQueue.ResultQueue.SortName,+SearchQueue.ResultQueue.LineNo)
         IF ERRORCODE()
            errFlag = TRUE
         END
         bPlaying -= 1
      END

      IF ErrFlag = FALSE
         DeleteQueue.pointer = POINTER(SearchQueue.ResultQueue)
         ADD(DeleteQueue)

         IF bRecording = TRUE
            MacroQueue.feqButton  = BUTTON:DeleteLine
            MacroQueue.szField1   = SearchQueue.ResultQueue.SortName
            MacroQueue.szField2   = SearchQueue.ResultQueue.LineNo
         END

         DO PostDelete
      END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
DeletePath  ROUTINE
   DATA
thisPath             LIKE(SearchQueue.ResultQueue.Path)
i                    LONG
j                    LONG

   CODE
      DO PreDelete

      IF bPlaying > 0
         thisPath = MacroQueue.szField1
         bPlaying -= 1
      ELSE
         thisPath = UPPER(SearchQueue.ResultQueue.Path)
      END

      j = RECORDS(SearchQueue.ResultQueue)
      LOOP i = j TO 1 BY -1
         GET(SearchQueue.ResultQueue,i)
         IF UPPER(SearchQueue.ResultQueue.Path) = thisPath
            DeleteQueue.pointer = POINTER(SearchQueue.ResultQueue)
            ADD(DeleteQueue)
         END
      END

      IF bRecording = TRUE
         MacroQueue.feqButton  = BUTTON:DeletePath
         MacroQueue.szField1   = thisPath
         MacroQueue.szField2   = ''
      END

      DO PostDelete
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
DeleteFilename ROUTINE
   DATA
thisSortname         LIKE(SearchQueue.ResultQueue.SortName)
i                    LONG
j                    LONG

   CODE
      DO PreDelete

      IF bPlaying > 0
         thisSortname = UPPER(MacroQueue.szField3) & UPPER(MacroQueue.szField2) & UPPER(MacroQueue.szField3)
         bPlaying -= 1
      ELSE
         thisSortname = SearchQueue.ResultQueue.SortName
      END

      j = RECORDS(SearchQueue.ResultQueue)
      LOOP i = j TO 1 BY -1
         GET(SearchQueue.ResultQueue,i)
         IF SearchQueue.ResultQueue.SortName = thisSortname
            DeleteQueue.pointer = POINTER(SearchQueue.ResultQueue)
            ADD(DeleteQueue)
         END
      END

      IF bRecording = TRUE
         MacroQueue.feqButton   = BUTTON:DeleteFile
         MacroQueue.szField1    = SearchQueue.ResultQueue.Filename
         MacroQueue.szField2    = SearchQueue.ResultQueue.szExtension
         MacroQueue.szField3    = SearchQueue.ResultQueue.Path
      END

      DO PostDelete
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
DeleteExtension   ROUTINE
   DATA
thisExtension        LIKE(SearchQueue.ResultQueue.szExtension)
i                    LONG
j                    LONG

   CODE
      DO PreDelete

      IF bPlaying > 0
        thisExtension = MacroQueue.szField1
        bPlaying -= 1
      ELSE
        thisExtension = UPPER(SearchQueue.ResultQueue.szExtension)
      END

      j = RECORDS(SearchQueue.ResultQueue)
      LOOP i = j TO 1 BY -1
         GET(SearchQueue.ResultQueue,i)
         IF UPPER(SearchQueue.ResultQueue.szExtension) = thisExtension
            DeleteQueue.pointer = POINTER(SearchQueue.ResultQueue)
            ADD(DeleteQueue)
         END
      END

      IF bRecording = TRUE
         MacroQueue.feqButton   = BUTTON:DeleteExtension
         MacroQueue.szField1    = thisExtension
         MacroQueue.szField2    = ''
      END

      DO PostDelete
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
DeleteCommentLines      ROUTINE
   DATA
i           LONG
j           LONG
bMatchMode  BYTE
thisText    LIKE(SearchQueue.ResultQueue.Text)

   CODE
      DO PreDelete

      j = RECORDS(SearchQueue.ResultQueue)
      LOOP i = j TO 1 BY -1
         GET(SearchQueue.ResultQueue,i)
         thisText = CLIP(LEFT(SearchQueue.ResultQueue.Text))
         bMatchMode = Match:Simple
         IF NOT SearchQueue.bCaseSensitive
            bMatchMode = BOR(bMatchMode,Match:NoCase)
         END
         IF SearchQueue.bUseRegularExpressions
            bMatchMode = BOR(bMatchMode,Match:Regular)
         END
         IF NOT MatchWithoutComment(thisText,SearchQueue.szPattern,bMatchMode,SearchQueue.ResultQueue.szExtension)
            DeleteQueue.pointer = POINTER(SearchQueue.ResultQueue)
            ADD(DeleteQueue)
         END
      END

      IF bRecording = TRUE
         MacroQueue.feqButton   = BUTTON:DeleteComments
         MacroQueue.szField1    = ''
         MacroQueue.szField2    = ''
      END

      DO PostDelete
   EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
DeleteLabelLines     ROUTINE
   DATA
i        LONG
j        LONG
thisText LIKE(SearchQueue.ResultQueue.Text)

   CODE
      DO PreDelete

      j = RECORDS(SearchQueue.ResultQueue)
      LOOP i = j TO 1 BY -1
         GET(SearchQueue.ResultQueue,i)
         IF SearchQueue.ResultQueue.Text[1] <> ' ' AND SearchQueue.ResultQueue.Text[1] <> '!'
            DeleteQueue.pointer = POINTER(SearchQueue.ResultQueue)
            ADD(DeleteQueue)
         END
      END

      IF bRecording = TRUE
         MacroQueue.feqButton   = BUTTON:DeleteLabels
         MacroQueue.szField1    = ''
         MacroQueue.szField2    = ''
      END

      DO PostDelete
   EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
DeleteCodeMatches    ROUTINE
   DATA
i                    LONG
j                    LONG

   CODE
      DO PreDelete

      j = RECORDS(SearchQueue.ResultQueue)
      LOOP i = j TO 1 BY -1
         GET(SearchQueue.ResultQueue,i)
         IF SearchQueue.ResultQueue.szSection = 'CODE'
            DeleteQueue.pointer = POINTER(SearchQueue.ResultQueue)
            ADD(DeleteQueue)
         END
      END

      IF bRecording = TRUE
         MacroQueue.feqButton   = BUTTON:DeleteCode
         MacroQueue.szField1    = ''
         MacroQueue.szField2    = ''
      END

      DO PostDelete
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
DeleteDataMatches    ROUTINE
   DATA
i                    LONG
j                    LONG

   CODE
      DO PreDelete

      j = RECORDS(SearchQueue.ResultQueue)
      LOOP i = j TO 1 BY -1
         GET(SearchQueue.ResultQueue,i)
         IF SearchQueue.ResultQueue.szSection = 'DATA'
            DeleteQueue.pointer = POINTER(SearchQueue.ResultQueue)
            ADD(DeleteQueue)
         END
      END

      IF bRecording = TRUE
         MacroQueue.feqButton   = BUTTON:DeleteData
         MacroQueue.szField1    = ''
         MacroQueue.szField2    = ''
      END

      DO PostDelete
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
FindAndDelete     ROUTINE
   DATA
i              LONG
j              LONG
cc             LONG
MatchString    &CSTRING
bMatchFound    LONG
szOption       CSTRING(256)

   CODE
      SearchFindOptions.szText = CLIP(LEFT(SearchQueue.ResultQueue.Text)) & '<13,10>' & |
                                 CHOOSE(SearchQueue.ResultQueue.ProcedureName='','',SearchQueue.ResultQueue.ProcedureName & '<13,10>') & |
                                 SearchQueue.ResultQueue.Filename & SearchQueue.ResultQueue.szExtension & '<13,10>' & |
                                 SearchQueue.ResultQueue.Path

      IF bPlaying > 0
         SearchFindOptions.szFindText = MacroQueue.szField1
         i = 1
         j = INSTRING(';',MacroQueue.szField2,1,i)
         IF j
            szOption = MacroQueue.szField2[1 : j-1]
            CASE szOption
              OF 'Search:Path'
                 SearchFindOptions.SearchLocation = Search:Path
              OF 'Search:Filename'
                 SearchFindOptions.SearchLocation = Search:Filename
              OF 'Search:Extension'
                 SearchFindOptions.SearchLocation = Search:Extension
              OF 'Search:Procedure'
                 SearchFindOptions.SearchLocation = Search:Procedure
            ELSE !'Search:Text'
                 SearchFindOptions.SearchLocation = Search:Text
            END
            i = j+1
            j = INSTRING(';',MacroQueue.szField2,1,i)
            IF j
               szOption = MacroQueue.szField2[i : j-1]
               CASE szOption
                 OF 'Match:Regular'
                    SearchFindOptions.MatchType = Match:Regular
               ELSE !Match:Simple
                    SearchFindOptions.MatchType = Match:Simple
               END
            END
            szOption = MacroQueue.szField2[j+1 : LEN(MacroQueue.szField2)]
            IF szOption = 'Match:NoCase'
               SearchFindOptions.MatchCase = FALSE
            ELSE
               SearchFindOptions.MatchCase = TRUE
            END
         END
         bPlaying -= 1
         cc = Level:Benign
      ELSE
         cc = GetFindDeleteOptions(SearchFindOptions)
      END

      IF cc = Level:Benign    !NOT GetFindDeleteOptions(SearchFindOptions)
         !do search and delete
         DO PreDelete

         CASE SearchFindOptions.SearchLocation
           OF Search:Path
              MatchString &= SearchQueue.ResultQueue.Path
           OF Search:Filename
              MatchString &= SearchQueue.ResultQueue.Filename
           OF Search:Extension
              MatchString &= SearchQueue.ResultQueue.szExtension
           OF Search:Procedure
              MatchString &= SearchQueue.ResultQueue.ProcedureName
         ELSE !Search:Text
              MatchString &= SearchQueue.ResultQueue.Text
         END

         j = RECORDS(SearchQueue.ResultQueue)
         LOOP i = j TO 1 BY -1
            GET(SearchQueue.ResultQueue,i)
            IF SearchFindOptions.MatchType <> Match:Regular
               IF SearchFindOptions.MatchCase
                  bMatchFound = INSTRING(SearchFindOptions.szFindText,MatchString,1)
               ELSE
                  bMatchFound = INSTRING(UPPER(SearchFindOptions.szFindText),UPPER(MatchString),1)
               END
            ELSE
               bMatchFound = MATCH(MatchString,SearchFindOptions.szFindText,Match:Regular)
            END
            IF bMatchFound
               IF SearchFindOptions.DeleteCondition = Delete:Contains
                  DeleteQueue.pointer = POINTER(SearchQueue.ResultQueue)
                  ADD(DeleteQueue)
               END
            ELSE
               IF SearchFindOptions.DeleteCondition = Delete:DoesNotContain
                  DeleteQueue.pointer = POINTER(SearchQueue.ResultQueue)
                  ADD(DeleteQueue)
               END
            END
         END

         IF bRecording = TRUE
            MacroQueue.feqButton   = BUTTON:FindAndDelete
            MacroQueue.szField1    = SearchFindOptions.szFindText
            MacroQueue.szField2    = ''

            CASE SearchFindOptions.SearchLocation
              OF Search:Path
                 MacroQueue.szField2 = 'Search:Path;'
              OF Search:Filename
                 MacroQueue.szField2 = 'Search:Filename;'
              OF Search:Extension
                 MacroQueue.szField2 = 'Search:Extension;'
              OF Search:Procedure
                 MacroQueue.szField2 = 'Search:Procedure;'
            ELSE !'Search:Text'
                 MacroQueue.szField2 = 'Search:Text;'
            END

            CASE SearchFindOptions.MatchType
              OF 'Match:Regular'
                 MacroQueue.szField2 = MacroQueue.szField2 & 'Match:Regular;'
            ELSE !Match:Simple
                 MacroQueue.szField2 = MacroQueue.szField2 & 'Match:Simple;'
            END

            IF SearchFindOptions.MatchCase = FALSE
               MacroQueue.szField2 = MacroQueue.szField2 & 'Match:NoCase'
            ELSE
               MacroQueue.szField2 = MacroQueue.szField2 & 'Match:Case'
            END
         END

         DO PostDelete
      END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
MoveToNextLine    ROUTINE
   DATA

i     LONG
j     LONG

   CODE
       j = RECORDS(SearchQueue.ResultQueue)
       i = POINTER(SearchQueue.ResultQueue)
       IF i < j
          i += 1
          GET(SearchQueue.ResultQueue,i)
          ?ResultList{PROP:Selected} = POINTER(SearchQueue.ResultQueue)
          POST(EVENT:NewSelection,?ResultList)
       !ELSE
       !   GET(SearchQueue.ResultQueue,1)
       END

       !?ResultList{PROP:Selected} = POINTER(SearchQueue.ResultQueue)
       !POST(EVENT:NewSelection,?ResultList)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
MoveToPreviousLine   ROUTINE
   DATA

i     LONG
j     LONG

   CODE
       j = RECORDS(SearchQueue.ResultQueue)
       i = POINTER(SearchQueue.ResultQueue)
       IF i > 1
          i -= 1
          GET(SearchQueue.ResultQueue,i)
          ?ResultList{PROP:Selected} = POINTER(SearchQueue.ResultQueue)
          POST(EVENT:NewSelection,?ResultList)
       !ELSE
       !   GET(SearchQueue.ResultQueue,j)
       END

       !?ResultList{PROP:Selected} = POINTER(SearchQueue.ResultQueue)
       !POST(EVENT:NewSelection,?ResultList)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
MoveToNextFile    ROUTINE
   DATA
thisFile       LIKE(SearchQueue.ResultQueue.Filename)
thisExtension  LIKE(SearchQueue.ResultQueue.szExtension)
i              LONG
j              LONG

   CODE

       thisFile      = SearchQueue.ResultQueue.Filename
       thisExtension = SearchQueue.ResultQueue.szExtension

       j = RECORDS(SearchQueue.ResultQueue)
       LOOP i = POINTER(SearchQueue.ResultQueue) TO j
        GET(SearchQueue.ResultQueue,i)
          IF SearchQueue.ResultQueue.Filename <> thisFile OR SearchQueue.ResultQueue.szExtension <> thisExtension
             BREAK
          END
       END
       IF i > j
          GET(SearchQueue.ResultQueue,1)
       END

       ?ResultList{PROP:Selected} = POINTER(SearchQueue.ResultQueue)
       POST(EVENT:NewSelection,?ResultList)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
MoveToPreviousFile    ROUTINE
   DATA
thisFile       LIKE(SearchQueue.ResultQueue.Filename)
thisExtension  LIKE(SearchQueue.ResultQueue.szExtension)
i              LONG

   CODE
       thisFile      = SearchQueue.ResultQueue.Filename
       thisExtension = SearchQueue.ResultQueue.szExtension

       LOOP i = POINTER(SearchQueue.ResultQueue) TO 1 BY -1
          GET(SearchQueue.ResultQueue,i)
          IF SearchQueue.ResultQueue.Filename <> thisFile OR SearchQueue.ResultQueue.szExtension <> thisExtension
             BREAK
          END
       END
       IF i = 0
          GET(SearchQueue.ResultQueue,RECORDS(SearchQueue.ResultQueue))
       END

       thisFile = SearchQueue.ResultQueue.Filename
       thisExtension = SearchQueue.ResultQueue.szExtension
       LOOP i = POINTER(SearchQueue.ResultQueue) TO 1 BY -1
          GET(SearchQueue.ResultQueue,i)
          IF SearchQueue.ResultQueue.Filename <> thisFile OR SearchQueue.ResultQueue.szExtension <> thisExtension
             BREAK
          END
       END
       IF i > 0
          GET(SearchQueue.ResultQueue,POINTER(SearchQueue.ResultQueue)+1)
       END

       ?ResultList{PROP:Selected} = POINTER(SearchQueue.ResultQueue)
       POST(EVENT:NewSelection,?ResultList)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
MoveToNextFolder     ROUTINE
   DATA
thisFolder  LIKE(SearchQueue.ResultQueue.Path)
i           LONG
j           LONG

   CODE
       thisFolder = SearchQueue.ResultQueue.Path

       j = RECORDS(SearchQueue.ResultQueue)
       LOOP i = POINTER(SearchQueue.ResultQueue) TO j
          GET(SearchQueue.ResultQueue,i)
          IF SearchQueue.ResultQueue.Path <> thisFolder
             BREAK
          END
       END
       IF i > j
          GET(SearchQueue.ResultQueue,1)
       END

       ?ResultList{PROP:Selected} = POINTER(SearchQueue.ResultQueue)
       POST(EVENT:NewSelection,?ResultList)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
MoveToPreviousFolder     ROUTINE
   DATA
thisFolder    LIKE(SearchQueue.ResultQueue.Path)
i           LONG

   CODE
       thisFolder = SearchQueue.ResultQueue.Path

       LOOP i = POINTER(SearchQueue.ResultQueue) TO 1 BY -1
          GET(SearchQueue.ResultQueue,i)
          IF SearchQueue.ResultQueue.Path <> thisFolder
             BREAK
          END
       END
       IF i = 0
          GET(SearchQueue.ResultQueue,RECORDS(SearchQueue.ResultQueue))
       END

       thisFolder = SearchQueue.ResultQueue.Path
       LOOP i = POINTER(SearchQueue.ResultQueue) TO 1 BY -1
          GET(SearchQueue.ResultQueue,i)
          IF SearchQueue.ResultQueue.Path <> thisFolder
             BREAK
          END
       END
       IF i > 0
          GET(SearchQueue.ResultQueue,POINTER(SearchQueue.ResultQueue)+1)
       END

       ?ResultList{PROP:Selected} = POINTER(SearchQueue.ResultQueue)
       POST(EVENT:NewSelection,?ResultList)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
SaveViewerStyles    ROUTINE
   DATA
K                    LONG
loc:szViewerStyle    CSTRING(256)

   CODE
      LOOP K = 1 TO SCE_CLW_LAST
         loc:szViewerStyle = CLIP(glo:ViewerStyles.StyleGroup[K].Font) & ',' & |
                             glo:ViewerStyles.StyleGroup[K].FontSize   & ',' & |
                             glo:ViewerStyles.StyleGroup[K].FontStyle  & ',' & |
                             glo:ViewerStyles.StyleGroup[K].Bold       & ',' & |
                             glo:ViewerStyles.StyleGroup[K].Italic     & ',' & |
                             glo:ViewerStyles.StyleGroup[K].Underline  & ',' & |
                             glo:ViewerStyles.StyleGroup[K].Fore       & ',' & |
                             glo:ViewerStyles.StyleGroup[K].Back       & ',' & |
                             glo:ViewerStyles.StyleGroup[K].EolFilled  & ',' & |
                             glo:ViewerStyles.StyleGroup[K].CaseOpt    & ',' & |
                             glo:ViewerStyles.StyleGroup[K].Visible    & ',' & |
                             glo:ViewerStyles.StyleGroup[K].HotSpot
         INIMgr.Update('Viewer Styles','ViewerStyle'& FORMAT(K-1,@n02),loc:szViewerStyle)
      END
   EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
UpdateStatusBar   ROUTINE
      IF ListWithFocus = ?ResultList
         Window{Prop:StatusText,2} = 'RESULTS LIST'
      ELSE
         Window{Prop:StatusText,2} = 'EDITOR'
      END
      IF RegisteredTo = UNREGISTERED_COPY
         Window{Prop:StatusText,3} = RegisteredTo & ' expiry date ' & FORMAT(ExpiryDate,@D4)
      ELSE
         Window{Prop:StatusText,3} = 'This product is registered to ' & RegisteredTo
      END
      Window{Prop:StatusText,4} = 'Version ' & glo:szVersion
   EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
FillListFormatQueue     ROUTINE
   DATA
i     LONG
j     LONG
n     LONG
p1    LONG
p2    LONG
delimiter STRING(1)

   CODE
      FREE(ListFormatQueue)
      j = 1
      n = 1
      delimiter = '#'
      szListBoxFormat = ?ResultList{PROP:Format}
      i = INSTRING(delimiter,szListBoxFormat,1,j)
      IF i = 0
         delimiter = '@'
      END
      i = INSTRING(delimiter,szListBoxFormat,1,j)
      LOOP WHILE i > 0
         j = i + 1
         i = INSTRING(delimiter,szListBoxFormat,1,j)
         ListFormatQueue.ColumnFormat = szListBoxFormat[n : i]
         p1 = INSTRING('~',ListFormatQueue.ColumnFormat,1,1) + 1
         p2 = INSTRING('~',ListFormatQueue.ColumnFormat,1,p1) - 1
         ListFormatQueue.ColumnName = ListFormatQueue.ColumnFormat[p1 : p2]
         IF delimiter = '@'
            CASE ListFormatQueue.ColumnName
              OF 'Path'
                 ListFormatQueue.ColumnFormat = ListFormatQueue.ColumnFormat & '#1#'
              OF 'Filename'
                 ListFormatQueue.ColumnFormat = ListFormatQueue.ColumnFormat & '#2#'
              OF 'Ext'
                 ListFormatQueue.ColumnFormat = ListFormatQueue.ColumnFormat & '#3#'
              OF 'Line'
                 ListFormatQueue.ColumnFormat = ListFormatQueue.ColumnFormat & '#4#'
              OF 'Location'
                 ListFormatQueue.ColumnFormat = ListFormatQueue.ColumnFormat & '#5#'
              OF 'Text'
                 ListFormatQueue.ColumnFormat = ListFormatQueue.ColumnFormat & '#6#'
            END
         END
         ListFormatQueue.ColumnSequence = RECORDS(ListFormatQueue) + 1
         ADD(ListFormatQueue)
         n = i + 1
         IF n > LEN(szListBoxFormat)
            BREAK
         ELSE
            j = n
            i = INSTRING(delimiter,szListBoxFormat,1,j)
         END
      END
   EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
SetNewTabFont  ROUTINE
  NewTab{PROP:FontName}  = szNewTabFontName
  NewTab{PROP:FontSize}  = szNewTabFontSize
  NewTab{PROP:FontColor} = szNewTabFontColor
  NewTab{PROP:FontStyle} = szNewTabFontStyle
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
SetTabFont  ROUTINE
  NewTab{PROP:FontName}  = szTabFontName
  NewTab{PROP:FontSize}  = szTabFontSize
  NewTab{PROP:FontColor} = szTabFontColor
  NewTab{PROP:FontStyle} = szTabFontStyle
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
AdjustFontColour  ROUTINE
  IF ColourBrightness(glo:ApplicationColor) > 130
     !black
     ?szTitle:2{PROP:FontColor} = COLOR:Black
  ELSE
     !white
     ?szTitle:2{PROP:FontColor} = COLOR:White
  END

  IF ColourBrightness(glo:ToolbarColor) > 130
     !black
     ?cmdSearch{PROP:FontColor} = COLOR:Black
     ?szTitle{PROP:FontColor} = COLOR:Black
  ELSE
     !white
     ?cmdSearch{PROP:FontColor} = COLOR:White
     ?szTitle{PROP:FontColor} = COLOR:White
  END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
SearchReplaceAll  ROUTINE
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
CreateRestorePoint   ROUTINE
   DATA
i           LONG
p           LONG
szFilename  CSTRING(261)
Options     &FindStrOptionsGroupType
dwId        DWORD
rrlQueue    QUEUE(ff_:queue),PRE(RRL)
            END

   CODE
      dwId = kcr_GetCurrentProcessId()
      svSpecialFolder.CreateDirIn(SV:CSIDL_APPDATA, '\Devuna\KSS\RestorePoint\' & dwId)

      !make sure folder is empty
      szFilename = svSpecialFolder.GetDir(SV:CSIDL_APPDATA) & '\Devuna\KSS\RestorePoint\' & dwId & '\*.RRL'
      DIRECTORY(rrlQueue,szFilename,ff_:NORMAL)
      LOOP i = 1 TO RECORDS(rrlQueue)
         GET(rrlQueue,i)
         szFilename = svSpecialFolder.GetDir(SV:CSIDL_APPDATA) & '\Devuna\KSS\RestorePoint\' & dwId & '\' & rrlQueue.name
         IF kcr_DeleteFile(szFilename)
         END
      END

      !now create the restore point
      p = POINTER(SearchQueue)
      options &= ADDRESS(SearchQueue)
      LOOP i = 1 to RECORDS(SearchQueue)
         GET(SearchQueue,i)
         szFilename = svSpecialFolder.GetDir(SV:CSIDL_APPDATA) & '\Devuna\KSS\RestorePoint\' & dwId & '\KSS_Results_Tab' & FORMAT(SearchQueue.tabNumber,@N03) & '.rrl'
         CreateRestorePoint(Options, szFilename)
      END
      GET(SearchQueue,p)
   EXIT
[END]
EMBED %LocalProcedures
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3150
PROPERTY:END
BookmarkAdd PROCEDURE(LONG lineno)

markerHandle   LONG

  CODE
           IF lineno = -1
                   lineno = GetCurrentLineNumber()
                END
           IF NOT BookmarkPresent(lineno)
                   markerHandle = SciControl.MarkerAdd(lineno, markerBookmark)
                END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
BookmarkDelete PROCEDURE(LONG lineno)

  CODE
           IF lineno = -1
                   lineno = GetCurrentLineNumber()
                END
           IF BookmarkPresent(lineno)
                   SciControl.MarkerDelete(lineno, markerBookmark)
                END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
BookmarkPresent PROCEDURE(LONG lineno)

state       LONG,AUTO

  CODE
      IF lineno = -1
                   lineno = GetCurrentLineNumber()
                END
           state = SciControl.MarkerGet(lineno)
           RETURN BAND(state,(BSHIFT(1,markerBookmark)))
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
BookmarkToggle PROCEDURE(LONG lineno)

  CODE
           IF lineno = -1
                   lineno = GetCurrentLineNumber()
                END
           IF BookmarkPresent(lineno)
                   BookmarkDelete(lineno)
           ELSE
                   BookmarkAdd(lineno)
                END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
BookmarkNext PROCEDURE(BOOL forwardScan, BOOL select)

lineno         LONG
lineStart      LONG
lineRetry      LONG
anchor         LONG
nextLine       LONG

  CODE
      lineno = GetCurrentLineNumber()
           anchor = SciControl.GetAnchor()
      IF forwardScan
           lineStart = lineno + 1                 !Scan starting from next line
           lineRetry = 0                                            !If not found, try from the beginning
                   nextLine = SciControl.MarkerNext(lineStart, BSHIFT(1,markerBookmark))
           ELSE
                   lineStart = lineno - 1                 !Scan starting from previous line
                   lineRetry = SciControl.GetLineCount()  !If not found, try from the end
                   nextLine = SciControl.MarkerPrevious(lineStart, BSHIFT(1,markerBookmark))
                END
           IF nextLine < 0
              IF forwardScan
                      nextLine = SciControl.MarkerNext(lineRetry, BSHIFT(1,markerBookmark))
                   ELSE
                      nextLine = SciControl.MarkerPrevious(lineRetry, BSHIFT(1,markerBookmark))
         END
      END
           IF nextLine < 0                           !No bookmark
                   MESSAGE('No bookmarks!','Warning',ICON:Exclamation)
           ELSIF nextLine = lineno                   !Only one, and already on it
                   MESSAGE('No more bookmarks!','Warning',ICON:Exclamation)
                ELSE
                        SciControl.EnsureVisibleEnforcePolicy(nextLine)
                   SciControl.GotoLine(nextLine)
                   IF select
                      SciControl.SetAnchor(anchor)
                   END
                END

[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
GetCurrentLineNumber PROCEDURE()

  CODE
      RETURN SciControl.LineFromPosition(SciControl.GetCurrentPos())
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
FixFileFolding PROCEDURE
i                    LONG
j                    LONG
thisFile             CSTRING(261)
thisLine             LONG
thisText             CSTRING(261)
thisFoldLevel        LONG
bInMap               BOOL(FALSE)
bInClassDeclaration  BOOL(FALSE)
bInProcedure         BOOL(FALSE)
bInOmit              BOOL(FALSE)
bInLoop              BOOL(FALSE)
bInRegion            BOOL(FALSE)
szOmitToken          CSTRING(265)

   CODE
      thisFoldLevel = 1024
      thisFile = SearchQueue.ResultQueue.SortName
      thisLine = 0
      AsciiFilename = thisFile
      OPEN(AsciiFile,ReadOnly+DenyNone)
      IF ~ERRORCODE()
         SET(AsciiFile)
         LOOP
            NEXT(AsciiFile)
            IF ERRORCODE()
               BREAK
            ELSE
               thisLine += 1
               IF bInOmit = TRUE
                  SciControl.SetFoldLevel(thisLine-1,thisFoldLevel)
                  thisText = UPPER(AsciiFile.Buffer)
                  IF INSTRING(szOmitToken,thisText,1)
                     bInOmit = FALSE
                     szOmitToken = ''
                     thisFoldLevel -= 1
                  END
                  CYCLE
               END

               thisText = UPPER(CLIP(LEFT(AsciiFile.Buffer)))
               IF thisText[1] = '!'
                  IF INSTRING('!REGION',thisText,1)
                     SciControl.SetFoldLevel(thisLine-1,BOR(thisFoldLevel,SC_FOLDLEVELHEADERFLAG))
                     bInRegion = TRUE
                     thisFoldLevel += 1
                     CYCLE
                  ELSIF INSTRING('!ENDREGION',thisText,1)
                     IF bInRegion = TRUE
                        SciControl.SetFoldLevel(thisLine-1,thisFoldLevel)
                        bInRegion = FALSE
                        thisFoldLevel -= 1
                        CYCLE
                     END
                  END
               END

               !remove comment
               IF AsciiFile.Buffer[1] = ' '
                  thisText = ' '
               ELSE
                  thisText = ''
               END
               i = INSTRING('!',AsciiFile.Buffer)
               IF i
                  thisText = thisText & UPPER(CLIP(LEFT(AsciiFile.Buffer[1 : i-1])))
               ELSE
                  thisText = thisText & UPPER(CLIP(LEFT(AsciiFile.Buffer)))
               END


               IF thisText[1 : 7] = ' OMIT('''
                  bInOmit = TRUE
                  i = INSTRING('''',thisText,1,8)
                  IF i > 8    !next line will GPF if it isn't
                     szOmitToken = thisText[8 : i-1]
                     SciControl.SetFoldLevel(thisLine-1,BOR(thisFoldLevel,SC_FOLDLEVELHEADERFLAG))
                     thisFoldLevel += 1
                  END   
               ELSIF thisText[1 : 10] = ' COMPILE('''
                  bInOmit = TRUE
                  i = INSTRING('''',thisText,1,11)
                  IF i > 11   !next line will GPF if it isn't
                     szOmitToken = thisText[11 : i-1]
                     SciControl.SetFoldLevel(thisLine-1,BOR(thisFoldLevel,SC_FOLDLEVELHEADERFLAG))
                     thisFoldLevel += 1
                  END

               !foldable elements that have no labels
               ELSIF thisText[1 : 4] = ' MAP' AND LEN(thisText) = 4
                  SciControl.SetFoldLevel(thisLine-1,BOR(thisFoldLevel,SC_FOLDLEVELHEADERFLAG))
                  bInMap = TRUE
                  thisFoldLevel += 1
               ELSIF thisText[1 : 8] = ' MODULE('
                  SciControl.SetFoldLevel(thisLine-1,BOR(thisFoldLevel,SC_FOLDLEVELHEADERFLAG))
                  thisFoldLevel += 1
                  bInClassDeclaration = TRUE

               ELSIF thisText = ' RECORD'
                  SciControl.SetFoldLevel(thisLine-1,BOR(thisFoldLevel,SC_FOLDLEVELHEADERFLAG))
                  thisFoldLevel += 1

               !window controls
               ELSIF thisText = ' GROUP' OR thisText[1 : 7] = ' GROUP(' OR thisText[1 : 7] = ' GROUP,'
                  SciControl.SetFoldLevel(thisLine-1,BOR(thisFoldLevel,SC_FOLDLEVELHEADERFLAG))
                  IF thisText[LEN(thisText)] = '.' OR thisText[LEN(thisText)-2 : LEN(thisText)] = 'END'
                     !don't bump level
                  ELSE
                     thisFoldLevel += 1
                  END
               ELSIF thisText[1 : 6] = ' MENU('
                  SciControl.SetFoldLevel(thisLine-1,BOR(thisFoldLevel,SC_FOLDLEVELHEADERFLAG))
                  thisFoldLevel += 1
               ELSIF thisText[1 : 9] = ' MENUBAR,'
                  SciControl.SetFoldLevel(thisLine-1,BOR(thisFoldLevel,SC_FOLDLEVELHEADERFLAG))
                  thisFoldLevel += 1
               ELSIF thisText[1 : 5] = ' OLE,'
                  SciControl.SetFoldLevel(thisLine-1,BOR(thisFoldLevel,SC_FOLDLEVELHEADERFLAG))
                  thisFoldLevel += 1
               ELSIF thisText[1 : 8] = ' OPTION(' OR thisText[1 : 8] = ' OPTION,'
                  SciControl.SetFoldLevel(thisLine-1,BOR(thisFoldLevel,SC_FOLDLEVELHEADERFLAG))
                  thisFoldLevel += 1
               ELSIF thisText[1 : 7] = ' SHEET,'
                  SciControl.SetFoldLevel(thisLine-1,BOR(thisFoldLevel,SC_FOLDLEVELHEADERFLAG))
                  thisFoldLevel += 1
               ELSIF thisText[1 : 5] = ' TAB(' OR thisText[1 : 5] = ' TAB,'
                  SciControl.SetFoldLevel(thisLine-1,BOR(thisFoldLevel,SC_FOLDLEVELHEADERFLAG))
                  thisFoldLevel += 1
               ELSIF thisText[1 : 9] = ' TOOLBAR,'
                  SciControl.SetFoldLevel(thisLine-1,BOR(thisFoldLevel,SC_FOLDLEVELHEADERFLAG))
                  thisFoldLevel += 1

               !execution control
               ELSIF thisText[1 : 7] = ' ACCEPT'
                  SciControl.SetFoldLevel(thisLine-1,BOR(thisFoldLevel,SC_FOLDLEVELHEADERFLAG))
                  thisFoldLevel += 1
               ELSIF thisText[1 : 6] = ' BEGIN'
                  SciControl.SetFoldLevel(thisLine-1,BOR(thisFoldLevel,SC_FOLDLEVELHEADERFLAG))
                  thisFoldLevel += 1
               ELSIF thisText[1 : 5] = ' CASE'
                  SciControl.SetFoldLevel(thisLine-1,BOR(thisFoldLevel,SC_FOLDLEVELHEADERFLAG))
                  thisFoldLevel += 1
               ELSIF thisText[1 : 8] = ' EXECUTE'
                  SciControl.SetFoldLevel(thisLine-1,BOR(thisFoldLevel,SC_FOLDLEVELHEADERFLAG))
                  thisFoldLevel += 1
               ELSIF thisText[1 : 3] = ' IF'
                  SciControl.SetFoldLevel(thisLine-1,BOR(thisFoldLevel,SC_FOLDLEVELHEADERFLAG))
                  IF thisText[LEN(thisText)] = '.' OR thisText[LEN(thisText)-3 : LEN(thisText)] = ';END'
                     !don't bump level
                  ELSE
                     thisFoldLevel += 1
                  END
               ELSIF thisText = ' LOOP'
                  SciControl.SetFoldLevel(thisLine-1,BOR(thisFoldLevel,SC_FOLDLEVELHEADERFLAG))
                  bInLoop = TRUE
                  thisFoldLevel += 1
               ELSIF thisText[1 : 6] = ' LOOP '
                  SciControl.SetFoldLevel(thisLine-1,BOR(thisFoldLevel,SC_FOLDLEVELHEADERFLAG))
                  thisFoldLevel += 1

               ELSIF thisText = ' ITEMIZE' OR thisText[1 : 9] = ' ITEMIZE(' OR thisText[1 : 9] = ' ITEMIZE,'
                  SciControl.SetFoldLevel(thisLine-1,BOR(thisFoldLevel,SC_FOLDLEVELHEADERFLAG))
                  thisFoldLevel += 1

               ELSIF bInLoop = TRUE AND (thisText[1 : 7] = ' UNTIL ' OR thisText[1 : 7] = ' WHILE ')
                  SciControl.SetFoldLevel(thisLine-1,thisFoldLevel)
                  thisFoldLevel -= 1
                  bInLoop = FALSE

               ELSIF thisText = ' END' OR thisText = ' .'
                  SciControl.SetFoldLevel(thisLine-1,thisFoldLevel)
                  thisFoldLevel -= 1
                  IF bInMap = TRUE
                     bInMap = FALSE
                  END
                  IF bInClassDeclaration = TRUE
                     bInClassDeclaration = FALSE
                  END

               !foldable elements that may have labels
               ELSE
                  thisText = CLIP(LEFT(thisText))
                  i = INSTRING(' ',thisText)
                  IF i
                     j = INSTRING('''',thisText)
                     IF j > 0 AND j < i
                        i = 0
                     END
                  END
                  !dbx.debugout('[' & i & '] ' & CLIP(LEFT(thisText[i+1 : LEN(thisText)])))
                  !IF i
                     thisText = CLIP(LEFT(thisText[i+1 : LEN(thisText)]))

                     !data structure
                     IF thisText = 'ITEMIZE' OR thisText[1 : 8] = 'ITEMIZE(' OR thisText[1 : 8] = 'ITEMIZE,'
                        SciControl.SetFoldLevel(thisLine-1,BOR(thisFoldLevel,SC_FOLDLEVELHEADERFLAG))
                        thisFoldLevel += 1

                     !entities
                     ELSIF thisText[1 : 6] = 'CLASS(' OR thisText[1 : 6] = 'CLASS,'
                        SciControl.SetFoldLevel(thisLine-1,BOR(thisFoldLevel,SC_FOLDLEVELHEADERFLAG))
                        IF thisText[LEN(thisText)] = '.' OR thisText[LEN(thisText)-2 : LEN(thisText)] = 'END'
                           !don't bump level
                        ELSE
                           thisFoldLevel += 1
                           bInClassDeclaration = TRUE
                        END
                     ELSIF thisText[1 : 9] = 'INTERFACE'  OR thisText[1 : 10] = 'INTERFACE(' OR thisText[1 : 10] = 'INTERFACE,'
                        SciControl.SetFoldLevel(thisLine-1,BOR(thisFoldLevel,SC_FOLDLEVELHEADERFLAG))
                        IF thisText[LEN(thisText)] = '.' OR thisText[LEN(thisText)-2 : LEN(thisText)] = 'END'
                           !don't bump level
                        ELSE
                           thisFoldLevel += 1
                           bInClassDeclaration = TRUE
                        END
                     ELSIF thisText = 'GROUP' OR thisText[1 : 6] = 'GROUP(' OR thisText[1 : 6] = 'GROUP,'
                        SciControl.SetFoldLevel(thisLine-1,BOR(thisFoldLevel,SC_FOLDLEVELHEADERFLAG))
                        IF thisText[LEN(thisText)] = '.' OR thisText[LEN(thisText)-2 : LEN(thisText)] = 'END'
                           !don't bump level
                        ELSE
                           thisFoldLevel += 1
                        END
                     ELSIF thisText = 'QUEUE' OR thisText[1 : 6] = 'QUEUE(' OR thisText[1 : 6] = 'QUEUE,'
                        SciControl.SetFoldLevel(thisLine-1,BOR(thisFoldLevel,SC_FOLDLEVELHEADERFLAG))
                        IF thisText[LEN(thisText)] = '.' OR thisText[LEN(thisText)-2 : LEN(thisText)] = 'END'
                           !don't bump level
                        ELSE
                           thisFoldLevel += 1
                        END

                     !views
                     ELSIF thisText = 'VIEW' OR thisText[1 : 5] = 'VIEW(' OR thisText[1 : 5] = 'VIEW,'
                        SciControl.SetFoldLevel(thisLine-1,BOR(thisFoldLevel,SC_FOLDLEVELHEADERFLAG))
                        thisFoldLevel += 1
                     ELSIF thisText[1 : 5] = 'JOIN('
                        SciControl.SetFoldLevel(thisLine-1,BOR(thisFoldLevel,SC_FOLDLEVELHEADERFLAG))
                        thisFoldLevel += 1

                     !windows
                     ELSIF thisText[1 : 12] = 'APPLICATION(' OR thisText[1 : 12] = 'APPLICATION,'
                        SciControl.SetFoldLevel(thisLine-1,BOR(thisFoldLevel,SC_FOLDLEVELHEADERFLAG))
                        thisFoldLevel += 1
                     ELSIF thisText[1 : 7] = 'WINDOW(' OR thisText[1 : 7] = 'WINDOW,'
                        SciControl.SetFoldLevel(thisLine-1,BOR(thisFoldLevel,SC_FOLDLEVELHEADERFLAG))
                        thisFoldLevel += 1

                     !files
                     ELSIF thisText[1 : 5] = 'FILE,'
                        SciControl.SetFoldLevel(thisLine-1,BOR(thisFoldLevel,SC_FOLDLEVELHEADERFLAG))
                        thisFoldLevel += 1
                     ELSIF thisText[1 : 6] = 'RECORD'
                        SciControl.SetFoldLevel(thisLine-1,BOR(thisFoldLevel,SC_FOLDLEVELHEADERFLAG))
                        thisFoldLevel += 1

                     !reports
                     ELSIF thisText = 'REPORT' OR thisText[1 : 7] = 'REPORT(' OR thisText[1 : 7] = 'REPORT,'
                        SciControl.SetFoldLevel(thisLine-1,BOR(thisFoldLevel,SC_FOLDLEVELHEADERFLAG))
                        thisFoldLevel += 1
                     ELSIF thisText[1 : 6] = 'BREAK('
                        SciControl.SetFoldLevel(thisLine-1,BOR(thisFoldLevel,SC_FOLDLEVELHEADERFLAG))
                        thisFoldLevel += 1
                     ELSIF thisText = 'DETAIL' OR thisText[1 : 7] = 'DETAIL,'
                        SciControl.SetFoldLevel(thisLine-1,BOR(thisFoldLevel,SC_FOLDLEVELHEADERFLAG))
                        thisFoldLevel += 1
                     ELSIF thisText = 'FORM' OR thisText[1 : 5] = 'FORM,'
                        SciControl.SetFoldLevel(thisLine-1,BOR(thisFoldLevel,SC_FOLDLEVELHEADERFLAG))
                        thisFoldLevel += 1
                     ELSIF thisText = 'FOOTER' OR thisText[1 : 7] = 'FOOTER,'
                        SciControl.SetFoldLevel(thisLine-1,BOR(thisFoldLevel,SC_FOLDLEVELHEADERFLAG))
                        thisFoldLevel += 1
                     ELSIF thisText = 'HEADER' OR thisText[1 : 7] = 'HEADER,'
                        SciControl.SetFoldLevel(thisLine-1,BOR(thisFoldLevel,SC_FOLDLEVELHEADERFLAG))
                        thisFoldLevel += 1

                     !procedures, functions and routines
                     ELSIF thisText = 'PROCEDURE' OR thisText[1 : 10] = 'PROCEDURE(' OR thisText[1 : 10] = 'PROCEDURE '  OR  |
                           thisText = 'FUNCTION'  OR thisText[1 : 9]  = 'FUNCTION('  OR thisText[1 : 9]  = 'FUNCTION '   OR  |
                           thisText[1 : 7] = 'ROUTINE'
                        IF bInMap = FALSE AND bInClassDeclaration = FALSE
                           IF bInProcedure
                              SciControl.SetFoldLevel(thisLine-2,thisFoldLevel)
                              !thisFoldLevel -= 1
                              thisFoldLevel = 0400h
                              SciControl.SetFoldLevel(thisLine-1,BOR(thisFoldLevel,SC_FOLDLEVELHEADERFLAG))
                           ELSE
                              SciControl.SetFoldLevel(thisLine-1,BOR(thisFoldLevel,SC_FOLDLEVELHEADERFLAG))
                              bInProcedure = TRUE
                           END
                           thisFoldLevel += 1
                        ELSE
                           SciControl.SetFoldLevel(thisLine-1,thisFoldLevel)
                        END
                     ELSE
                        SciControl.SetFoldLevel(thisLine-1,thisFoldLevel)
                     END
                  !ELSE
                  !   SciControl.SetFoldLevel(thisLine-1,thisFoldLevel)
                  !END
               END
            END
         END
         CLOSE(AsciiFile)
      ELSE
         !error opening file
      END
      RETURN
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
ConfirmAutoSave PROCEDURE() !,LONG
ReturnValue                   LONG(0)

MyWindow WINDOW('Confirm AutoSave'),AT(,,350,42),CENTER,GRAY,FONT('Segoe UI',10)
        IMAGE('warning.ico'),AT(5,5,18,16),USE(?imgSave),CENTERED
        PROMPT('Warning: AutoSave is enabled.  Changes to the current file have ' & |
                'been detected and it is about to be saved.  Would you like to s' & |
                'ave the changes to the current file?'),AT(30,5,317,16), |
                USE(?Prompt:Message)
        BUTTON('Yes'),AT(210,26,43,11),USE(?cmdYes),DEFAULT
        BUTTON('No'),AT(258,26,43,11),USE(?cmdNo)
        CHECK(' Enable AutoSave'),AT(30,26,,11),USE(glo:bAutoSave)
    END

   CODE
   OPEN(MyWindow)
   CorrectForOffscreen(MyWindow)
   ACCEPT
     CASE EVENT()
       OF EVENT:CloseDown
          POST(EVENT:CloseWindow,,1)
       OF EVENT:CloseWindow
          glo:bShowAutoSaveWarning = FALSE
          BREAK
       OF EVENT:Accepted
          CASE ACCEPTED()
            OF ?cmdYes
               ReturnValue = BUTTON:YES
               POST(EVENT:CloseWindow)
            OF ?cmdNo
               ReturnValue = BUTTON:NO
               POST(EVENT:CloseWindow)
          END
     END
   END
   CLOSE(MyWindow)

   RETURN ReturnValue
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
GetSearchSubdirectories PROCEDURE() !,LONG
ReturnValue                   LONG(0)

MyWindow WINDOW('Search Subdirectories'),AT(,,350,42),CENTER,GRAY,FONT('Segoe UI',10)
        IMAGE('help.ico'),AT(5,5,18,16),USE(?imgHelp),CENTERED
        PROMPT('Your search did not return any results and the Search Subdirecto' & |
                'ries option was not checked.<13,10>Would you like to try your s' & |
                'earch again with  the Search Subdirectories option checked?'), |
                AT(30,5,317,16),USE(?Prompt:Message)
        BUTTON('No'),AT(258,26,43,11),USE(?cmdNo),DEFAULT
        BUTTON('Yes'),AT(210,26,43,11),USE(?cmdYes)
        CHECK(' Do not show this message again.'),AT(30,26,,11),USE(glo:bDontShowSubdirectoryWarning)
    END

   CODE
   OPEN(MyWindow)
   CorrectForOffscreen(MyWindow)
   ACCEPT
     CASE EVENT()
       OF EVENT:CloseDown
          POST(EVENT:CloseWindow,,1)
       OF EVENT:CloseWindow
          BREAK
       OF EVENT:Accepted
          CASE ACCEPTED()
            OF ?cmdYes
               ReturnValue = BUTTON:YES
               POST(EVENT:CloseWindow)
            OF ?cmdNo
               ReturnValue = BUTTON:NO
               POST(EVENT:CloseWindow)
          END
     END
   END
   CLOSE(MyWindow)

   RETURN ReturnValue
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
AutoSizer.Reset   PROCEDURE(SIGNED ListControl, QUEUE ListQueue)
   CODE
      SELF.Kill()
      SELF.Init()
      SELF.AddListBox(ListControl,ListQueue)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
!========================================================================================
ResultList::WndProc PROCEDURE(HWND hWnd, UNSIGNED wMsg, UNSIGNED wParam, LONG lParam)
!========================================================================================
WHEEL_DELTA    EQUATE(120)
Distance       SHORT
NewSize        SHORT

    CODE
    CASE wMsg
    OF WM_MOUSEWHEEL
       IF BAND(wParam,MK_CONTROL)
          Distance = BSHIFT(BAND(wParam,0FFFF0000h),-16)
          NewSize = feqResultList{PROP:FontSize} + Distance/WHEEL_DELTA
          IF NewSize < 4
             NewSize = 4
          ELSIF NewSize > 36
             NewSize = 36
          END
          feqResultList{PROP:FontSize} = NewSize
          feqResultList{PROP:LineHeight} = NewSize
          glo:ResultListFontSize = NewSize
          RETURN 0
       END
    END
    RETURN(kcr_CallWindowProc(ResultList::OrigWndProc,hWnd,wMsg,wParam,lParam))
[END]
EMBED %WindowEventHandling
[INSTANCES]
WHEN 'AlertKey'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
 CASE KEYCODE()
   OF UpKey
      IF ListWithFocus = -1
         SciControl.LineScrollUp()
      ELSE
        FORWARDKEY(ListWithFocus)
      END
   OF DownKey
      IF ListWithFocus = -1
         SciControl.LineScrollDown()
      ELSE
        FORWARDKEY(ListWithFocus)
      END
   OF PgUpKey
      IF ListWithFocus = -1
         SciControl.PageUp()
      ELSE
        FORWARDKEY(ListWithFocus)
      END
   OF PgDnKey
      IF ListWithFocus = -1
         SciControl.PageDown()
      ELSE
        FORWARDKEY(ListWithFocus)
      END
   OF CtrlPgUp
      IF ListWithFocus = -1
         SciControl.DocumentStart()
      ELSE
        FORWARDKEY(ListWithFocus)
      END
   OF CtrlPgDn
      IF ListWithFocus = -1
         SciControl.DocumentEnd()
      ELSE
        FORWARDKEY(ListWithFocus)
      END
   OF CtrlHome
      IF ListWithFocus = -1
         SciControl.DocumentStart()
      ELSE
        FORWARDKEY(ListWithFocus)
      END
   OF CtrlEnd
      IF ListWithFocus = -1
         SciControl.DocumentEnd()
      ELSE
        FORWARDKEY(ListWithFocus)
      END
   OF CtrlShiftHook
      SETCLIPBOARD(glo:findstrCommandLine)
   OF AltDelete
      POST(EVENT:Accepted,?cmdDeleteFile)
   OF CtrlDelete
      POST(EVENT:Accepted,?cmdFindAndDelete)
   OF glo:PlusKey
      POST(EVENT:Accepted,?cmdNextLine)
   OF glo:MinusKey
      POST(EVENT:Accepted,?cmdPreviousLine)
   OF CtrlShiftBar
      DO HandleCenterBar
!  OF ShiftF11
!     DO CreateRestorePoint
 END
[END]
WHEN 'DoResize'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
 IF glo:bHideEditPanel = TRUE
    SciControl.SetHide(TRUE)
 END
 DO HandleResize
[END]
WHEN 'CloseWindow'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2500
PROPERTY:END
 IF KEYCODE() = EscKey
    SETKEYCODE(0)
    IF FOCUS() = ?ResultList
       POST(EVENT:Accepted,?cmdSearch)
    END
    CYCLE
 ELSE
    IF szInstallProgram <> ''
       !loop check for other running copies before installing
       buttonPressed = BUTTON:RETRY
       LOOP WHILE GetRunningCopyCount() > 1
          buttonPressed = MESSAGE('Please close all other running copies of Kwik Source Search.|Press RETRY to try again or CANCEL to abort the installation process.','Warning Other Copies Running',ICON:Exclamation,BUTTON:RETRY+BUTTON:CANCEL,BUTTON:RETRY)
          IF buttonPressed = BUTTON:CANCEL
             BREAK
          END
       END
       IF buttonPressed = BUTTON:RETRY
          glo:szInstallProgram = szInstallProgram
          glo:szNull = ''
          glo:bInstallOnExit = TRUE
       END
    END
 END
[END]
WHEN 'CloseDown'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2500
PROPERTY:END
szInstallProgram = ''
POST(EVENT:CloseWindow)
[END]
WHEN 'Timer'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
 IF ListWithFocus = ?ResultList
    IF EditPaneRefreshPending AND NOT INRANGE(CLOCK(), LastNavTime, LastNavTime + 15)
       Window{PROP:Timer} = 0
       DO RefreshEditPane
    END
 END
[END]
WHEN 'GainFocus'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
!dbx.debugout('ListWithFocus = ' & ListWithFocus)
!IF ListWithFocus = -1
!   SciControl.GrabFocus()
!ELSE
!   SELECT(?ResultList)
!END
[END]
[END]
EMBED %ControlHandling
[INSTANCES]
WHEN '?SplitterBar'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6800
PROPERTY:END
OF EVENT:MouseDown
  ?SplitterBar{PROP:Fill} = COLOR:BLUE
  bTrackMouse = TRUE
[END]
WHEN '?sciControl:Region'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6800
PROPERTY:END

[END]
[END]
EMBED %LocalDataAfterClasses
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
AutoSizer            CLASS(AutoSizeColumnClassType)
Reset                   PROCEDURE(SIGNED ListControl,QUEUE ListQueue)
                     END

bControlInitialised  BOOL(FALSE)
[END]
EMBED %SciMethodCodeSection
[INSTANCES]
WHEN '4'
[INSTANCES]
WHEN 'TakeEvent'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2500
PROPERTY:END
    CASE EVENT()
      OF EVENT:AlertKey
         CASE KEYCODE()
           OF UpKey
              IF ListWithFocus = -1
                 SELF.GotoLine(GetCurrentLineNumber()-1)
                 SELF.Home()
              END
           OF DownKey
              IF ListWithFocus = -1
                 SELF.GotoLine(GetCurrentLineNumber()+1)
                 SELF.Home()
              END
           !OF F5Key
           !   redoSearch = TRUE
           !   SELECT(?ResultList)
           !   POST(EVENT:Accepted,?cmdSearch)
           OF F3Key OROF CtrlF
              IF ListWithFocus = -1
                 FindGroup = SearchQueue.FindGroup
                 SELF.SetFindGroup(FindGroup)
                 !FindGroup = SELF.GetFindGroup()

                 IF FindGroup.What = '' OR KEYCODE() = CtrlF
                    IF SELF.GetSelectionStart() <> SELF.GetSelectionEnd()
                       SELF.GetSelText(FindGroup.What)
                       SELF.SetFindWhat(FindGroup.What)
                    END
                    SELF.SearchAsk(TRUE,oHH)
                 ELSE
                   IF FindGroup.Direction = 'Down'
                      SELF.GoToPos(SELF.GetCurrentPos() + (LEN(FindGroup.What) + 1))
                   ELSE
                      SELF.GoToPos(SELF.GetCurrentPos() - 1)
                   END
                   SELF.SetAnchor(SELF.GetCurrentPos())
                   IF SELF.SearchNext(FindGroup) = INVALID_POSITION
                      IF FindGroup.Direction = 'Down'
                         SELF.SetCurrentPos(0)
                         SELF.SetAnchor(0)
                         SELF.GotoPos(0)
                         lFoundPosition = SELF.SearchNext(FindGroup)
                      ELSE
                         SELF.SetCurrentPos(SELF.GetLength())
                         SELF.SetAnchor(SELF.GetLength())
                         SELF.GotoPos(SELF.GetLength())
                         lFoundPosition = SELF.SearchNext(FindGroup)
                      END
                   END

                   SELF.SetSel(SELF.GetCurrentPos(),SELF.GetCurrentPos() + LEN(FindGroup.What))
                 END
              END
         ELSE
            ReturnValue = PARENT.TakeEvent()
         END
    ELSE
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7500
PROPERTY:END
   END
   CASE EVENT()
      OF EVENT:AlertKey
         CASE KEYCODE()
           OF CtrlF2       !Toggle Bookmark
              BookmarkToggle(-1)
           OF CtrlShiftF2  !Clear All Bookmarks
              SciControl.MarkerDeleteAll(markerBookmark)
           OF F2Key        !Next Bookmark
              BookmarkNext(TRUE,FALSE)
           OF ShiftF2      !Previous Bookmark
              BookmarkNext(FALSE,FALSE)
           OF CtrlE
              POST(EVENT:Accepted,?cmdEdit)
           OF CtrlL
              SELF.Copy()
              SETCLIPBOARD('<060h,13,10>' & CLIPBOARD() & '<13,10,060h>')
           OF CtrlK
              SELF.Copy()
              SETCLIPBOARD('{{code}<13,10>' & CLIPBOARD() & '<13,10>{{code}')
           OF CtrlS
              SELF.SaveFile(szTitle)
           OF CtrlShiftS
              SELF.SaveFileAs(szTitle)
           OF CtrlR        !Replace
              SELF.ReplaceAsk()
           OF CtrlShiftM   !Toggle Fold
              SELF.ToggleFold(GetCurrentLineNumber())
           OF CtrlShiftT   !Toggle All Folds
              SELF.FoldAll()
         END
      OF SCEN_CHANGE
         IF glo:SplitterOrientation = SplitterOrientation:Vertical
            IF SELF.GetModify() AND szTitle <> ''
               ENABLE(?cmdSaveWarn)
            ELSE
               DISABLE(?cmdSaveWarn)
            END
            IF glo:bHideEditPanel = FALSE
               UNHIDE(?cmdSaveWarn)
            END
         ELSE
            IF SELF.GetModify() AND szTitle <> ''
               ENABLE(?cmdSaveWarn:2)
            ELSE
               DISABLE(?cmdSaveWarn:2)
            END
            IF glo:bHideEditPanel = FALSE
               UNHIDE(?cmdSaveWarn:2)
            END
         END
      OF SCEN_SETFOCUS
         ListWithFocus = -1
         Window{Prop:StatusText,2} = 'EDITOR'
      OF SCEN_KILLFOCUS
         !do nothing
      OF SCN_UPDATEUI
         IF SELF.Updated = SC_UPDATE_V_SCROLL
            SELF.SetFocus(TRUE)
         END
      OF SCN_MARGINCLICK
         FoldMarginClicked = TRUE
         SELF.ToggleFold(SELF.LineFromPosition(SELF.MarginClickPosition))
      OF SCN_HOTSPOTCLICK        |
      OROF  SCN_HOTSPOTDOUBLECLICK
         WordEndPosition = SELF.WordEndPosition(SELF.HotSpotClickPosition, 0)
         WordStartPosition = SELF.WordStartPosition(SELF.HotSpotClickPosition, 0)
         SELF.SetCurrentPos(WordStartPosition)
         SELF.SetAnchor(WordEndPosition)
         SELF.GetSelText(szHotClickWord)
         SELF.SetSel(SELF.HotSpotClickPosition,SELF.HotSpotClickPosition)
         !SELF.SetSel(WordStartPosition,WordEndPosition)
         URLEncode(szHotClickWord, szEncodedHotClickWord)
         CASE SELF.GetLexer()
           OF SCLEX_CLWNOCASE OROF SCLEX_CLARION
              IF glo:szClarionHelpFile <> ''
                 IF oHH &= NULL
                    oHH &= NEW tagHTMLHelp
                    oHH.Init(glo:szClarionHelpFile)
                 ELSE
                    oHH.SetHelpFile(glo:szClarionHelpFile)
                 END
                 oHH.KeyWordLookup(szHotClickWord)
                 oHH.SetHelpFile( 'kss.chm' )
                 SELECT(?sciControl:Region)
              END
           OF SCLEX_CPP OROF SCLEX_CPPNOCASE
              CASE UPPER(SearchQueue.ResultQueue.szExtension)
                OF '.CS'
                   szURL = 'http://social.msdn.microsoft.com/search/en-us?query=' & szEncodedHotClickWord & ' (C%23)#)'
                OF '.JAVA' OROF '.JAD' OROF '.PDE' OROF '.JS' OROF '.ES'
                   szURL = 'http://social.msdn.microsoft.com/search/en-us?query=' & szEncodedHotClickWord & ' (JAVA)'
              ELSE
                   szURL = 'http://social.msdn.microsoft.com/search/en-us?query=' & szEncodedHotClickWord & ' (C++)'
              END
           OF SCLEX_VB OROF SCLEX_VBSCRIPT
              szURL = 'http://social.msdn.microsoft.com/search/en-us?query=' & szEncodedHotClickWord & ' (VB)'
           OF SCLEX_PYTHON
              szURL = 'http://social.msdn.microsoft.com/search/en-us?query=' & szEncodedHotClickWord & ' (PYTHON)'
           OF SCLEX_SQL
              szURL = 'http://search.oracle.com/search/search?num=10&q=' & szEncodedHotClickWord & '+SYNTAX&group=Documentation&sw=t&search_p_main_operator=all&search_p_op=equals'
              !szURL = 'http://social.msdn.microsoft.com/search/en-us?query=' & szEncodedHotClickWord & ' (SQL)'
           OF SCLEX_MSSQL
              szURL = 'http://social.msdn.microsoft.com/search/en-us?query=' & szEncodedHotClickWord & ' (MSSQL)' !& '"'
           OF SCLEX_MYSQL
              szURL = 'http://search.oracle.com/search/search?num=10&q=' & szEncodedHotClickWord & '+SYNTAX&group=Documentation&group=MySQL&sw=t&search_p_main_operator=all&search_p_op=equals'
           ELSE
              szURL = 'http://social.msdn.microsoft.com/search/en-us?query=' & szEncodedHotClickWord !& '"'
         END
         CASE SELF.GetLexer()
           OF SCLEX_CLWNOCASE OROF SCLEX_CLARION
              ! all done
         ELSE
              szNull = ''
              kcr_ShellExecute(SELF.GetHwnd(),0,szURL,0,szNull,1)
         END
   END
[END]
[END]
WHEN 'Init'
[INSTANCES]
WHEN '(*WINDOW W,LONG feq,UNSIGNED id,BOOL Themed = 0),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2500
PROPERTY:END
ReturnValue = PARENT.Init(W,feq,id,TRUE)
OMIT('ReturnValue')
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7500
PROPERTY:END
SELF.Style = glo:ViewerStyles
SELF.ResetPopupMenu()
[END]
[END]
WHEN 'OpenFile'
[INSTANCES]
WHEN '(*CSTRING szFileName),BOOL'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7500
PROPERTY:END
SELF.SetLexerType(SearchQueue.ResultQueue.SortName)
SELF.SetScrollWidthTracking(TRUE)
SELF.SetXCaretPolicy(CARET_SLOP,20)
SELF.SetYCaretPolicy(BOR(CARET_STRICT,BOR(CARET_SLOP,CARET_EVEN)),1)
SELF.SetVisiblePolicy(VISIBLE_SLOP,0)
SELF.SetEOLMode(SC_EOL_CRLF)
!SELF.SetCaretLineBack(COLOR:BLUE)
!SELF.SetCaretLineVisible(TRUE)
Window{PROP:COLOR} = SciControl.StyleGetBack(32)
Window{PROP:StatusText,1} = 'Modified: ' & FORMAT(GetFileDate(szFileName),@D010) & ' ' & FORMAT(GetFileTime(szFileName),@T04)
[END]
[END]
WHEN 'SetAlerts'
[INSTANCES]
WHEN '()'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7500
PROPERTY:END
!SELF.W{PROP:Alrt,255} = F5Key        !RedoSearch
SELF.W{PROP:Alrt,255} = CtrlF2       !Toggle Bookmark
SELF.W{PROP:Alrt,255} = F2Key        !Next Bookmark
SELF.W{PROP:Alrt,255} = ShiftF2      !Previous Bookmark
SELF.W{PROP:Alrt,255} = CtrlShiftF2  !Clear All Bookmarks
SELF.W{PROP:Alrt,255} = CtrlE        !Send To
SELF.W{PROP:Alrt,255} = CtrlK        !Copy for Skype
SELF.W{PROP:Alrt,255} = CtrlL        !Copy for Slack
SELF.W{PROP:Alrt,255} = CtrlP        !Print
SELF.W{PROP:Alrt,255} = CtrlR        !Replace
SELF.W{PROP:Alrt,255} = CtrlS        !Save
SELF.W{PROP:Alrt,255} = CtrlShiftS   !Save As
SELF.W{PROP:Alrt,255} = CtrlShiftM   !Toggle Fold
SELF.W{PROP:Alrt,255} = CtrlShiftT   !Toggle All Folds
[END]
[END]
WHEN 'TakeContextMenu'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2500
PROPERTY:END
    IF SELF.bInitialised
       !message(SELF.GetStyleAt(SELF.GetCurrentPos()))
       ListWithFocus = -1
       Window{Prop:StatusText,2} = 'EDITOR'
       ReturnValue = Level:Benign
       lSelectionStart = SELF.GetSelectionStart()
       lSelectionEnd   = SELF.GetSelectionEnd()
       IF lSelectionStart = lSelectionEnd
          SELF.Popup.SetItemEnable('CutCtrlX',FALSE)
          SELF.Popup.SetItemEnable('CopyCtrlC',FALSE)
          SELF.Popup.SetItemEnable('CopyCtrlK',FALSE)
          SELF.Popup.SetItemEnable('CopyCtrlL',FALSE)
          SELF.Popup.SetItemEnable('Delete',FALSE)
       ELSE
          SELF.Popup.SetItemEnable('CutCtrlX',TRUE)
          SELF.Popup.SetItemEnable('CopyCtrlC',TRUE)
          SELF.Popup.SetItemEnable('CopyCtrlK',TRUE)
          SELF.Popup.SetItemEnable('CopyCtrlL',TRUE)
          SELF.Popup.SetItemEnable('Delete',TRUE)
       END
       IF CLIPBOARD()
          SELF.Popup.SetItemEnable('PasteCtrlV',TRUE)
       ELSE
          SELF.Popup.SetItemEnable('PasteCtrlV',FALSE)
       END
       IF SELF.GetFindWhat() = ''
          SELF.Popup.SetItemEnable('FindNext',FALSE)
       ELSE
          SELF.Popup.SetItemEnable('FindNext',TRUE)
       END
       SELF.Popup.SetIcon('HotSpotsEnabled',CHOOSE(glo:bHotSpotsEnabled,'Checkbox_on.ico','Checkbox_off.ico'))
       SELF.Popup.SetIcon('AutoSave',CHOOSE(glo:bAutoSave,'Checkbox_on.ico','Checkbox_off.ico'))
       SELF.Popup.SetIcon('HideResults',CHOOSE(glo:bHideResultsPanel,'Checkbox_on.ico','Checkbox_off.ico'))
       SELF.Popup.SetItemEnable('HideResults',CHOOSE(glo:bHideEditPanel=FALSE,TRUE,FALSE))

       AskResult = SELF.Popup.Ask()
       CASE AskResult
         OF 'Save'
            SELF.SaveFile(szTitle)
         OF 'SaveAs'
            IF SELF.SaveFileAs(szTitle)
               szTitle = SELF.szFileName
            END
         OF 'SendTo'
            IF SELF.GetModify() AND szTitle <> ''
               DO Handle_FileModified
            END
            IF szTitle <> ''
               szSendToFilename = szTitle
               POST(EVENT:Accepted,?cmdEdit)
            END

         OF 'Print'
            SELF.PrintAsk()
         OF 'CutCtrlX'
            SELF.Cut()
         OF 'CopyCtrlC'
            SELF.Copy()
         OF 'CopyCtrlK'
            SELF.Copy()
            SETCLIPBOARD('{{code}<13,10>' & CLIPBOARD() & '<13,10>{{code}')
         OF 'CopyCtrlL'
            SELF.Copy()
            SETCLIPBOARD('<060h,13,10>' & CLIPBOARD() & '<13,10,060h>')
         OF 'PasteCtrlV'
            SELF.Paste()
         OF 'Delete'
            SELF.SetTargetStart(SELF.GetSelectionStart())
            SELF.SetTargetEnd(SELF.GetSelectionEnd())
            cchReplace = SELF.ReplaceTarget(0,szNull)
         OF 'ToggleFoldCtrlShiftM'
            SELF.ToggleFold(GetCurrentLineNumber())
         OF 'ToggleAllFoldsCtrlShiftT'
            SELF.FoldAll()
         OF 'FoldMargin'
            SELF.FoldMargin()
         OF 'Find'
            SELF.SetFindGroup(SearchQueue.FindGroup)
            SELF.SearchAsk(TRUE,oHH)
         OF 'FindNext'
            SELF.SetFindGroup(SearchQueue.FindGroup)
            SELF.SearchAsk(FALSE,oHH)
         OF 'Replace'
            SELF.ReplaceAsk()
         OF 'ToggleBookmark'
            BookmarkToggle(-1)
         OF 'PreviousBookmark'
            BookmarkNext(FALSE,FALSE)
         OF 'NextBookmark'
            BookmarkNext(TRUE,FALSE)
         OF 'ClearAllBookmarks'
            SELF.MarkerDeleteAll(markerBookmark)
         OF 'HotSpotsEnabled'
            glo:bHotSpotsEnabled = 1 - glo:bHotSpotsEnabled
            SELF.Popup.SetIcon('HotSpotsEnabled',CHOOSE(glo:bHotSpotsEnabled,'Checkbox_on.ico','Checkbox_off.ico'))
            LoadLexerProperties(SELF,SearchQueue.szPropertyFile)
         OF 'AutoSave'
            glo:bAutoSave = 1 - glo:bAutoSave
            SELF.Popup.SetIcon('AutoSave',CHOOSE(glo:bAutoSave,'Checkbox_on.ico','Checkbox_off.ico'))
         OF 'HideResults'
            glo:bHideResultsPanel = 1 - glo:bHideResultsPanel
            SELF.Popup.SetIcon('HideResults',CHOOSE(glo:bHideResultsPanel,'Checkbox_on.ico','Checkbox_off.ico'))
            DO HandleHideResults
         OF 'GoTo'
            SELF.AskGotoLine()
       ELSE
            IF AskResult
               LOOP i = 1 TO RECORDS(FileModeQueue)
                  GET(FileModeQueue,i)
                  IF AskResult = FileModeQueue.FileMode
                     IF SELF.Popup.GetItemChecked(AskResult) = FALSE
                        PropertyFile = CLIP(FileModeQueue.FileMode)
                        szLexer = GetPropertyFileLexer(PropertyFile)
                        CASE GetLexerNumber(szLexer)
                          OF SCLEX_MSSQL OROF SCLEX_MYSQL OROF SCLEX_SQL
                             glo:sqlProperties = PropertyFile
                        END
                        SELF.SetLexer(FileModeQueue.nLexer,PropertyFile)
                     END
                     SELF.Popup.SetIcon(CLIP(FileModeQueue.FileMode),'check-green.ico')
                  ELSE
                     SELF.Popup.SetIcon(CLIP(FileModeQueue.FileMode),'')
                  END
               END
            END
            !IF AskResult
            !   MESSAGE(AskResult)
            !END
       END
       SELECT(?sciControl:Region)
    ELSE
       ReturnValue = Level:Fatal
    END
    SELF.SetSelectionStart(lSelectionStart)
    SELF.SetSelectionEnd(lSelectionEnd)

omit('ReturnValue')
[END]
[END]
WHEN 'TakeOpenWindow'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7500
PROPERTY:END
IF bControlInitialised
   SELF.UsePopup(FALSE)
   SELF.SetDefaults()
   !SELF.MarkerDefine(markerBookmark,SC_MARK_CIRCLE)
   SELF.SendMessage(SCI_SETSELECTIONMODE, SC_SEL_LINES, 0)

   INIMgr.Fetch('Global','Zoom',glo:Zoom)
   IF glo:Zoom < 0
      glo:Zoom += 1
      SELF.SetZoom(glo:Zoom)
      SELF.ZoomOut()
   ELSIF glo:Zoom > 0
      glo:Zoom -= 1
      SELF.SetZoom(glo:Zoom)
      SELF.ZoomIn()
   END
END
[END]
[END]
WHEN 'SetColors'
[INSTANCES]
WHEN '(*COLORGROUPTYPE color)'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7500
PROPERTY:END
SELF.MarkerSetBack(markerBookmark, glo:BookmarkBack)
SELF.SetSelBack(TRUE,glo:SelectedBack)
[END]
[END]
WHEN 'SetLexerType'
[INSTANCES]
WHEN '(STRING szFileType)'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2500
PROPERTY:END
LOOP i = 1 TO RECORDS(FileExtensionQueue)
   GET(FileExtensionQueue,i)
   p = 1
   LOOP n = 1 TO LEN(FileExtensionQueue.Extension)
      IF FileExtensionQueue.Extension[n] = '*'
         IF n = 1
            String2 = '^.*'
            p += 3
         ELSIF n = LEN(FileExtensionQueue.Extension)
            String2[p] = '.'
            p += 1
            String2[p] = '*'
            p += 1
            String2[p] = '$'
            p += 1
         ELSE
            String2[p] = '.'
            p += 1
            String2[p] = '*'
            p += 1
         END
      ELSIF FileExtensionQueue.Extension[n] = '.'
            String2[p] = '\'
            p += 1
            String2[p] = '.'
            p += 1
      ELSE
         String2[p] = FileExtensionQueue.Extension[n]
         p += 1
      END
   END
   IF String2[p-1] = '$'
      String2[p] = '<0>'
   ELSE
      String2[p] = '$'
      p += 1
      String2[p] = '<0>'
   END

   IF MATCH(UPPER(szFileType),UPPER(String2),Match:Regular)
      SELF.SetDefaultStyles()
      CASE FileExtensionQueue.nLexer
        OF SCLEX_MSSQL OROF SCLEX_MYSQL OROF SCLEX_SQL
           IF FileExtensionQueue.Extension = '*.SQL'
              IF glo:sqlProperties = ''
                 glo:sqlProperties = FileExtensionQueue.FileMode
              ELSE
                 szLexer = GetPropertyFileLexer(glo:sqlProperties)
                 FileExtensionQueue.nLexer = GetLexerNumber(szLexer)
                 FileExtensionQueue.FileMode = glo:sqlProperties
              END
           END
      END
      SELF.SetLexer(FileExtensionQueue.nLexer,FileExtensionQueue.FileMode)
      BREAK
   ELSE
      !cycle
   END
END

IF i > RECORDS(FileExtensionQueue)
   SELF.SetDefaultStyles()
   defaultLexer = GetPropertyFileLexer(glo:szDefaultPropertyFile)
   CASE defaultLexer
     OF 'clarion'
        nLexer = SCLEX_CLWNOCASE
     OF 'cpp'
        nLexer = SCLEX_CPP
     OF 'html'
        nLexer = SCLEX_HTML
   ELSE !text
       IF NUMERIC(defaultLexer)
          nLexer = defaultLexer
       ELSE
          nLexer = SCLEX_NULL
       END
   END
   SELF.SetLexer(defaultLexer,glo:szDefaultPropertyFile)
   FileExtensionQueue.FileMode = glo:szDefaultPropertyFile
END

LOOP i = 1 TO RECORDS(FileModeQueue)
   GET(FileModeQueue,i)
   IF FileModeQueue.FileMode = FileExtensionQueue.FileMode
      SELF.Popup.SetIcon(FileModeQueue.FileMode,'check-green.ico')
      !SELF.Popup.SetItemCheck(FileModeQueue.FileMode,TRUE)
   ELSE
      SELF.Popup.SetIcon(FileModeQueue.FileMode,'')
      !SELF.Popup.SetItemCheck(FileModeQueue.FileMode,FALSE)
   END
END
OMIT('PARENT.SetLexerType(szFileType)')
[END]
[END]
WHEN 'SetClarionLexer'
[INSTANCES]
WHEN '()'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2500
PROPERTY:END
!  SELF.SetClarionLexer('clarion')
!  RETURN
!Don't call PARENT
[END]
[END]
WHEN 'SetTextLexer'
[INSTANCES]
WHEN '()'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7500
PROPERTY:END
SELF.SetDefaultStyles()
SearchQueue.szPropertyFile = 'text'
IF LoadLexerProperties(SELF,'text')
   SELF.SetProperty(szProperty, szValue)
END
SELF.Colourise(0,-1)
[END]
[END]
WHEN 'Kill'
[INSTANCES]
WHEN '()'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2500
PROPERTY:END
SELF.ClearAll()
[END]
[END]
WHEN 'SetDefaults'
[INSTANCES]
WHEN '()'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7500
PROPERTY:END
SELF.SetDefaultStyles()
SELF.MarkerSetBack(markerBookmark,glo:BookmarkBack)
[END]
[END]
WHEN 'Colourise'
[INSTANCES]
WHEN '(LONG lStart,LONG lEnd)'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2500
PROPERTY:END
cc = SELF.GetProperty(szProperty,szPropertyValue)
SELF.bFoldMargin = 1 - szPropertyValue
sciControl.foldMargin()
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7500
PROPERTY:END
!CASE UPPER(SearchQueue.ResultQueue.szExtension)
!  OF '.CLA' OROF '.CLW' OROF '.TPL' OROF '.TPW'
IF SELF.GetLexer() = SCLEX_CLWNOCASE
   FixFileFolding()
END
Window{PROP:Color} = SELF.StyleGetBack(32)
[END]
[END]
WHEN 'SearchAsk'
[INSTANCES]
WHEN '(BOOL bShowWindow,tagHTMLHelp HTMLHelp)'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7500
PROPERTY:END
SELF.SetSel(SELF.GetCurrentPos(),SELF.GetCurrentPos() + LEN(SELF.GetFindWhat()))
SearchQueue.FindGroup = SELF.GetFindGroup()
PUT(SearchQueue)
[END]
[END]
WHEN 'PrintAsk'
[INSTANCES]
WHEN '()'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2500
PROPERTY:END
IF ListWithFocus <> ?ResultList
   PARENT.OnPrint(TRUE)
END
RETURN
!Don't call PARENT
[END]
[END]
WHEN 'GrabFocus'
[INSTANCES]
WHEN '()'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7500
PROPERTY:END
ListWithFocus = -1
Window{Prop:StatusText,2} = 'EDITOR'
[END]
[END]
WHEN 'FoldMargin'
[INSTANCES]
WHEN '()'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7500
PROPERTY:END
IF SELF.bFoldMargin
   SELF.Popup.SetItemCheck('FoldMargin',FALSE)
   SELF.Popup.SetIcon('FoldMargin','checkbox_on.ico')
   SELF.Popup.SetItemEnable('ToggleFoldCtrlShiftM',TRUE)
   SELF.Popup.SetItemEnable('ToggleAllFoldsCtrlShiftT',TRUE)
ELSE
   SELF.Popup.SetIcon('FoldMargin','checkbox_off.ico')
   SELF.Popup.SetItemEnable('ToggleFoldCtrlShiftM',FALSE)
   SELF.Popup.SetItemEnable('ToggleAllFoldsCtrlShiftT',FALSE)
END
[END]
[END]
WHEN 'FoldAll'
[INSTANCES]
WHEN '()'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2500
PROPERTY:END
IF SELF.bFoldMargin = TRUE
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7500
PROPERTY:END
END
[END]
[END]
WHEN 'ToggleFold'
[INSTANCES]
WHEN '(LONG lLine)'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2500
PROPERTY:END
IF SELF.bFoldMargin = TRUE
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7500
PROPERTY:END
END
[END]
[END]
WHEN 'GetModify'
[INSTANCES]
WHEN '(),BOOL'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7500
PROPERTY:END
SELF.Popup.SetItemEnable('Save',ReturnValue)
[END]
[END]
WHEN 'FindWindowTakeOpenWindow'
[INSTANCES]
WHEN '()'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7500
PROPERTY:END
IF NOT SELF.FindOptionsWindow &= NULL
   CorrectForOffScreen(SELF.FindOptionsWindow)
END
[END]
[END]
[END]
[END]
EMBED %SciMethodDataSection
[INSTANCES]
WHEN '4'
[INSTANCES]
WHEN 'TakeContextMenu'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
AskResult            CSTRING(33)
lSelectionStart      LONG
lSelectionEnd        LONG
cchReplace           LONG
i                    LONG
PropertyFile         CSTRING(256)
szLexer              CSTRING(33)
[END]
[END]
WHEN 'TakeOpenWindow'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
i                    LONG
j                    LONG
thisZoom             LONG
[END]
[END]
WHEN 'TakeEvent'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
caretPos                LONG
WordEndPosition         LONG,AUTO
WordStartPosition       LONG,AUTO
szHotClickWord          CSTRING(256)
szEncodedHotClickWord   CSTRING(512)
FindGroup               LIKE(FindGrp)
lFoundPosition          LONG
szURL                   CSTRING(256)
[END]
[END]
WHEN 'SetLexerType'
[INSTANCES]
WHEN '(STRING szFileType)'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
i              LONG
n              LONG
p              LONG
String2        CSTRING(256)
defaultLexer   CSTRING(256)
nLexer         LONG
szLexer        CSTRING(33)
[END]
[END]
WHEN 'Colourise'
[INSTANCES]
WHEN '(LONG lStart,LONG lEnd)'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
!M               LONG
!N               LONG
!P               LONG
!FirstLine       LONG
!LastLine        LONG
!thisLine        LONG
!thisFoldLevel   LONG
!thisClass       LONG
!LastClass       LONG
!SaveClass       LONG
!foldQ           QUEUE,PRE(foldQ)
!foldLine          LONG
!                END
cc              LONG
szProperty      CSTRING('fold')
szPropertyValue CSTRING(2)
[END]
[END]
WHEN 'OpenFile'
[INSTANCES]
WHEN '(*CSTRING szFileName),BOOL'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
dwResult             ULONG
osvi                 LIKE(OSVERSIONINFO)
[END]
[END]
WHEN 'SetTextLexer'
[INSTANCES]
WHEN '()'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
szProperty  CSTRING('fold')
szValue     CSTRING('0')
[END]
[END]
[END]
[END]
EMBED %NewMethodDataSection
[INSTANCES]
WHEN '4'
[INSTANCES]
WHEN 'CSciControl'
[INSTANCES]
WHEN '1'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
LABEL
PROPERTY:END
! =======================================================================================
! CSciViewer.SaveFile
! purpose:  get contents into Scintilla Control buffer and Save to a file
! inputs :  *CSTRING szFilename - Name of file to save
! outputs:  Scintilla Control is loaded with file contents
! returns:  BYTE
!           Level:Benign to indicate success
!           Level:Notify to indicate failure
! =======================================================================================
ReturnValue         BOOL,AUTO

lFileSize           LONG(0)

szExtension         CSTRING(33)
szMsgText           CSTRING(240)
szMsg_NoCanDo       CSTRING('Not possible.')

szFileExtension     CSTRING(33)

szAAFileName        CSTRING(256),STATIC
A_A                 FILE,DRIVER('DOS'),NAME(szAAFileName),PRE(AA),CREATE
Record                RECORD
Bytes                    STRING(65535)
                    END
                  END
[END]
WHEN '2'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
szSaveAsFilename     CSTRING(MAXPATH)
[END]
WHEN '4'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
LABEL
PROPERTY:END
! =======================================================================================
! SciControl.ReplaceAsk
! purpose:  Ask User what to look for and replace with.
!           Provides wrap around option if file limit reached
! inputs :
! outputs:  The given line is scrolled to the top of the window
! returns:
! =======================================================================================

! Static variables so that they persist
!======================================
WinInit             BYTE(FALSE),STATIC
WinXPos             SIGNED,AUTO,STATIC
WinYPos             SIGNED,AUTO,STATIC
FindGroup           LIKE(FindGrp),STATIC
ReplacementsString  CSTRING(65),STATIC
bInitFindGroup      BOOL(TRUE),STATIC
szReplaceWith       LIKE(FindGroup.What),STATIC

SearchFlags         LONG

OmitWindow          BYTE(FALSE)
Quit                BYTE(FALSE)
lCurrentPosition    LONG,AUTO
lFoundPosition      LONG,AUTO
lFoundNext          LONG,AUTO
I                   LONG,AUTO
J                   LONG,AUTO
P                   LONG,AUTO
buttonPressed       BOOL(FALSE)
lFirstVisibleLine   LONG
nReplacements       LONG
lSelectionStart     LONG
lSelectionEnd       LONG
cchReplace          LONG
bReplaceAfterFind   BOOL(FALSE)
szCurrentSelection  CSTRING(1024)

ReplaceOptions WINDOW('Replace'),AT(,,285,86),CENTER,GRAY,IMM,SYSTEM,HLP('Replace.htm'), |
            FONT('Segoe UI',10),ALRT(F12Key),DOUBLE
        PROMPT('Find What'),AT(5,5,40),USE(?FindWhat:Prompt)
        ENTRY(@s64),AT(55,5,135,10),USE(FindGroup.What,, ?FindGroup:What),IMM, |
                TIP('Enter the text to Find')
        PROMPT('Replace With'),AT(5,20),USE(?szReplaceWith:Prompt)
        ENTRY(@s64),AT(55,20,135,10),USE(szReplaceWith),IMM,TIP('Enter the Repla' & |
                'cement text')
        CHECK(' &Case Sensitive'),AT(5,32,92,10),USE(FindGroup.MatchCase,, ?MatchCase), |
                TIP('A match only occurs with text that matches the case of the ' & |
                'search string.')
        CHECK(' W&hole Word Only'),AT(5,42,92,10),USE(FindGroup.WholeWord,, ?WholeWord), |
                TIP('A match only occurs if the characters before and after are ' & |
                'not word characters.')
        CHECK(' Word &Start'),AT(5,52,92,10),USE(FindGroup.WordStart,, ?WordStart), |
                TIP('A match only occurs if the character before is not a word c' & |
                'haracter.')
        CHECK(' Regular E&xpression'),AT(5,62,92,10),USE(FindGroup.RegExp,, ?RegExp), |
                TIP('The search string should be interpreted as a regular expression.')
        CHECK(' &POSIX compatible'),AT(100,62,92,10),USE(FindGroup.POSIX,, ?POSIX), |
                DISABLE,TIP('Treat regular expression in a more POSIX compatible' & |
                ' manner<13><10>by interpreting bare ( and ) for tagged sections' & |
                ' rather than \( and \).')
        CHECK(' &Word Wrap'),AT(5,72,92,10),USE(FindGroup.bWordWrap,, ?bWordWrap)
        OPTION('Direction'),AT(100,32,92,25),USE(FindGroup.Direction),BOXED
            RADIO('&Up'),AT(114,42),USE(?Radio1),TIP('Search towards the start o' & |
                    'f the file'),VALUE('Up')
            RADIO('&Down'),AT(150,42),USE(?Radio2),TIP('Search towards the end o' & |
                    'f the file'),VALUE('Down')
        END
        BUTTON('Find &Next'),AT(196,4,84,14),USE(?cmdFindNext),TIP('Find the nex' & |
                't occurrance of the selected text')
        BUTTON('R&eplace'),AT(196,20,84,14),USE(?cmdReplace),DEFAULT
        BUTTON('Replace &All'),AT(196,36,84,14),USE(?cmdReplaceAll)
        BUTTON('Replace in Se&lection'),AT(196,52,84,14),USE(?cmdReplaceInSelection)
        BUTTON('Replace in &Results'),AT(196,68,84,14),USE(?cmdReplaceInResults)
        BUTTON('Cancel'),AT(196,84,84,14),USE(?CancelButton),HIDE,TIP('Cancel Re' & |
                'place mode and close the Replace window')
        STRING(@S32),AT(100,73,92),USE(ReplacementsString)
    END
[END]
WHEN '12'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
szProperty           CSTRING(256)
szPropertyValue      CSTRING(256)
[END]
[END]
[END]
[END]
EMBED %NewMethodCodeSection
[INSTANCES]
WHEN '4'
[INSTANCES]
WHEN 'CSciControl'
[INSTANCES]
WHEN '1'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
LABEL
PROPERTY:END
!SCI_GETTEXT(int length, char *text)
! This returns length-1 characters of text from the start of the document plus one terminating 0 character.
! To collect all the text in a document, use SCI_GETLENGTH to get the number of characters in the document (nLen),
! allocate a character buffer of length nLen+1 bytes, then call SCI_GETTEXT(nLen+1, char *text).
!If the text argument is 0 then the length that should be allocated to store the entire document is returned.
!If you then save the text, you should use SCI_SETSAVEPOINT to mark the text as unmodified.
    IF szFilename <> ''
       lFileSize = SELF.GetTextLength() + 1                   ! returns length with null terminator
       IF ~SELF.szTextBuffer &= NULL                          ! If we already have a buffer allocated
          ASSERT(0,eqDBG & 'DISPOSE szTextBuffer [' & ADDRESS(SELF.szTextBuffer) & ']')
          DISPOSE(SELF.szTextBuffer)                          !   dispose buffer
          SELF.szTextBuffer &= NULL                           !   clear reference
       END
       SELF.szTextBuffer &= NEW(CSTRING(lFileSize))           ! Create a buffer to hold the file
       ASSERT(0,eqDBG & 'NEW szTextBuffer [' & ADDRESS(SELF.szTextBuffer) & ']')
?      ASSERT(~SELF.szTextBuffer &= NULL)
       lFileSize = SELF.GetText(lFileSize,SELF.szTextBuffer)  ! Returns length without null terminator

       szAAFileName = szFileName
       SELF.szFileName &= szAAFileName

       LOOP
          CREATE(A_A)
          IF ~ERRORCODE()
             IF ~SELF.szTextBuffer &= NULL
                DO SaveFile
                SELF.SetSavePoint()
                POST(SCEN_CHANGE)
                ReturnValue = TRUE
                BREAK
             ELSE
                SELF.ErrorMgr.ThrowMessage(CSciViewerMsg:BufferAllocationError, lFileSize+1)
                ReturnValue = FALSE
                BREAK
             END
          ELSIF ERRORCODE() = NoAccessErr  !Access Denied
             IF SELF.ErrorMgr.ThrowFile(CSciViewerMsg:AccessDenied, CLIP(szAAFileName)) = Level:Benign
                IF FILEDIALOG('Save as ...',SELF.szFileName,'All Files (*.*)|*.*', FILE:Save + FILE:KeepDir + FILE:LongName)
                   CYCLE
                ELSE
                   SELF.SetSavePoint()
                   ReturnValue = FALSE
                   BREAK
                END
             ELSE
                SELF.SetSavePoint()
                ReturnValue = FALSE
                BREAK
             END
          ELSE
             SELF.ErrorMgr.ThrowFile(CSciViewerMsg:OpenFailed, CLIP(szAAFileName))
             ReturnValue = FALSE
             BREAK
          END
       END
   ELSE
      ReturnValue = FALSE
   END
   IF ReturnValue = TRUE
      Window{PROP:StatusText,1} = 'Modified: ' & FORMAT(GetFileDate(szFileName),@D010) & ' ' & FORMAT(GetFileTime(szFileName),@T04)
   END
   RETURN(ReturnValue)
 ! Exit Procedure

! Procedure Routines
!-------------------------------------------
SaveFile    ROUTINE
!-------------------------------------------
 DATA

lRecSize            LONG(0)                 ! Note new variables to keep track of bytes read
lBytesWritten       LONG(0)                 ! from file and Bytes written to buffer.
lBytes2Write        LONG(0)
lBytePtr            LONG(0)

 CODE                                      ! Enter Routine

    OPEN(A_A,WriteOnly+DenyAll)
    IF ~ERRORCODE()
       lBytesWritten = 0                                         ! We haven't written any bytes yet
       lFileSize  = SIZE(SELF.szTextBuffer) - 1
       lRecSize   = SIZE(AA:Bytes)

       ShowWaitCursor = TRUE
       SETCURSOR(CURSOR:Wait)

       LOOP
         IF (lBytesWritten + lrecSize >= lFileSize)                       ! If we have written up to or past the file size
            lBytes2Write = lFileSize - lBytesWritten                       ! Bytes to write to file is the last "partial" chunk
         ELSE
            lBytes2Write = lRecSize                                     ! Else the Byte to write is the full record
         END

         LOOP lBytePtr = 1 TO lBytes2Write                              ! Loop through the record
            A_A:Bytes[lBytePtr] = SELF.szTextBuffer[(lBytesWritten + lBytePtr)]   ! Storing the bytes
         END
         APPEND(A_A,lBytes2Write)

         lBytesWritten = lBytesWritten + lBytes2Write                        ! Increment the byte written
         IF (lBytesWritten >= lFileSize)                                  ! Break if we are up to the file size
            BREAK
         END
       END
       CLOSE(A_A)

       ShowWaitCursor = FALSE
       SETCURSOR()
    ELSE
       SELF.ErrorMgr.ThrowFile(CSciViewerMsg:OpenFailed, CLIP(szAAFileName))
    END
 EXIT
 !Exit Routine
[END]
WHEN '2'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
    szSaveAsFilename = szFilename
    IF FILEDIALOG('Save As ...',szSaveAsFilename,'*' & SearchQueue.ResultQueue.szExtension & '|*.*',BOR(BOR(FILE:Save,FILE:KeepDir),FILE:LongName))
       RETURN SELF.SaveFile(szSaveAsFilename)
    END
[END]
WHEN '3'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
    RETURN SELF.hWnd
[END]
WHEN '4'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
LABEL
PROPERTY:END
      IF SELF.bInitialised

         FindGroup = SearchQueue.FindGroup
         szReplaceWith = SearchQueue.szReplaceWith

         IF bInitFindGroup
            FindGroup.What = SELF.GetFindWhat()
            FindGroup.Direction = 'Down'
            FindGroup.MatchCase = FALSE
            FindGroup.WholeWord = FALSE
            FindGroup.WordStart = FALSE
            FindGroup.RegExp    = FALSE
            FindGroup.POSIX     = FALSE
            FindGroup.bWordWrap = TRUE
            bInitFindGroup      = FALSE
         END

         nReplacements = 0

         lCurrentPosition = SELF.GetCurrentPos()
         lFoundPosition = lCurrentPosition

         OmitWindow = FALSE

         LOOP
            IF ~OmitWindow
               OPEN(ReplaceOptions)
               IF WinInit
                  SETPOSITION(0,WinXPos,WinYPos)
               ELSE
                  GETPOSITION(0,WinXPos,WinYPos)
                  WinInit=True
               END
               !CorrectForOffScreen(ReplaceOptions)

               ACCEPT
                 CASE KEYCODE()
                 OF EscKey
                    Quit = TRUE
                    BREAK
                 END

                 CASE EVENT()
                 OF EVENT:AlertKey
                    CASE KEYCODE()
                      OF F12Key
                         oHH.ShowTopic('Replace.htm')
                    END

                 OF EVENT:CloseDown
                    POST(EVENT:CloseWindow)

                 OF EVENT:CloseWindow
                    SELF.FindWindowTakeCloseWindow()
!RR                    SELF.SetFindWhat(FindGroup.What)
                    IF buttonPressed = FALSE
                       Quit = TRUE
                    END

                 OF EVENT:OpenWindow
                    SELF.FindWindowTakeOpenWindow()
                    IF FindGroup.What = ''
                       SELF.GetSelText(FindGroup.What)
                       IF FindGroup.What = '' AND SearchQueue.bUseRegularExpressions = FALSE
                          FindGroup.What = SearchQueue.szPattern
                       END
                    END
                    !SELF.SetSelectionStart(SELF.GetCurrentPos())
                    !SELF.SetSelectionEnd(SELF.GetCurrentPos())
                    lFoundNext = INVALID_POSITION
                    DO UpdateWindow
                    SELECT(?FindGroup:What)

                 OF EVENT:Accepted
                    CASE FIELD()
                    OF ?FindGroup:What
                       UPDATE()
                       SELF.SetFindWhat(FindGroup.What)
                    OF ?szReplaceWith
                       DO UpdateWindow
                    OF ?MatchCase
                       DO UpdateWindow
                    OF ?WholeWord
                       DO UpdateWindow
                    OF ?WordStart
                       DO UpdateWindow
                    OF ?RegExp
                       DO UpdateWindow
                    OF ?POSIX
                       DO UpdateWindow
                    OF ?cmdFindNext
                       buttonPressed = ?cmdFindNext
                       POST(EVENT:CloseWindow)
                    OF ?cmdReplace
                       buttonPressed = ?cmdReplace
                       POST(EVENT:CloseWindow)
                    OF ?cmdReplaceAll
                       buttonPressed = ?cmdReplaceAll
                       POST(EVENT:CloseWindow)
                    OF ?cmdReplaceInSelection
                       buttonPressed = ?cmdReplaceInSelection
                       POST(EVENT:CloseWindow)
                    OF ?cmdReplaceInResults
                       buttonPressed = ?cmdReplaceInResults
                       POST(EVENT:CloseWindow)
                    OF ?CancelButton
                       Quit = TRUE
                       buttonPressed = ?CancelButton
                       POST(EVENT:CloseWindow)
                    END

                 OF EVENT:Moved
                    GETPOSITION(0,WinXPos,WinYPos)

                 OF EVENT:NewSelection
                    CASE FIELD()
                      OF ?FindGroup:What OROF ?szReplaceWith
                         DO UpdateWindow
                    END
                 END

               END   !ACCEPT

               CLOSE(ReplaceOptions)
            END ! IF ~OmitWindow

            OmitWindow=FALSE

            IF Quit
               BREAK
            ELSE
               CASE buttonPressed
                 OF ?cmdFindNext OROF ?cmdReplace

                    IF buttonPressed = ?cmdReplace
                       SELF.GetSelText(szCurrentSelection)
                       IF szCurrentSelection = FindGroup.What
                          SELF.ReplaceSel(szReplaceWith)
                          nReplacements = 1
                       ELSE
                          bReplaceAfterFind = TRUE
                       END
                    END

                    IF FindGroup.Direction = 'Down'
                       SELF.GoToPos(lFoundPosition + (LEN(szReplaceWith) + 1))
                    ELSE
                       SELF.GoToPos(lFoundPosition - 1)
                    END
                    SELF.SetAnchor(SELF.GetCurrentPos())


                    lFoundNext = SELF.SearchNext(FindGroup)
                    IF (lFoundNext = INVALID_POSITION)
                       IF FindGroup.bWordWrap = TRUE
                          IF FindGroup.Direction = 'Down'
                             lFoundPosition = 0
                          ELSE
                             lFoundPosition = SELF.GetLength()
                          END
                          SELF.GoToPos(lFoundPosition)
                          SELF.SetSel(lFoundPosition,lFoundPosition + LEN(FindGroup.What))
                          OmitWindow = TRUE
                       ELSE
                          BREAK
                       END
                    ELSIF lFoundPosition = -1
                       SELF.ErrorMgr.Throw('No more matches')
                    ELSE
                       lFoundPosition = lFoundNext
                       SELF.SetSel(lFoundPosition + LEN(FindGroup.What), lFoundPosition)
                       IF bReplaceAfterFind = TRUE
                          SELF.ReplaceSel(szReplaceWith)
                          nReplacements = 1
                          bReplaceAfterFind = FALSE
                       END
                       SELF.GrabFocus()
                    END

                 OF ?cmdReplaceAll
                    nReplacements = 0
                    SELF.SetAnchor(0)
                    LOOP
                       lFoundNext = SELF.SearchNext(FindGroup)
                       IF lFoundNext = -1
                          BREAK
                       ELSIF lFoundNext = INVALID_POSITION
                          BREAK
                       ELSE
                          lFoundPosition = lFoundNext
                          SELF.SetSel(lFoundPosition + LEN(FindGroup.What), lFoundPosition)
                          SELF.TargetFromSelection()
                          cchReplace =SELF.ReplaceTarget(LEN(szReplaceWith),szReplaceWith)
                          nReplacements += 1
                          SELF.SetAnchor(lFoundPosition + (LEN(szReplaceWith) + 1))
                          SELF.SetCurrentPos(SELF.GetAnchor())
                       END
                    END
                    SELF.GotoPos(lCurrentPosition)
                    SELF.SetAnchor(lCurrentPosition)
                    lFoundPosition = lCurrentPosition

                 OF ?cmdReplaceInSelection
                    lSelectionStart = SELF.GetSelectionStart()
                    lSelectionEnd   = SELF.GetSelectionEnd()

                    SearchFlags = 0
                    IF FindGroup.RegExp
                       SearchFlags = BOR(SearchFlags,SCFIND_REGEXP)
                       IF FindGroup.POSIX
                          SearchFlags = BOR(SearchFlags,SCFIND_POSIX)
                       END
                    ELSE
                       IF FindGroup.MatchCase
                          SearchFlags = BOR(SearchFlags,SCFIND_MATCHCASE)
                       END
                       IF FindGroup.WholeWord
                          SearchFlags = BOR(SearchFlags,SCFIND_WHOLEWORD)
                       END
                       IF FindGroup.WordStart
                          SearchFlags = BOR(SearchFlags,SCFIND_WORDSTART)
                       END
                    END
                    SELF.SetSearchFlags(SearchFlags)

                    nReplacements = 0
                    SELF.SetAnchor(SELF.GetSelectionStart())
                    SELF.TargetFromSelection()
                    LOOP
                       lFoundNext = SELF.SearchInTarget(LEN(FindGroup.What),FindGroup.What)
                       IF lFoundNext = -1
                          BREAK
                       ELSIF lFoundNext = INVALID_POSITION
                          BREAK
                       ELSE
                          lFoundPosition = lFoundNext
                          cchReplace = SELF.ReplaceTarget(LEN(szReplaceWith),szReplaceWith)
                          nReplacements += 1
                          SELF.SetAnchor(lFoundPosition + (LEN(szReplaceWith) + 1))
                          SELF.SetCurrentPos(SELF.GetAnchor())
                          SELF.SetTargetStart(SELF.GetCurrentPos())
                          SELF.SetTargetEnd(lSelectionEnd)
                       END
                    END
                    SELF.GotoPos(lCurrentPosition)
                    SELF.SetAnchor(lCurrentPosition)
                    SELF.SetSelectionStart(lSelectionStart)
                    SELF.SetSelectionEnd(lSelectionEnd)
                    lFoundPosition = lCurrentPosition

                 OF ?cmdReplaceInResults
                    !save view position
                    !lFirstVisibleLine = SELF.GetFirstVisibleLine()

                    !if current buffer has been modified, offer to save it first
                    IF SciControl.GetModify() AND szTitle <> ''
                       DO Handle_FileModified
                    END

                    !search and replace in result list lines
                    nReplacements = winReplaceInResults(FindGroup, szReplaceWith, SearchQueue.ResultQueue)

                    !Reload the Buffer
                    SELF.OpenFile(CurrentFilename)

                    SciControl.MarkerDeleteAll(markerBookmark)
                    !set bookmarks
                    p = CHOOSE(POINTER(SearchQueue.ResultQueue) > 0,POINTER(SearchQueue.ResultQueue),1)
                    GET(SearchQueue.ResultQueue,+SearchQueue.ResultQueue.SortName)
                    LOOP WHILE ((NOT ERRORCODE()) AND (SearchQueue.ResultQueue.SortName = CurrentFilename))
                       BookmarkAdd(SearchQueue.ResultQueue.LineNo-1)
                       GET(SearchQueue.ResultQueue,POINTER(SearchQueue.ResultQueue)+1)
                    END
                    GET(SearchQueue.ResultQueue,p)
                    ?ResultList{PROP:Selected} = p

                    POST(EVENT:GOTONEWLINE)
                    !SELF.SetFirstVisibleLine(lFirstVisibleLine)
                    !SELF.GoToLine(SearchQueue.ResultQueue.LineNo-1)

                    !SELF.GotoPos(lCurrentPosition)
                    !SELF.SetAnchor(lCurrentPosition)
                    !lFoundPosition = lCurrentPosition

               END
               buttonPressed = FALSE
               DO UpdateReplacementsString
            END
         END
         SearchQueue.FindGroup = FindGroup
         SearchQueue.szReplaceWith = szReplaceWith
         PUT(SearchQueue)
      END

      RETURN                                    ! Exit Procedure

UpdateReplacementsString   ROUTINE
   ReplacementsString = CLIP(LEFT(FORMAT(nReplacements,@N_13))) & ' Replacements'
   DISPLAY(?ReplacementsString)
   EXIT

UpdateWindow   ROUTINE
   UPDATE()
   ?cmdFindNext{PROP:Disable} = CHOOSE(FindGroup.What = '')
!   ?cmdReplace{PROP:Disable} = CHOOSE(FindGroup.What = '' OR szReplaceWith = '')
!   ?cmdReplaceAll{PROP:Disable} = CHOOSE(FindGroup.What = '' OR szReplaceWith = '')
!   ?cmdReplaceInSelection{PROP:Disable} = CHOOSE(FindGroup.What = '' OR szReplaceWith = '')
!   ?cmdReplaceInResults{PROP:Disable} = CHOOSE(FindGroup.What = '' OR szReplaceWith = '')
   ?cmdReplace{PROP:Disable} = CHOOSE(FindGroup.What = '')
   ?cmdReplaceAll{PROP:Disable} = CHOOSE(FindGroup.What = '')
   ?cmdReplaceInSelection{PROP:Disable} = CHOOSE(FindGroup.What = '')
   ?cmdReplaceInResults{PROP:Disable} = CHOOSE(FindGroup.What = '')

   IF FindGroup.MatchCase = TRUE |
   OR FindGroup.WholeWord = TRUE |
   OR FindGroup.WordStart = TRUE
      FindGroup.RegExp = FALSE
      FindGroup.POSIX  = FALSE
      DISABLE(?RegExp)
      DISABLE(?POSIX)
   ELSE
      ENABLE(?RegExp)
   END
   IF FindGroup.RegExp = TRUE
      DISABLE(?MatchCase,?WordStart)
      ENABLE(?POSIX)
   ELSE
      FindGroup.POSIX = FALSE
      DISABLE(?POSIX)
      ENABLE(?MatchCase,?WordStart)
   END
   DISPLAY(?MatchCase,?POSIX)
   DO UpdateReplacementsString
   EXIT
[END]
WHEN '9'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
!# Global default styles for all languages
!# Default
!style.*.32=$(font.base)
    SELF.StyleSetFont(STYLE_DEFAULT,baseFontName)
    SELF.StyleSetSize(STYLE_DEFAULT,baseFontSize)
    SELF.StyleSetBack(STYLE_DEFAULT,kcr_GetSysColor(COLOR_WINDOW))
    SELF.StyleClearAll()

!# Line number
!style.*.33=back:#C0C0C0,$(font.base)
    SELF.StyleSetFont(STYLE_LINENUMBER,baseFontName)
    SELF.StyleSetSize(STYLE_LINENUMBER,baseFontSize)
    SELF.StyleSetBack(STYLE_LINENUMBER,ColourRGB(192,192,192))

!# Brace highlight
!style.*.34=fore:#0000FF,bold
    SELF.StyleSetFore(STYLE_BRACELIGHT,ColourRGB(0,0,255))
    SELF.StyleSetBold(STYLE_BRACELIGHT,TRUE)

!# Brace incomplete highlight
!style.*.35=fore:#FF0000,bold
    SELF.StyleSetFore(STYLE_BRACEBAD,ColourRGB(255,0,0))
    SELF.StyleSetBold(STYLE_BRACEBAD,TRUE)

!# Control characters
!style.*.36=

!# Indentation guides
!style.*.37=fore:#C0C0C0,back:#FFFFFF
    SELF.StyleSetFore(STYLE_INDENTGUIDE,ColourRGB(192,192,192))
    SELF.StyleSetBack(STYLE_INDENTGUIDE,ColourRGB(255,255,255))

    RETURN
[END]
WHEN '11'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
SELF.Popup.Kill()
SELF.Popup.Init(INIMgr)
SELF.Popup.AddItem('Save<9>Ctrl+S','Save')
SELF.Popup.SetItemEnable('Save',FALSE)
SELF.Popup.AddItem('Save As<9>Ctrl+Shift+S','SaveAs')
SELF.Popup.AddItem('-','Separator0')
SELF.Popup.AddItem('Auto Save','AutoSave')
SELF.Popup.AddItem('-','Separator1')
SELF.Popup.AddItem('Send To<9>Ctrl+E','SendTo')
SELF.Popup.AddItem('Print<9>Ctrl+P','Print')
SELF.Popup.AddItem('-','EditMenuHere')
SELF.Popup.AddItem('Cut<9>Ctrl+X','CutCtrlX')
SELF.Popup.AddItem('Copy<9>Ctrl+C','CopyCtrlC')
SELF.Popup.AddItem('Copy for Skype<9>Ctrl+K','CopyCtrlK')
SELF.Popup.AddItem('Copy for Slack<9>Ctrl+L','CopyCtrlL')
SELF.Popup.AddItem('Paste<9>Ctrl+V','PasteCtrlV')
SELF.Popup.AddItem('Delete','Delete')
SELF.Popup.AddItem('-','FileModeMenuHere')
SELF.Popup.AddItem('-','FoldMenuHere')
SELF.Popup.AddItem('-','Separator2')
SELF.Popup.AddItem('Find<9>Ctrl+F','Find')
SELF.Popup.AddItem('Find Next<9>F3','FindNext')
SELF.Popup.AddItem('Replace<9>Ctrl+R','Replace')
SELF.Popup.AddItem('-','Separator3')
SELF.Popup.AddItem('Toggle Bookmark<9>Ctrl+F2','ToggleBookmark')
SELF.Popup.AddItem('Previous Bookmark<9>Shift+F2','PreviousBookmark')
SELF.Popup.AddItem('Next Bookmark<9>F2','NextBookmark')
SELF.Popup.AddItem('Clear All Bookmarks<9>Ctrl+Shift+F2','ClearAllBookmarks')
SELF.Popup.AddItem('Hot Spots Enabled','HotSpotsEnabled')
SELF.Popup.AddItem('-','Separator4')
SELF.Popup.AddItem('Go To Line Number<9>Ctrl+G','GoTo')
SELF.Popup.AddItem('-','Separator5')
SELF.Popup.AddItem('Hide Results List','HideResults')

FileModeMenu = LoadFileExtensionQueue(FileModeQueue)
SELF.Popup.AddSubMenu(FileModeMenu,'FileModeMenuHere')

SELF.Popup.AddSubMenu('Folding','{{Toggle Fold<9>Ctrl+Shift+M|Toggle All Folds<9>Ctrl+Shift+T|-|Fold Margin}','FoldMenuHere')
SELF.Popup.AddSubMenu('Move','{{Top<9>Ctrl+Home|Page Up<9>PgUp|Page Down<9>PgDn|Bottom<9>Ctrl+End}','GoTo')


SELF.Popup.DeleteItem('FoldMenuHere')
SELF.Popup.DeleteItem('FileModeMenuHere')

SELF.Popup.AddItemEvent('TopCtrlHome',EVENT:ScrollTop,SELF.feq)
SELF.Popup.AddItemEvent('PageUpPgUp',EVENT:PageUp,SELF.feq)
SELF.Popup.AddItemEvent('PageDownPgDn',EVENT:PageDown,SELF.feq)
SELF.Popup.AddItemEvent('BottomCtrlEnd',EVENT:ScrollBottom,SELF.feq)

SELF.Popup.SetIcon('Save','FileSave.ico')
SELF.Popup.SetIcon('SaveAs','SaveAs.ico')
SELF.Popup.SetIcon('SendTo','SendTo.ico')
SELF.Popup.SetIcon('Print','Print.ico')
SELF.Popup.SetIcon('CutCtrlX','Cut.ico')
SELF.Popup.SetIcon('CopyCtrlC','Copy.ico')
SELF.Popup.SetIcon('CopyCtrlK','Skype.ico')
SELF.Popup.SetIcon('CopyCtrlL','Slack.ico')
SELF.Popup.SetIcon('PasteCtrlV','Paste.ico')
SELF.Popup.SetIcon('Delete','Delete.ico')
SELF.Popup.SetIcon('Find','Find.ico')
SELF.Popup.SetIcon('FindNext','FindNext.ico')
SELF.Popup.SetIcon('Replace','Replace.ico')
SELF.Popup.SetIcon('ToggleBookmark','ToggleBookmark.ico')
SELF.Popup.SetIcon('PreviousBookmark','PreviousBookmark.ico')
SELF.Popup.SetIcon('NextBookmark','NextBookmark.ico')
SELF.Popup.SetIcon('ClearAllBookmarks','ClearAllBookmarks.ico')
SELF.Popup.SetIcon('HotSpotsEnabled',CHOOSE(glo:bHotSpotsEnabled,'Checkbox_on.ico','Checkbox_off.ico'))
SELF.Popup.SetIcon('AutoSave',CHOOSE(glo:bAutoSave,'Checkbox_on.ico','Checkbox_off.ico'))
SELF.Popup.SetIcon('HideResults',CHOOSE(glo:bHideResultsPanel,'Checkbox_on.ico','Checkbox_off.ico'))
[END]
WHEN '12'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
    IF SELF.GetLexer() <> Lexer
       SELF.SetLexer(Lexer)
       SearchQueue.szPropertyFile = PropertyFile
       IF LoadLexerProperties(SELF,PropertyFile)
          SELF.SetTextLexer()
       ELSE
          SELF.Colourise(0,-1)
       END
    ELSE
       SearchQueue.szPropertyFile = PropertyFile
       IF NOT LoadLexerProperties(SELF,PropertyFile)
          SELF.Colourise(0,-1)
       END
    END
[END]
[END]
[END]
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME SciTPL CSciControl
[INSTANCE]
INSTANCE 4
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('CSciControl')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('CSciControl') ('CSciControl')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('CSciControl') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('CSciControl') ('Colourise {14}PROCEDURE(LONG lStart,LONG lEnd),DERIVED', |
  'FindWindowTakeOpenWindow PROCEDURE(),DERIVED', 'FoldAll {16}PROCEDURE(),DERIVED', |
  'FoldMargin {13}PROCEDURE(),DERIVED', 'GetModify {14}PROCEDURE(),BOOL,DERIVED', |
  'GrabFocus {14}PROCEDURE(),DERIVED', 'Init {19}PROCEDURE(*WINDOW W,LONG feq,UNSIGNED id,BOOL Themed = 0),BYTE,DERIVED', |
  'Kill {19}PROCEDURE(),DERIVED', 'OpenFile {15}PROCEDURE(*CSTRING szFileName),BOOL,PROC,DERIVED', |
  'PrintAsk {15}PROCEDURE(),DERIVED', 'SearchAsk {14}PROCEDURE(BOOL bShowWindow,tagHTMLHelp HTMLHelp),DERIVED', |
  'SetAlerts {14}PROCEDURE(),DERIVED', 'SetClarionLexer        PROCEDURE(),DERIVED', |
  'SetColors {14}PROCEDURE(*COLORGROUPTYPE color),DERIVED', 'SetDefaults {12}PROCEDURE(),DERIVED', |
  'SetLexerType {11}PROCEDURE(STRING szFileType),DERIVED', 'SetTextLexer {11}PROCEDURE(),DERIVED', |
  'TakeContextMenu        PROCEDURE(),BYTE,DERIVED', 'TakeEvent {14}PROCEDURE(),BYTE,DERIVED', |
  'TakeOpenWindow {9}PROCEDURE(),BYTE,DERIVED', 'ToggleFold {13}PROCEDURE(LONG lLine),DERIVED')

%GenerateScintilla LONG  (1)
%ControlID DEFAULT  ('1004')
%NotificationEvent DEFAULT  ('EVENT:USER')
%GlobalObject DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('CSciControl') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('CSciControl') ('SciControl')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('CSciControl') (0)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('CSciControl') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('CSciControl') ('CSciViewer')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('CSciControl') (1)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 1
WHEN  ('CSciControl') (3, 4, 1, 2, 12, 9, 11)

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 1
WHEN  ('CSciControl')TIMES 7
WHEN  (1) ('SaveFile')
WHEN  (2) ('SaveFileAs')
WHEN  (3) ('GetHwnd')
WHEN  (4) ('ReplaceAsk')
WHEN  (9) ('SetDefaultStyles')
WHEN  (11) ('ResetPopupMenu')
WHEN  (12) ('SetLexer')

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 1
WHEN  ('CSciControl')TIMES 7
WHEN  (1) ('(*CSTRING szFilename),LONG,PROC')
WHEN  (2) ('(*CSTRING szFilename),LONG,PROC')
WHEN  (3) ('(),LONG')
WHEN  (4) ('()')
WHEN  (9) ('()')
WHEN  (11) ('()')
WHEN  (12) ('(LONG Lexer, *CSTRING PropertyFile),VIRTUAL')

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('CSciControl')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('CSciControl')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

[ADDITION]
NAME ABC WindowResize
[FIELDPROMPT]
%ResizeAnchorTop DEPEND %Control LONG TIMES 0

%ResizeAnchorLeft DEPEND %Control LONG TIMES 0

%ResizeAnchorRight DEPEND %Control LONG TIMES 0

%ResizeAnchorBottom DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowTop DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowLeft DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowRight DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowBottom DEPEND %Control LONG TIMES 0

[INSTANCE]
INSTANCE 1
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('WindowResizeClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(BYTE AppStrategy=AppStrategy:Resize,BYTE SetWindowMinSize=False,BYTE SetWindowMaxSize=False)')

%AppStrategy DEFAULT  ('Don''t alter controls')
%RestrictMinSize LONG  (1)
%WindowMinWidth DEFAULT  ('')
%WindowMinHeight DEFAULT  ('')
%RestrictMaxSize LONG  (0)
%WindowMaxWidth DEFAULT  ('')
%WindowMaxHeight DEFAULT  ('')
%AutoFindParents DEFAULT  ('Default')
%DeferMoves DEFAULT  ('Default')
%OverrideControls MULTI LONG  (1, 2, 4, 5)
%OverrideControl DEPEND %OverrideControls DEFAULT TIMES 4
WHEN  (1) ('?CurrentSearch')
WHEN  (2) ('?ResultList')
WHEN  (4) ('?sciControl:Region')
WHEN  (5) ('?SplitterBar')

%DisableResize DEPEND %OverrideControls LONG TIMES 4
WHEN  (1) (1)
WHEN  (2) (1)
WHEN  (4) (1)
WHEN  (5) (1)

%HorizResize DEPEND %OverrideControls DEFAULT TIMES 4
WHEN  (1) ('Lock Width')
WHEN  (2) ('Lock Width')
WHEN  (4) ('Constant Right Border')
WHEN  (5) ('Resize')

%VertResize DEPEND %OverrideControls DEFAULT TIMES 4
WHEN  (1) ('Constant Bottom Border')
WHEN  (2) ('Constant Bottom Border')
WHEN  (4) ('Constant Bottom Border')
WHEN  (5) ('Resize')

%HorizPositional DEPEND %OverrideControls DEFAULT TIMES 4
WHEN  (1) ('Fix Left')
WHEN  (2) ('Fix Left')
WHEN  (4) ('Lock Position')
WHEN  (5) ('Move')

%VertPositional DEPEND %OverrideControls DEFAULT TIMES 4
WHEN  (1) ('Fix Top')
WHEN  (2) ('Fix Top')
WHEN  (4) ('Fix Top')
WHEN  (5) ('Move')

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('Resizer')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('ADOBlob')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

[CALLS]
CheckRegistration
ColourRGB
CorrectForOffScreen
CreateRestorePoint
FindStr
GetFindDeleteOptions
GetPropertyFileLexer
GetRunningCopyCount
ListBoxFormatter
LoadFileExtensionQueue
LoadLexerProperties
LoadRestorePoint
MacroPlayer
MatchWithoutComment
RestorePointTimer
ResultQueueHasLocations
SaveResults
SelectSendToCommand
SilentlyRemoveDirectory
URLEncode
UserOptions
winGetSearchParameters
winReplaceInResults
winShowMatchSummary
[WINDOW]
Window  WINDOW('Kwik Source Search'),AT(,,600,273),FONT('Segoe UI',10,,,CHARSET:ANSI),RESIZE, |
          ALRT(03DCh),ALRT(CtrlEnd),ALRT(CtrlHome),ALRT(DownKey),ALRT(PgDnKey),ALRT(PgUpKey), |
          ALRT(UpKey),COLOR(,COLOR:Yellow),ICON('kss.ico'),GRAY,IMM,MAX,HLP('Main.htm'),STATUS(-1, |
          50,200,70),SYSTEM,TIMER(5)
          TOOLBAR,AT(0,0,600,18),USE(?Toolbar1),COLOR(00F2E4D7h),#ORDINAL(1)
            BUTTON('&Search'),AT(2,2,50,14),USE(?cmdSearch),LEFT,ICON('search.ico'),DEFAULT, |
              FLAT,TIP('Search for...<09H>[Ctrl+F]'),#ORDINAL(2)
            BUTTON,AT(55,2,18,14),USE(?cmdRedoSearch),ICON('RedoSearch.ico'),FLAT,TIP('Redo the l' & |
              'ast search<0DH,0AH>without dialog<09H>[F5]'),#ORDINAL(3)
            PANEL,AT(75,3,1,12),USE(?Separator3),BEVEL(1),#ORDINAL(4)
            BUTTON,AT(78,2,18,14),USE(?cmdPreviousFolder),ICON('PreviousFolder.ico'),FLAT, |
              TIP('Jump to Previous Folder<0DH,0AH>in Results List'),#ORDINAL(5)
            BUTTON,AT(98,2,18,14),USE(?cmdPreviousFile),ICON('PreviousFile.ico'),FLAT,TIP('Jump to Pr' & |
              'evious File<0DH,0AH>in Results List'),#ORDINAL(6)
            BUTTON,AT(118,2,18,14),USE(?cmdPreviousLine),ICON('PreviousLine.ico'),FLAT,TIP('Jump to Pr' & |
              'evious Line<0DH,0AH>in Results List<09H>[MinusKey]'),#ORDINAL(7)
            BUTTON,AT(138,2,18,14),USE(?cmdNextLine),ICON('NextLine.ico'),FLAT,TIP('Jump to Ne' & |
              'xt Line<0DH,0AH>in Results List<09H>[PlusKey]'),#ORDINAL(8)
            BUTTON,AT(158,2,18,14),USE(?cmdNextFile),ICON('NextFile.ico'),FLAT,TIP('Jump to Ne' & |
              'xt File<0DH,0AH>in Results List'),#ORDINAL(9)
            BUTTON,AT(178,2,18,14),USE(?cmdNextFolder),ICON('NextFolder.ico'),FLAT,TIP('Jump to Ne' & |
              'xt Folder<0DH,0AH>in Results List'),#ORDINAL(10)
            PANEL,AT(198,3,1,12),USE(?Separator1),BEVEL(1),#ORDINAL(11)
            BUTTON,AT(202,2,18,14),USE(?cmdDeleteLine),ICON('DeleteLine.ico'),FLAT,TIP('Delete Sel' & |
              'ected Line<0DH,0AH>from Results List<09H>[Delete]'),#ORDINAL(12)
            BUTTON,AT(222,2,18,14),USE(?cmdDeleteFile),ICON('DeleteFile.ico'),FLAT,TIP('Delete Sel' & |
              'ected File<0DH,0AH>from Results List<09H>[Alt+Delete]'),#ORDINAL(13)
            BUTTON,AT(242,2,18,14),USE(?cmdDeleteExtension),ICON('DeleteExtension.ico'),FLAT, |
              TIP('Delete Selected File Extension<0DH,0AH>from Results List'),#ORDINAL(14)
            BUTTON,AT(262,2,18,14),USE(?cmdDeletePath),ICON('DeletePath.ico'),FLAT,TIP('Delete Sel' & |
              'ected Path<0DH,0AH>from Results List'),#ORDINAL(15)
            BUTTON,AT(282,2,18,14),USE(?cmdDeleteComments),ICON('DeleteComment.ico'),FLAT, |
              TIP('Delete Comments<0DH,0AH>from Results List'),#ORDINAL(16)
            BUTTON,AT(302,2,18,14),USE(?cmdDeleteLabels),ICON('DeleteLabel.ico'),FLAT,TIP('Delete Lab' & |
              'els<0DH,0AH>from Results List'),#ORDINAL(17)
            BUTTON,AT(322,2,18,14),USE(?cmdDeleteCode),ICON('DeleteCode.ico'),FLAT,TIP('Delete Mat' & |
              'ches Found in Code<0DH,0AH>from Results List'),#ORDINAL(18)
            BUTTON,AT(342,2,18,14),USE(?cmdDeleteData),ICON('DeleteData.ico'),FLAT,TIP('Delete Mat' & |
              'ches Found in Data<0DH,0AH>from Results List'),#ORDINAL(19)
            BUTTON,AT(362,2,18,14),USE(?cmdFindAndDelete),ICON('FindDelete.ico'),FLAT,TIP('Find and D' & |
              'elete<0DH,0AH>in Results List...<09H>[Ctrl+Delete]'),#ORDINAL(20)
            BUTTON,AT(382,2,18,14),USE(?cmdUndoDelete),ICON('UndoDelete.ico'),FLAT,TIP('Undo Delet' & |
              'e<0DH,0AH>Ctrl+Z'),#ORDINAL(21)
            PANEL,AT(403,3,1,12),USE(?Separator2),BEVEL(1),#ORDINAL(22)
            BUTTON,AT(406,2,18,14),USE(?cmdReplaceResults),ICON('Replace.ico'),FLAT,TIP('Replace ..' & |
              '.<09H>[Ctrl+R]'),#ORDINAL(23)
            BUTTON,AT(426,2,18,14),USE(?cmdSave),ICON('FileSave.ico'),FLAT,TIP('Save Results ...'), |
              #ORDINAL(24)
            BUTTON,AT(446,2,18,14),USE(?cmdEdit),ICON('SendTo.ico'),FLAT,TIP('Send To Co' & |
              'mmand<09H>[Ctrl+E]'),#ORDINAL(25)
            PANEL,AT(466,3,1,12),USE(?Separator4),BEVEL(1),#ORDINAL(26)
            BUTTON,AT(469,2,18,14),USE(?cmdUserOptions),ICON('UserOptions.ico'),FLAT,TIP('Options ...'), |
              #ORDINAL(27)
            BUTTON,AT(489,2,18,14),USE(?cmdLayout),ICON('splith.ico'),FLAT,TIP('Switch to ' & |
              'Horizontal Layout'),#ORDINAL(28)
            BUTTON,AT(509,2,18,14),USE(?cmdHelp),ICON('help.ico'),FLAT,TIP('Help'),#ORDINAL(29)
            STRING(@S255),AT(539,4,,8),USE(szTitle),RIGHT,#ORDINAL(30)
            BUTTON,AT(571,4,10,8),USE(?cmdSaveWarn),ICON('save-warn.png'),DISABLE,FLAT,SKIP, |
              #ORDINAL(31)
          END
          TEXT,AT(462,1,136,254),USE(?sciControl:Region),FONT(,,COLOR:BTNTEXT),#ORIG(?sciControl:Region), |
            #SEQ(4),#ORDINAL(32)
          BOX,AT(0,0,460,25),USE(?Application:Box),COLOR(COLOR:Red),FILL(00C0C0FFh),LINEWIDTH(1), |
            #ORDINAL(33)
          SHEET,AT(0,0,460,255),USE(CurrentSearch),HSCROLL,COLOR(00F0F0F0h),#ORDINAL(34)
            TAB('New Search'),USE(?Search1),#ORDINAL(35)
            END
          END
          BUTTON,AT(2,14,16,12),USE(?cmdCloseTab),ICON('CloseTab.ico'),FLAT,SKIP,TIP('Close Tab'), |
            #ORDINAL(36)
          BUTTON,AT(2,14,16,12),USE(?cmdCancelSearch),ICON('CancelSearch.ico'),FLAT,HIDE,SKIP, |
            TIP('Cancel Search'),#ORDINAL(37)
          STRING(@s255),AT(20,16,398),USE(SearchQueue.szMatchesFound,,?szMatchesFound),TRN, |
            #ORDINAL(38)
          LIST,AT(1,28,456,226),USE(?ResultList),VSCROLL,ALRT(CtrlC),ALRT(CtrlE),ALRT(CtrlF), |
            ALRT(CtrlF4),ALRT(CtrlT),ALRT(CtrlV),ALRT(CtrlW),ALRT(CtrlZ),ALRT(DeleteKey),ALRT(EnterKey), |
            ALRT(F5Key),ALRT(MouseLeft2),ALRT(MouseRight),COLOR(COLOR:WINDOW),FORMAT('175L(2)|M~' & |
            'Path~S(1024)@s255@62L(2)|M~Filename~S(1024)@s255@28L(2)|M~Ext~C(0)@s15@28R' & |
            '(2)|M~Line~C(0)@n15@50L(2)|M~Location~S(1024)@s255@175L(2)|M~Text~S(1024)@s255@'), |
            FROM(EasyListPrintQueue),#FIELDS(ResultQueue.Path,ResultQueue.Filename,ResultsQueue.szExtension, |
            ResultQueue.LineNo,ResultQueue.ProcedureName,ResultQueue.Text),#ORDINAL(39)
          REGION,AT(460,0,2,260),USE(?SplitterBar),FILL(COLOR:SteelBlue),IMM,#ORDINAL(40)
          STRING(@S255),AT(10,147,568,8),USE(szTitle,,?szTitle:2),COLOR(COLOR:Red),#ORDINAL(41)
          BUTTON,AT(0,147,10,8),USE(?cmdSaveWarn:2),ICON('save-warn.png'),DISABLE,FLAT,SKIP, |
            #ORDINAL(42)
        END

[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2017/08/05' ' 8:56:46'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME CreateChildProcess
PROTOTYPE '(*CSTRING szCmdLine)'
PARAMETERS '(*CSTRING szCmdLine)'
[COMMON]
DESCRIPTION 'Create a child process that uses the previously created pipes for STDIN and STDOUT.'
FROM ABC Source
MODIFIED '2012/03/12' '14:43:52'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!szCmdline   CSTRING('findstr /s /i /n /p "keystone" "*.inc *.clw"')
siStartInfo LIKE(STARTUPINFOTYPE)
bSuccess    BOOL(FALSE)
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
      ! Create a child process that uses the previously created pipes for STDIN and STDOUT.
      ! Set up members of the PROCESS_INFORMATION structure.
      kcr_ZeroMemory(ADDRESS(piProcInfo), SIZE(PROCESS_INFORMATION))

      ! Set up members of the STARTUPINFO structure.
      ! This structure specifies the STDIN and STDOUT handles for redirection.

      kcr_ZeroMemory(ADDRESS(siStartInfo), SIZE(STARTUPINFOTYPE))
      siStartInfo.cb = SIZE(STARTUPINFOTYPE);
      siStartInfo.hStdError = g_hChildStd_OUT_Wr
      siStartInfo.hStdOutput = g_hChildStd_OUT_Wr
      siStartInfo.hStdInput = g_hChildStd_IN_Rd
      siStartInfo.dwFlags = BOR(siStartInfo.dwFlags,STARTF_USESTDHANDLES)
      siStartInfo.dwFlags = BOR(siStartInfo.dwFlags,STARTF_USESHOWWINDOW)
      siStartInfo.wShowWindow = SW_HIDE
      ! Create the child process.
      bSuccess = kcr_CreateProcess(0,              |  ! application name
                                   szCmdline,      |  ! command line
                                   0,              |  ! process security attributes
                                   0,              |  ! primary thread security attributes
                                   TRUE,           |  ! handles are inherited
                                   0,              |  ! creation flags
                                   0,              |  ! use parent's environment
                                   0,              |  ! use parent's current directory
                                   siStartInfo,    |  ! STARTUPINFO pointer
                                   piProcInfo)        ! receives PROCESS_INFORMATION

      ! If an error occurs, exit the application.
      IF bSuccess = TRUE
         ! Close handles to the child process and its primary thread.
         ! Some applications might keep these handles to monitor the status
         ! of the child process, for example.
         !kcr_CloseHandle(piProcInfo.hProcess)
         kcr_CloseHandle(piProcInfo.hThread)
      ELSE
         !MESSAGE('CreateProcess')
      END
      RETURN
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2011/12/17' '11:05:26'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME ReadFromPipe
PROTOTYPE '(LONG feqSearchProgress, *BYTE bCancelFlag),LONG'
PARAMETERS '(LONG feqSearchProgress, *BYTE bCancelFlag)'
[COMMON]
DESCRIPTION 'Read output from the child process''s pipe for STDOUT'
FROM ABC Source
MODIFIED '2012/01/08' '14:56:06'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
w              WINDOW,TIMER(100)
               END
thrd           LONG
ReadFileParams LIKE(ReadFileParamsType)
progressCalls  LONG
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
! Read output from the child process's pipe for STDOUT
! Stop when there is no more data.

! Close the write end of the pipe before reading from the
! read end of the pipe, to control child process execution.
! The pipe is assumed to have enough buffer space to hold the
! data the child process has already written to it.
      progressCalls = 0
      FREE(STDOUT_Queue)
      IF CloseHandle(g_hChildStd_OUT_Wr)
         OPEN(w)
         w{PROP:HIDE} = TRUE
         ACCEPT
            IF bCancelFlag = TRUE
               POST(EVENT:CloseDown,,thrd,0)
               BREAK
            ELSE
               CASE EVENT()
                 OF EVENT:CloseDown
                    BREAK
                 OF EVENT:CloseWindow
                    BREAK
                 OF EVENT:OpenWindow
                    ReadFileParams.ParentThread = THREAD()
                    ReadFileParams.ParentPipe   = g_hChildStd_OUT_Rd
                    ReadFileParams.ParentQueue  &= STDOUT_Queue
                    thrd = START(ReadFile,25000,ReadFileParams)
                    RESUME(thrd)
                 OF EVENT:User
                    POST(EVENT:CloseWindow)
                 OF EVENT:Timer
                    progressCalls += 1
                    POST(EVENT:PROGRESS+feqSearchProgress,,1,1)
                    YIELD()
               END
            END
         END
         CLOSE(w)
      ELSE
         MESSAGE('StdOutWr CloseHandle')
      END
      RETURN progressCalls
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[CALLS]
ReadFile
[PROCEDURE]
NAME ReadFile
PROTOTYPE '(STRING ReadFileParams)'
PARAMETERS '(STRING ReadFileParams)'
[COMMON]
DESCRIPTION 'Run this on it''s own thread cause it block until input is available'
FROM ABC Source
MODIFIED '2016/03/19' '12:03:45'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
dwRead        DWORD
chBuf         STRING(BUFSIZE)
bSuccess      BOOL
param         LIKE(ReadFileParamsType)
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
     param = ReadFileParams
     OPEN(w)
     w{PROP:hide} = TRUE
     ACCEPT
        CASE EVENT()
          OF EVENT:CloseDown
             BREAK
          OF EVENT:CloseWindow
             POST(EVENT:User,,param.ParentThread,0)
             BREAK
          OF EVENT:Timer
             CLEAR(chBuf,-1)
             bSuccess = kcr_ReadFile( param.ParentPipe, ADDRESS(chBuf), BUFSIZE, ADDRESS(dwRead), 0)
             IF bSuccess = FALSE OR dwRead = 0
                w{PROP:timer} = 0
                param.ParentQueue.Buffer = chBuf
                ADD(param.ParentQueue)
                POST(EVENT:CloseWindow)
             ELSE
                param.ParentQueue.Buffer = chBuf
                ADD(param.ParentQueue)
             END
        END
     END
     CLOSE(w)
     RETURN
[END]
EMBED %LocalDataAfterClasses
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
w             WINDOW,AT(0,0,10,10),TIMER(1)
              END
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2017/08/07' '16:33:59'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME FillResultQueue
PROTOTYPE '(*ResultQueueType ResultQueue, LONG feqSearchProgress, *CSTRING szFixedFileMask, *CSTRING szFixedExcludeMask, *BYTE bCancelFlag, LONG progressCalls, *BOOL  bFilenamesOnly, *BOOL bFileListFromFile)'
PARAMETERS '(*ResultQueueType ResultQueue, LONG feqSearchProgress, *CSTRING szFixedFileMask, *CSTRING szFixedExcludeMask, *BYTE bCancelFlag, LONG progressCalls, *BOOL  bFilenamesOnly, *BOOL bFileListFromFile)'
GLOBAL
[COMMON]
DESCRIPTION 'Process STDOUT_Queue and store lines in ResultQueue'
FROM ABC Source
MODIFIED '2019/02/15' '17:14:21'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
   thisBuffer &= NEW CSTRING((2*BUFSIZE)+1)
   ASSERT(0,eqDBG & 'NEW thisBuffer [' & ADDRESS(thisBuffer) & ']')

   IF szFixedExcludeMask <> ''
      i = 1
      j = INSTRING(' ',szFixedExcludeMask)
      LOOP WHILE j
         excludeQueue.excludemask = szFixedExcludeMask[i : j-1]
         ADD(excludeQueue)
         i = j+1
         j = INSTRING(' ',szFixedExcludeMask,1,i)
      END
      excludeQueue.excludemask = szFixedExcludeMask[i : LEN(szFixedExcludeMask)]
      ADD(excludeQueue)
   END

   FREE(ResultQueue)
   j = RECORDS(STDOUT_Queue)
   LOOP i = 1 TO j
      GET(STDOUT_Queue,i)
      sizeNeeded = LEN(thisBuffer) + LEN(STDOUT_Queue.Buffer) + 1
      IF sizeNeeded > SIZE(thisBuffer)
         tempBuffer &= NEW CSTRING(LEN(thisBuffer)+1)
         ASSERT(0,eqDBG & 'NEW tempBuffer [' & ADDRESS(tempBuffer) & ']')
         tempBuffer = thisBuffer
         ASSERT(0,eqDBG & 'DISPOSE thisBuffer [' & ADDRESS(thisBuffer) & ']')
         DISPOSE(thisBuffer)
         thisBuffer &= NULL
         thisBuffer &= NEW CSTRING(sizeNeeded)
         thisBuffer = tempBuffer & STDOUT_Queue.Buffer
         ASSERT(0,eqDBG & 'DISPOSE tempBuffer [' & ADDRESS(tempBuffer) & ']')
         DISPOSE(tempBuffer)
         tempBuffer &= NULL
      ELSE
         thisBuffer = thisBuffer & STDOUT_Queue.Buffer
      END
      DO ProcessBuffer
      YIELD()
   END

   j = LEN(CLIP(thisBuffer))
   IF j > 0
      thisBuffer[j+1] = '<13>'
      thisBuffer[j+2] = '<10>'
      DO ProcessBuffer
   END

   ASSERT(0,eqDBG & 'DISPOSE thisBuffer [' & ADDRESS(thisBuffer) & ']')
   DISPOSE(thisBuffer)
   thisBuffer &= NULL

   thisFile = ''
   j = RECORDS(ResultQueue)

   progressCalls = progressCalls % 100
   modulo = j / (100 - progressCalls)

   LOOP i = 1 TO j
      IF bCancelFlag = TRUE
         BREAK
      ELSE
         GET(ResultQueue,i)
         IF ResultQueue.szExtension
            CommentStyle = GetCommentStyle(ResultQueue.szExtension)
            IF glo:bAllExtensions = TRUE
               DO ProcessFile
            ELSE
               LOOP p = 1 TO RECORDS(ClarionExtensionsQueue)
                  GET(ClarionExtensionsQueue,p)
                  IF INSTRING(ClarionExtensionsQueue.FileExtension,UPPER(ResultQueue.Filename & ResultQueue.szExtension),1)
                     DO ProcessFile
                     BREAK
                  END
               END
            END
         END
         IF modulo > 0
            IF (i % modulo) = 0
               POST(EVENT:PROGRESS+feqSearchProgress,,1)
            END
         END
         YIELD()
      END
   END

   SORT(ResultQueue,+ResultQueue.SortName,+ResultQueue.LineNo)

   IF NOT thisBuffer &= NULL
      ASSERT(0,eqDBG & 'DISPOSE thisBuffer [' & ADDRESS(thisBuffer) & ']')
      DISPOSE(thisBuffer)
      thisBuffer &= NULL
   END
   IF NOT tempBuffer &= NULL
      ASSERT(0,eqDBG & 'DISPOSE tempBuffer [' & ADDRESS(tempBuffer) & ']')
      DISPOSE(tempBuffer)
      tempBuffer &= NULL
   END
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
thisBuffer     &CSTRING
tempBuffer     &CSTRING
thisFolder     CSTRING(261)
thisFile       CSTRING(261)
thisLine       LONG
thisText       CSTRING(2048)
thisString     CSTRING(BUFSIZE+1)
i              LONG
j              LONG
n              LONG
p              LONG
x              LONG

!ProcNameQueue  QUEUE,PRE(PNQ)
!LineNo            LONG
!ProcedureName     CSTRING(256)
!               END
!SectionQueue   QUEUE,PRE(SQ)
!lowLineNo         LONG
!highLineNo        LONG
!szSection         CSTRING(5)
!               END


ProcNameQueue  QUEUE(ProcNameQueueType),PRE(PNQ)
               END
SectionQueue   QUEUE(SectionQueueType),PRE(SQ)
               END

sizeNeeded     LONG
modulo         LONG
CommentStyle   LONG
excludeQueue   QUEUE,PRE(exq)
excludemask       CSTRING(256)
               END

[END]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
ProcessBuffer  ROUTINE
   DATA
i              LONG
j              LONG
k              LONG
p              LONG
pDelimiter     LONG
Delimiter      STRING('<10>')
CR             STRING('<13>')
currentPath    LIKE(ResultQueue.Path)

   CODE
      !ASSERT(0,eqDBG & 'Thread ' & thread() & ' ProcessBuffer')
      i = 1
      pDelimiter = INSTRING(Delimiter,thisBuffer,1,i)
      LOOP WHILE pDelimiter
         IF thisBuffer[pDelimiter-1] = CR
            thisString = thisBuffer[i : pDelimiter-2]
         ELSE
            thisString = thisBuffer[i : pDelimiter-1]
         END
         !ASSERT(0,eqDBG & 'Thread ' & thread() & ' look for delimiter ' & thisString)
         IF bFileListFromFile = TRUE
            DO ProcessThisString
         ELSE
            IF thisString[1 : 2] = '  '
               thisFolder = CLIP(LEFT(thisString))
               thisFolder[LEN(thisFolder)] = '\'
            ELSE
               !check for 'nasty' bug
               IF thisString[LEN(thisString)] = ':'
                  !ASSERT(0,eqDBG & 'Thread ' & thread() & ' fix nasty bug ' & thisString)
                  LOOP n = LEN(thisString) TO 1 BY -1
                     IF thisString[n : n+1] = '  '
                        BREAK
                     END
                  END
                  IF n > 0
                     IF thisString[n+3 : n+4] = ':\'
                        pDelimiter = n-1
                        thisString = thisString[1 : pDelimiter]
                     END
                  END
               END

               !process thisString
               !!!Region('OldCode')
!               IF NOT INSTRING('*',szFixedFileMask,1) AND NOT INSTRING(' ',szFixedFileMask,1) AND NOT INSTRING('?',szFixedFileMask,1)
!                  IF NOT NUMERIC(thisString[1])
!                  !IF UPPER(szFixedFileMask) = UPPER(thisString[1 : LEN(szFixedFileMask)])
!                     thisString = thisFolder & thisString
!                  ELSE
!                     thisString = thisFolder & szFixedFileMask & ':' & thisString
!                  END
!               ELSE
!                  thisString = thisFolder & thisString
!               END
               !!!EndRegion
               thisString = thisFolder & thisString

               LOOP n = 1 TO RECORDS(excludeQueue)
                  GET(excludeQueue,n)
                  IF MATCH(UPPER(thisString),excludeQueue.excludemask,Match:Regular)
                     BREAK
                  END
               END
               IF n > RECORDS(excludeQueue)
                  DO ProcessThisString
               END

            END
         END

         i = pDelimiter + 1
         pDelimiter = INSTRING(Delimiter,thisBuffer,1,i)
      END   !LOOP
      IF LEN(thisBuffer) > 0
         IF i <= LEN(thisBuffer)
            thisBuffer = thisBuffer[i : LEN(thisBuffer)]
         ELSE
            thisBuffer = ''
         END
      END

ProcessThisString    ROUTINE
   DATA
k              LONG
pDot           LONG
pColon         LONG
Colon          STRING(':')
szPath         CSTRING(MAXPATH+1)
szDrive        CSTRING(MAXDRIVE+1)
szDir          CSTRING(MAXDIR+1)
szName         CSTRING(MAXFILE+1)
szExtension    CSTRING(MAXEXT+1)
cc             LONG
strText        STRING(1025)

resultFile        CSTRING(MAXPATH+1)
currentFile       CSTRING(MAXPATH+1)
currentFileDate   LONG
currentFileTime   LONG
fileQueue         QUEUE(FILE:queue),PRE(fq)
                  END

   CODE
            x# = 1
            k = 1
            pColon = INSTRING(Colon,thisString,1,3)   !skip ':' from path
            IF pColon
               szPath = thisString[k : pColon-1]
               szDrive = ''
               szDir = ''
               szName = ''
               szExtension = ''
               cc = kcr_fnSplit(szPath, szDrive, szDir, szName, szExtension)
               ResultQueue.Path = szDrive & szDir
               ResultQueue.Filename = szName
               ResultQueue.szExtension = szExtension

               IF NOT INSTRING('/s',glo:findstrCommandLine,1)
                  IF NUMERIC(szName) AND szExtension = ''
                     pDot = INSTRING('.',szFixedFileMask)
                     szName = szFixedFileMask[1 : pDot-1]
                     szExtension = szFixedFileMask[pDot : LEN(szFixedFileMask)]
                     ResultQueue.Filename = szName
                     ResultQueue.szExtension = szExtension
                     szPath = szDrive & szDir & szName & szExtension
                     k = LEN(szDrive & szDir) + 1
                  ELSE
                     k = pColon + 1
                  END
               ELSE
                  k = pColon + 1
               END

!               k = pColon + 1
               pColon = INSTRING(Colon,thisString,1,k)
               IF pColon
                  ResultQueue.LineNo = thisString[k : pColon-1]
                  ResultQueue.ProcedureName = ''
                  strText = thisString[pColon+1 : LEN(thisString)]
                  ReplaceTabs(strText)
                  ResultQueue.Text = CLIP(strText)
                  ResultQueue.SortName = UPPER(szPath)
                  ResultQueue.Position = 0
                  ResultQueue.DeleteInstance = 0
                  ResultQueue.szSection = ''

                  resultFile = UPPER(ResultQueue.Path & ResultQueue.Filename & ResultQueue.szExtension)
                  IF currentFile <> resultFile
                     currentFile = resultFile
                     DIRECTORY(fileQueue, currentFile, ff_:Normal)
                     currentFileDate = fileQueue.date
                     currentFileTime = fileQueue.time
                  END
                  ResultQueue.FileDate = currentFileDate
                  ResultQueue.FileTime = currentFileTime

                  ADD(ResultQueue,+ResultQueue.SortName,+ResultQueue.LineNo)
               END
            ELSIF bFilenamesOnly
               szPath = thisString
               szDrive = ''
               szDir = ''
               szName = ''
               szExtension = ''
               cc = kcr_fnSplit(szPath, szDrive, szDir, szName, szExtension)
               ResultQueue.Path = szDrive & szDir
               ResultQueue.Filename = szName
               ResultQueue.szExtension = szExtension

               ResultQueue.LineNo = 1
               ResultQueue.ProcedureName = ''
               ResultQueue.Text = ''
               ResultQueue.SortName = UPPER(szPath)
               ResultQueue.Position = 0
               ResultQueue.DeleteInstance = 0
               ResultQueue.szSection = ''

               resultFile = ResultQueue.Path & ResultQueue.Filename & ResultQueue.szExtension
               IF currentFile <> resultFile
                  currentFile = resultFile
                  DIRECTORY(fileQueue, currentFile, ff_:Normal)
                  currentFileDate = fileQueue.date
                  currentFileTime = fileQueue.time
               END
               ResultQueue.FileDate = currentFileDate
               ResultQueue.FileTime = currentFileTime

               ADD(ResultQueue,+ResultQueue.SortName,+ResultQueue.LineNo)
            END

[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
ProcessFile    ROUTINE
   DATA
p                    LONG

   CODE
      IF ResultQueue.SortName = thisFile
         IF RECORDS(ProcNameQueue) = 1
            GET(ProcNameQueue,n)
            ResultQueue.ProcedureName = ProcNameQueue.ProcedureName
         ELSE
            LOOP n = 1 TO RECORDS(ProcNameQueue)
               GET(ProcNameQueue,n)
               IF ProcNameQueue.LineNo <= ResultQueue.LineNo
                  ResultQueue.ProcedureName = ProcNameQueue.ProcedureName
               ELSE
                  BREAK
               END
            END
         END

         LOOP p = 1 TO RECORDS(SectionQueue)
            GET(SectionQueue,p)
            IF INRANGE(ResultQueue.LineNo,SectionQueue.lowLineNo,SectionQueue.highLineNo)
               ResultQueue.szSection = SectionQueue.szSection
               BREAK
            END
         END
         PUT(ResultQueue)

      ELSE
         ASSERT(1,eqDBG & THREAD() & ' scanning: ' & ResultQueue.SortName)
         !dbx.debugout(THREAD() & ' scanning: ' & ResultQueue.SortName)
         thisFile = ResultQueue.SortName
         FREE(ProcNameQueue)
         FREE(SectionQueue)
         thisLine = 0
         AsciiFilename = thisFile
         OPEN(AsciiFile,ReadOnly+DenyWrite)
         IF ~ERRORCODE()

            CASE CommentStyle
              OF CommentStyleClarion
                 DO ProcessClarionFile
              OF CommentStyleCpp
                 DO ProcessCppFile
              OF CommentStylePython
                 DO ProcessPythonFile
              OF CommentStyleVb
                 DO ProcessVbFile
            END

            CLOSE(AsciiFile)
            POST(EVENT:PROGRESS+feqSearchProgress,,1)

            SectionQueue.highLineNo = thisLine
            PUT(SectionQueue)

            COMPILE('***',_DEBUG_)
            setcursor()
            BrowseQueues(ProcNameQueue, SectionQueue)
            setcursor(cursor:wait)
            !***

            IF RECORDS(ProcNameQueue) = 1
               GET(ProcNameQueue,1)
               ResultQueue.ProcedureName = ProcNameQueue.ProcedureName
            ELSE
               LOOP n = 1 TO RECORDS(ProcNameQueue)
                  GET(ProcNameQueue,n)
                  IF ProcNameQueue.LineNo <= ResultQueue.LineNo
                     ResultQueue.ProcedureName = ProcNameQueue.ProcedureName
                  ELSE
                     n -= 1
                     BREAK
                  END
               END
            END

            LOOP p = 1 TO RECORDS(SectionQueue)
               GET(SectionQueue,p)
               IF INRANGE(ResultQueue.LineNo,SectionQueue.lowLineNo,SectionQueue.highLineNo)
                  ResultQueue.szSection = SectionQueue.szSection
                  BREAK
               END
            END

            PUT(ResultQueue)
         END
      END
   EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
ProcessClarionFile    ROUTINE
   DATA
p                    LONG
bInMap               BOOL(FALSE)
bInClassDeclaration  BOOL(FALSE)
appProcedureName     LIKE(ProcNameQueue.ProcedureName)
ClassNameQueue       QUEUE,PRE(cnq)
ClassName               CSTRING(256)
ProcedureName           CSTRING(256)
                     END
LastProcedureName    LIKE(ProcNameQueue.ProcedureName)

   CODE
      SectionQueue.lowLineNo = 1
      SectionQueue.highLineNo = 1
      SectionQueue.szSection = 'DATA'
      ADD(SectionQueue)

      SET(AsciiFile)
      LOOP
         NEXT(AsciiFile)
         IF ERRORCODE()
            BREAK
         ELSE
            ReplaceTabs(AsciiFile.Buffer)
            thisLine += 1

            CASE UPPER(CLIP(LEFT(AsciiFile.Buffer)))
              OF 'DATA'
                 IF SectionQueue.szSection <> 'DATA'
                    SectionQueue.highLineNo = thisLine - 1
                    PUT(SectionQueue)
                    SectionQueue.lowLineNo = thisLine
                    SectionQueue.highLineNo = thisLine
                    SectionQueue.szSection = 'DATA'
                    ADD(SectionQueue)
                 END
              OF 'CODE'
                 IF SectionQueue.szSection <> 'CODE'
                    SectionQueue.highLineNo = thisLine - 1
                    PUT(SectionQueue)
                    SectionQueue.lowLineNo = thisLine
                    SectionQueue.highLineNo = thisLine
                    SectionQueue.szSection = 'CODE'
                    ADD(SectionQueue)
                 END
            END

            CASE AsciiFile.Buffer[1]
              OF ' '
                 thisText = CLIP(LEFT(AsciiFile.Buffer))
                 !IF UPPER(thisText[1 : 3]) = 'MAP'
                 IF UPPER(thisText) = 'MAP'
                    bInMap = TRUE
                    ProcNameQueue.LineNo = thisLine
                    !LastProcedureName = ProcNameQueue.ProcedureName
                    ProcNameQueue.ProcedureName = 'MAP'
                    ADD(ProcNameQueue)
                    !dbx.Debugout('1 [' & appProcedureName & '] ' & ProcNameQueue.LineNo & ': ' & ProcNameQueue.ProcedureName)
                 ELSIF UPPER(thisText[1 : 6]) = 'MODULE'
                    bInClassDeclaration = TRUE
                 ELSIF bInClassDeclaration = TRUE
                    IF UPPER(thisText[1 : 3]) = 'END'
                       bInClassDeclaration = FALSE
                    END
                 ELSIF bInMap = TRUE
                    IF UPPER(thisText[1 : 3]) = 'END'
                       bInMap = FALSE
                       ProcNameQueue.LineNo = thisLine
                       !ProcNameQueue.ProcedureName = ''
                       ProcNameQueue.ProcedureName = CHOOSE(appProcedureName='',LastProcedureName,appProcedureName)
                       ADD(ProcNameQueue)
                       !dbx.Debugout('2 [' & appProcedureName & '] ' & ProcNameQueue.LineNo & ': ' & ProcNameQueue.ProcedureName)
                    END
                 END
                 CYCLE

              OF '!'
                 CYCLE
            ELSE
              IF bInMap = FALSE
                 p = INSTRING(' ',CLIP(AsciiFile.Buffer))
                 IF p
                    thisText = CLIP(LEFT(AsciiFile.Buffer[p+1 : LEN(CLIP(AsciiFile.Buffer))]))
                    IF UPPER(thisText[1 : 5]) = 'CLASS' OR UPPER(thisText[1 : 9]) = 'INTERFACE'
                       bInClassDeclaration = TRUE
                       ClassNameQueue.ClassName = AsciiFile.Buffer[1 : p-1]
                       ClassNameQueue.ProcedureName = appProcedureName
                       ADD(ClassNameQueue,+ClassNameQueue.ClassName,+ClassNameQueue.ProcedureName)
                       !dbx.Debugout('3 ' & ClassNameQueue.ClassName & ': ' & ClassNameQueue.ProcedureName)

                    END
                    IF bInClassDeclaration = TRUE
                       IF UPPER(thisText[1 : 3]) = 'END'
                          bInClassDeclaration = FALSE
                       END
                    ELSE
                       IF UPPER(thisText[1 : 9]) = 'PROCEDURE' OR UPPER(thisText[1 : 8]) = 'FUNCTION'
                          ProcNameQueue.LineNo = thisLine
                          x = INSTRING('.',AsciiFile.Buffer[1 : p-1])
                          IF x
                             IF appProcedureName = 'Dec2Hex'
                                appProcedureName = ''
                             END
                             ClassNameQueue.ClassName = AsciiFile.Buffer[1 : x-1]
                             ClassNameQueue.ProcedureName = appProcedureName
                             GET(ClassNameQueue,+ClassNameQueue.ClassName,+ClassNameQueue.ProcedureName)
                             IF ERRORCODE()
                                ClassNameQueue.ClassName = AsciiFile.Buffer[1 : x-1]
                                GET(ClassNameQueue,+ClassNameQueue.ClassName)
                                IF NOT ERRORCODE()
                                   appProcedureName = ClassNameQueue.ProcedureName
                                END
                             END
                             ProcNameQueue.ProcedureName = CHOOSE(appProcedureName = '', AsciiFile.Buffer[1 : p-1], appProcedureName & '.' & AsciiFile.Buffer[1 : p-1])
                          ELSE
                             ProcNameQueue.ProcedureName = AsciiFile.Buffer[1 : p-1]
                             !appProcedureName     = ProcNameQueue.ProcedureName
                          END
                          ADD(ProcNameQueue)
                          LastProcedureName = ProcNameQueue.ProcedureName
                          !dbx.Debugout('4 [' & appProcedureName & '] ' & ProcNameQueue.LineNo & ': ' & ProcNameQueue.ProcedureName)

                          IF SectionQueue.szSection = 'DATA'
                             SectionQueue.highLineNo = thisLine - 1
                             PUT(SectionQueue)
                             SectionQueue.lowLineNo = thisLine
                             SectionQueue.highLineNo = thisLine
                             SectionQueue.szSection = 'CODE'
                             ADD(SectionQueue)
                             SectionQueue.lowLineNo = thisLine + 1
                             SectionQueue.highLineNo = thisLine + 1
                             SectionQueue.szSection = 'DATA'
                             ADD(SectionQueue)
                          ELSE
                             SectionQueue.highLineNo = thisLine
                             PUT(SectionQueue)
                             SectionQueue.lowLineNo = thisLine + 1
                             SectionQueue.highLineNo = thisLine + 1
                             SectionQueue.szSection = 'DATA'
                             ADD(SectionQueue)
                          END

                       ELSIF UPPER(thisText[1 : 7]) = 'ROUTINE'
                          ProcNameQueue.LineNo = thisLine
                          ProcNameQueue.ProcedureName = CHOOSE(appProcedureName = '', LastProcedureName & ' > ' & AsciiFile.Buffer[1 : p-1], appProcedureName & ' > ' & AsciiFile.Buffer[1 : p-1])
                          ADD(ProcNameQueue,+ProcNameQueue.LineNo)
                          !dbx.Debugout('5 [' & appProcedureName & '] ' & ProcNameQueue.LineNo & ': ' & ProcNameQueue.ProcedureName)

                          IF SectionQueue.szSection <> 'CODE'
                             SectionQueue.highLineNo = thisLine - 1
                             PUT(SectionQueue)
                             SectionQueue.lowLineNo = thisLine
                             SectionQueue.highLineNo = thisLine
                             SectionQueue.szSection = 'CODE'
                             ADD(SectionQueue)
                          END
                       END
                    END
                 END
              END
            END
         END
      END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
ProcessCppFile    ROUTINE
   DATA
n                 LONG
p                 LONG
q1                LONG
q2                LONG
InBlockComment    BOOL(FALSE)
InMethod          BOOL(FALSE)
nBraceCount       LONG
nClassCount       LONG
thisNamespace     CSTRING(256)
thisClass         CSTRING(256)
thisMethod        CSTRING(256)
lastText          CSTRING(2048)
lastTextLine      LONG
clText            LIKE(thisText)
stopLine          LONG(1)

   CODE
      SET(AsciiFile)
      LOOP
         NEXT(AsciiFile)
         IF ERRORCODE()
            BREAK
         ELSE
            ReplaceTabs(AsciiFile.Buffer)
            thisLine += 1

            IF thisline = stopLine
               x# = 0
            END

            thisText = CLIP(LEFT(AsciiFile.Buffer))
            IF thisText = ''
               IF NOT INSTRING('(',lastText)
                  lastText = ''
               END
               CYCLE
            ELSE

               !remove comments
               IF thisText[1 : 2] = '//'
                  CYCLE
               ELSE
                  p = INSTRING(' //',thisText,1)
                  IF p > 1
                     thisText = CLIP(thisText[1 : p-1])
                   END
               END

               !remove anything in quotes
               n = 0
               clText = ''
               LOOP p = 1 TO LEN(thisText)
                  IF thisText[p] = ''''
                     n += 1
                     clText[n] = thisText[p]
                     p += 1
                     p = INSTRING('''',thisText,1,p)
                     IF p = 0
                        clText = thisText
                        BREAK
                     ELSE
                        LOOP WHILE thisText[p-1] = '\'  !was it escaped?
                           p = INSTRING('''',thisText,1,p+1)
                           IF p = 0
                              clText = thisText
                              BREAK
                           END
                        END
                        IF p = 0
                           BREAK
                        ELSE
                           n += 1
                           clText[n] = thisText[p]
                        END
                     END
                  ELSE
                     n += 1
                     clText[n] = thisText[p]
                  END
               END
               IF p > LEN(thisText)
                  clText[n+1] = '<0>'
                  thisText = clText
               END

               !remove anything in double quotes
               n = 0
               clText = ''
               LOOP p = 1 TO LEN(thisText)
                  IF thisText[p] = '"'
                     n += 1
                     clText[n] = thisText[p]
                     p += 1
                     p = INSTRING('"',thisText,1,p)
                     IF p = 0
                        clText = thisText
                        BREAK
                     ELSE
                        LOOP WHILE thisText[p-1] = '\'  !was it escaped?
                           p = INSTRING('"',thisText,1,p+1)
                           IF p = 0
                              clText = thisText
                              BREAK
                           END
                        END
                        IF p = 0
                           BREAK
                        ELSE
                           n += 1
                           clText[n] = thisText[p]
                        END
                     END
                  ELSE
                     n += 1
                     clText[n] = thisText[p]
                  END
               END
               IF p > LEN(thisText)
                  clText[n+1] = '<0>'
                  thisText = clText
               END
               clText = ''

               IF InMethod

                  IF InBlockComment
                     IF INSTRING('*/',thisText,1,1)
                        InBlockComment = FALSE
                     END
                     CYCLE
                  ELSE
                     IF thisText[1 : 2] = '/*'
                        IF NOT INSTRING('*/',thisText,1,3)
                           InBlockComment = TRUE
                        END
                        CYCLE
                     !ELSIF thisText[1 : 2] = '//'
                     !   CYCLE
                     END
                  END


                  p = INSTRING('{{',thisText)
                  LOOP WHILE p
                     nBraceCount += 1
                     IF p < LEN(thisText)
                        p = INSTRING('{{',thisText,1,p+1)
                     ELSE
                        p = 0
                     END
                  END
                  p = INSTRING('}',thisText)
                  LOOP WHILE p
                     nBraceCount -= 1
                     IF p < LEN(thisText)
                        p = INSTRING('}',thisText,1,p+1)
                     ELSE
                        p = 0
                     END
                  END
                  IF nClassCount > 0 AND nBraceCount = nClassCount
                     InMethod = FALSE
                  ELSIF nBraceCount = 0
                     InMethod = FALSE
                  END
                  CYCLE
               ELSE   !not in method
                  IF InBlockComment
                     IF INSTRING('*/',thisText,1,1)
                        InBlockComment = FALSE
                     END
                     CYCLE
                  ELSE
                     IF thisText[1 : 2] = '/*'
                        IF NOT INSTRING('*/',thisText,1,3)
                           InBlockComment = TRUE
                        END
                        CYCLE
                     ELSIF thisText[1 : 2] = '//'
                        CYCLE
                     ELSE
                        p = INSTRING('{{',thisText)
                        IF p
                           IF INSTRING('}',thisText)
                              CYCLE
                           ELSIF INSTRING('enum ',thisText[1 : p-1],1)
                              nBraceCount += 1
                              CYCLE
                           ELSIF INSTRING('struct ',thisText[1 : p-1],1)
                              nBraceCount += 1
                              CYCLE
                           END

                           clText = CLIP(LEFT(thisText))
                           p = INSTRING('(',lastText)
                           IF p
                              IF NOT INSTRING(')',lastText,1,p+1)
                                 thisText = lastText & thisText
                              ELSIF lastText[LEN(lastText)] = ':'   |
                                 OR lastText[LEN(lastText)] = ','   |
                                 OR clText[1] = ','
                                 thisText = lastText & thisText
                              END
                           ELSE
                              IF clText[1] = '('
                                 thisText = lastText & thisText
                              END
                           END
                           p = INSTRING('{{',thisText)

                           IF p > 1 !something precedes {
                              IF lastText = ''
                                 lastTextLine = thisLine
                              END
                              lastText = thisText[1 : p-1]
                           END
                           p = INSTRING('namespace ',lastText,1)
                           IF p
                              thisNamespace = lastText[p+10 : LEN(lastText)]
                              thisNamespace = CLIP(thisNamespace)
                              nBraceCount += 1
                              CYCLE
                           END
                           p = INSTRING('class ',lastText,1)
                           IF p
                              thisClass = lastText[p+6 : LEN(lastText)]
                              p = INSTRING(':',thisClass)
                              IF p
                                 thisClass[p] = '<0>'
                              END
                              thisClass = CLIP(thisClass)
                              nBraceCount += 1
                              nClassCount = nBraceCount
                              CYCLE
                           END

                           p = INSTRING('STDMETHODIMP_(',lastText,1)
                           IF p
                              p = INSTRING(')',lastText,1,p+14)
                              IF p
                                 lastText = lastText[p+1 : LEN(lastText)]
                              END
                           END

                           p = INSTRING('(',lastText)
                           IF p
                              IF lastText[p-1] = '>' OR lastText[p-1] = '*' OR lastText[p-1] = '_'
                                 LOOP p = p-2 TO 1 BY -1
                                    IF lastText[p] = ' '
                                       BREAK
                                    END
                                 END
                              END
                              thisMethod = lastText[1 : p-1]
                           ELSE
                              thisMethod = lastText
                           END
                           thisMethod = CLIP(thisMethod)
                           LOOP p = LEN(thisMethod) TO 1 BY -1
                              IF thisMethod[p] = ' '
                                 BREAK
                              END
                           END
                           IF p > 0
                              thisMethod = thisMethod[p+1 : LEN(thisMethod)]
                           END
                           IF thisMethod[1] = '*' OR thisMethod[1] = '&'
                              thisMethod = thisMethod[2 : LEN(thisMethod)]
                           END
                           thisMethod = CLIP(thisMethod)

                           !if not some sort of initialization '= {' in thisText
                           IF thisMethod[LEN(thisMethod)] <> '=' AND thisMethod <> '""'
                              ProcNameQueue.LineNo = lastTextLine
                              ProcNameQueue.ProcedureName = ''
                              IF thisNamespace
                                 ProcNameQueue.ProcedureName = thisNamespace & '.'
                              END
                              IF thisClass
                                 ProcNameQueue.ProcedureName = ProcNameQueue.ProcedureName & thisClass & '.'
                              END
                              ProcNameQueue.ProcedureName = ProcNameQueue.ProcedureName & thisMethod
                              ADD(ProcNameQueue)
                              !dbx.debugout('[' & ProcNameQueue.LineNo & '] ' & ProcNameQueue.ProcedureName)
                           END
                           InMethod = TRUE
                           nBraceCount += 1
                           lastText = ''
                        ELSE

                           p = INSTRING('}',thisText)
                           LOOP WHILE p
                              nBraceCount -= 1
                              IF p < LEN(thisText)
                                 p = INSTRING('}',thisText,1,p+1)
                              ELSE
                                 p = 0
                              END
                           END
                           IF nBraceCount < nClassCount
                              nClassCount = 0
                              thisClass = ''
                           END

                           p = INSTRING('(',lastText)
                           IF p
                              IF NOT INSTRING(')',lastText,1,p+1)
                                 lastText = lastText & thisText
                              ELSIF lastText[LEN(lastText)] = ':'   |
                                 OR lastText[LEN(lastText)] = ','
                                    lastText = lastText & thisText
                              ELSE
                                 lastText = thisText
                                 lastTextLine = thisLine
                              END
                           ELSE
                              !IF nClassCount = 0
                                 lastText = thisText
                                 lastTextLine = thisLine
                              !END
                           END
                        END
                     END
                  END   !IF InBlockComment
               END   !IF InMethod
            END
         END
      END
   EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
ProcessPythonFile    ROUTINE
   DATA
n                 LONG
p                 LONG
q1                LONG
q2                LONG
InMethod          BOOL(FALSE)
MethodTerminator  CSTRING(21)
nBraceCount       LONG
nClassCount       LONG
thisNamespace     CSTRING(256)
thisClass         CSTRING(256)
thisMethod        CSTRING(256)
lastText          CSTRING(2048)
lastTextLine      LONG
clText            LIKE(thisText)
stopLine          LONG(1)

   CODE
      SET(AsciiFile)
      LOOP
         NEXT(AsciiFile)
         IF ERRORCODE()
            BREAK
         ELSE
            ReplaceTabs(AsciiFile.Buffer)
            thisLine += 1

            IF thisline = stopLine
               x# = 0
            END

            IF thisClass <> '' AND NOT INSTRING(AsciiFile.Buffer[1],' #')
               thisClass = ''
            END

            thisText = CLIP(LEFT(AsciiFile.Buffer))

            !replace tabs with spaces
            p = LEN(thisText)
            LOOP n = 1 TO p
               IF thisText[n] = '<9>'
                  thisText[n] = ' '
               END
            END
            thisText = CLIP(LEFT(thisText))

            IF thisText = ''
               IF NOT INSTRING('(',lastText)
                  lastText = ''
               END
               CYCLE
            ELSE

               !remove comments
               IF thisText[1] = '#'
                  CYCLE
               ELSE
                  p = INSTRING(' #',thisText,1)
                  IF p > 1
                     thisText = CLIP(thisText[1 : p-1])
                   END
               END

               !remove anything in double quotes
               n = 0
               clText = ''
               LOOP p = 1 TO LEN(thisText)
                  IF thisText[p] = '"'
                     n += 1
                     clText[n] = thisText[p]
                     p += 1
                     p = INSTRING('"',thisText,1,p)
                     IF p = 0
                        clText = thisText
                        BREAK
                     ELSE
                        LOOP WHILE thisText[p-1] = '"'  !was it escaped?
                           p = INSTRING('"',thisText,1,p+1)
                           IF p = 0
                              clText = thisText
                              BREAK
                           END
                        END
                        IF p = 0
                           BREAK
                        ELSE
                           n += 1
                           clText[n] = thisText[p]
                        END
                     END
                  ELSE
                     n += 1
                     clText[n] = thisText[p]
                  END
               END
               IF p > LEN(thisText)
                  clText[n+1] = '<0>'
                  thisText = clText
               END
               clText = ''

               IF InMethod
                  !look for terminator
                  IF INSTRING(MethodTerminator,UPPER(CLIP(LEFT(thisText))),1)
                     InMethod = FALSE
                  ELSIF UPPER(CLIP(LEFT(thisText[1 : 4]))) = 'DEF '
                     n = INSTRING('(',thisText)
                     IF n = 0
                        n = LEN(thisText)+1
                     END
                     thisMethod = CLIP(LEFT(thisText[5 : n-1]))
                     InMethod = TRUE
                     MethodTerminator = 'RETURN '
                     ProcNameQueue.LineNo = thisLine
                     ProcNameQueue.ProcedureName = ''
                     IF thisNamespace
                        ProcNameQueue.ProcedureName = thisNamespace & '.'
                     END
                     IF thisClass
                        ProcNameQueue.ProcedureName = ProcNameQueue.ProcedureName & thisClass & '.'
                     END
                     ProcNameQueue.ProcedureName = ProcNameQueue.ProcedureName & thisMethod
                     ADD(ProcNameQueue)
                     !dbx.debugout('[' & ProcNameQueue.LineNo & '] ' & ProcNameQueue.ProcedureName)
                  END
               ELSE   !not in method
                  IF UPPER(CLIP(LEFT(thisText[1 : 6]))) = 'CLASS '
                     n = INSTRING(':',thisText)
                     IF n = 0
                        n = LEN(thisText)+1
                     END
                     thisClass = CLIP(LEFT(thisText[7 : n-1]))

                  ELSIF UPPER(CLIP(LEFT(thisText[1 : 4]))) = 'DEF '
                     n = INSTRING('(',thisText)
                     IF n = 0
                        n = LEN(thisText)+1
                     END
                     thisMethod = CLIP(LEFT(thisText[5 : n-1]))
                     InMethod = TRUE
                     MethodTerminator = 'RETURN '
                     ProcNameQueue.LineNo = thisLine
                     ProcNameQueue.ProcedureName = ''
                     IF thisNamespace
                        ProcNameQueue.ProcedureName = thisNamespace & '.'
                     END
                     IF thisClass
                        ProcNameQueue.ProcedureName = ProcNameQueue.ProcedureName & thisClass & '.'
                     END
                     ProcNameQueue.ProcedureName = ProcNameQueue.ProcedureName & thisMethod
                     ADD(ProcNameQueue)
                     !dbx.debugout('[' & ProcNameQueue.LineNo & '] ' & ProcNameQueue.ProcedureName)
                  END
               END   !IF InMethod
            END
         END
      END
   EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
ProcessVBFile    ROUTINE
   DATA
n                 LONG
p                 LONG
q1                LONG
q2                LONG
InMethod          BOOL(FALSE)
MethodTerminator  CSTRING(21)
nBraceCount       LONG
nClassCount       LONG
thisNamespace     CSTRING(256)
thisClass         CSTRING(256)
thisMethod        CSTRING(256)
lastText          CSTRING(2048)
lastTextLine      LONG
clText            LIKE(thisText)
stopLine          LONG(1)

   CODE
      SET(AsciiFile)
      LOOP
         NEXT(AsciiFile)
         IF ERRORCODE()
            BREAK
         ELSE
            ReplaceTabs(AsciiFile.Buffer)
            thisLine += 1

            IF thisline = stopLine
               x# = 0
            END

            thisText = CLIP(LEFT(AsciiFile.Buffer))

            !replace tabs with spaces
            p = LEN(thisText)
            LOOP n = 1 TO p
               IF thisText[n] = '<9>'
                  thisText[n] = ' '
               END
            END
            thisText = CLIP(LEFT(thisText))

            IF thisText = ''
               IF NOT INSTRING('(',lastText)
                  lastText = ''
               END
               CYCLE
            ELSE

               !remove comments
               IF thisText[1] = ''''
                  CYCLE
               ELSE
                  p = INSTRING(' ''',thisText,1)
                  IF p > 1
                     thisText = CLIP(thisText[1 : p-1])
                   END
               END

               !remove anything in double quotes
               n = 0
               clText = ''
               LOOP p = 1 TO LEN(thisText)
                  IF thisText[p] = '"'
                     n += 1
                     clText[n] = thisText[p]
                     p += 1
                     p = INSTRING('"',thisText,1,p)
                     IF p = 0
                        clText = thisText
                        BREAK
                     ELSE
                        LOOP WHILE thisText[p-1] = '"'  !was it escaped?
                           p = INSTRING('"',thisText,1,p+1)
                           IF p = 0
                              clText = thisText
                              BREAK
                           END
                        END
                        IF p = 0
                           BREAK
                        ELSE
                           n += 1
                           clText[n] = thisText[p]
                        END
                     END
                  ELSE
                     n += 1
                     clText[n] = thisText[p]
                  END
               END
               IF p > LEN(thisText)
                  clText[n+1] = '<0>'
                  thisText = clText
               END
               clText = ''

               IF InMethod
                  !look for terminator
                  IF INSTRING(MethodTerminator,UPPER(CLIP(LEFT(thisText))),1)
                     InMethod = FALSE
                  END
                  CYCLE
               ELSE   !not in method
                  p = INSTRING('NAMESPACE ',UPPER(thisText),1)
                  IF p > 0
                     thisNamespace = CLIP(LEFT(thisText[p+10 : LEN(thisText)]))
                     CYCLE
                  END

                  p = INSTRING('END NAMESPACE',UPPER(thisText),1)
                  IF p > 0
                     thisNamespace = ''
                     CYCLE
                  END

                  p = INSTRING('MODULE ',UPPER(thisText),1)
                  IF p > 0
                     thisClass = CLIP(LEFT(thisText[p+7 : LEN(thisText)]))
                     CYCLE
                  END

                  p = INSTRING('END MODULE',UPPER(thisText),1)
                  IF p > 0
                     thisClass = ''
                     CYCLE
                  END

                  p = INSTRING('CLASS ',UPPER(thisText),1)
                  IF p > 0
                     thisClass = CLIP(LEFT(thisText[p+6 : LEN(thisText)]))
                     p = INSTRING('(',thisClass)
                     IF p > 0
                        thisClass[p] = '<0>'
                     END
                     CYCLE
                  END

                  p = INSTRING('END CLASS',UPPER(thisText),1)
                  IF p > 0
                     thisClass = ''
                     CYCLE
                  END

                  IF INSTRING('(',thisText) AND NOT INSTRING('DECLARE ',UPPER(thisText),1)
                     p = INSTRING('FUNCTION ',UPPER(thisText),1)
                     IF p > 0
                        p += 9
                        n = INSTRING('(',thisText,1,p)
                        IF n > 0
                           thisMethod = CLIP(LEFT(thisText[p : n-1]))
                           InMethod = TRUE
                           MethodTerminator = 'END FUNCTION'
                           ProcNameQueue.LineNo = thisLine
                           ProcNameQueue.ProcedureName = ''
                           IF thisNamespace
                              ProcNameQueue.ProcedureName = thisNamespace & '.'
                           END
                           IF thisClass
                              ProcNameQueue.ProcedureName = ProcNameQueue.ProcedureName & thisClass & '.'
                           END
                           ProcNameQueue.ProcedureName = ProcNameQueue.ProcedureName & thisMethod
                           ADD(ProcNameQueue)
                           !dbx.debugout('[' & ProcNameQueue.LineNo & '] ' & ProcNameQueue.ProcedureName)
                        END
                        CYCLE
                     END

                     p = INSTRING('PROPERTY ',UPPER(thisText),1)
                     IF p > 0
                        p += 9
                        n = INSTRING('(',thisText,1,p)
                        IF n > 0
                           thisMethod = CLIP(LEFT(thisText[p : n-1]))
                           InMethod = TRUE
                           MethodTerminator = 'END PROPERTY'
                           ProcNameQueue.LineNo = thisLine
                           ProcNameQueue.ProcedureName = ''
                           IF thisNamespace
                              ProcNameQueue.ProcedureName = thisNamespace & '.'
                           END
                           IF thisClass
                              ProcNameQueue.ProcedureName = ProcNameQueue.ProcedureName & thisClass & '.'
                           END
                           ProcNameQueue.ProcedureName = ProcNameQueue.ProcedureName & thisMethod
                           ADD(ProcNameQueue)
                           !dbx.debugout('[' & ProcNameQueue.LineNo & '] ' & ProcNameQueue.ProcedureName)
                        END
                        CYCLE
                     END

                     p = INSTRING('SUB ',UPPER(thisText),1)
                     IF p > 0
                        p += 4
                        n = INSTRING('(',thisText,1,p)
                        IF n > 0
                           thisMethod = CLIP(LEFT(thisText[p : n-1]))
                           InMethod = TRUE
                           MethodTerminator = 'END SUB'
                           ProcNameQueue.LineNo = thisLine
                           ProcNameQueue.ProcedureName = ''
                           IF thisNamespace
                              ProcNameQueue.ProcedureName = thisNamespace & '.'
                           END
                           IF thisClass
                              ProcNameQueue.ProcedureName = ProcNameQueue.ProcedureName & thisClass & '.'
                           END
                           ProcNameQueue.ProcedureName = ProcNameQueue.ProcedureName & thisMethod
                           ADD(ProcNameQueue)
                           !dbx.debugout('[' & ProcNameQueue.LineNo & '] ' & ProcNameQueue.ProcedureName)
                        END
                        CYCLE
                     END
                  ELSE
                     CYCLE
                  END
               END   !IF InMethod
            END
         END
      END
   EXIT
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[CALLS]
BrowseQueues
GetCommentStyle
ReplaceTabs
[PROCEDURE]
NAME BrowseQueues
PROTOTYPE '(*ProcNameQueueType ProcNameQueue,*SectionQueueType SectionQueue)'
PARAMETERS '(*ProcNameQueueType ProcNameQueue,*SectionQueueType SectionQueue)'
[COMMON]
FROM ABC Window
MODIFIED '2019/02/15' '15:57:41'
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default', 'WindowToolbar')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('WindowManager')
WHEN  ('WindowToolbar') ('ToolbarClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(),BYTE,PROC,DERIVED', 'Kill {19}PROCEDURE(),BYTE,PROC,DERIVED')

%ReturnValue FIELD  ()
%ProcedureOneInstance LONG  (0)
%WindowOperationMode DEFAULT  ('Use WINDOW setting')
%INISaveWindow LONG  (1)
%ProcedureDisableEnhanceFocus LONG  (0)
%ProcedureUseEnterInsteadTabOverride LONG  (0)
%WindowUseEnterInsteadTab LONG  (1)
%ProcedureUseEnterInsteadTabExcludeListCombo LONG  (0)
%ProcedureUseEnterInsteadTabEnableNextTabStop LONG  (0)
%ProcedureUseEnterInsteadTabExcludeG LONG  (1)
%WindowUseEnterInsteadTabExclude MULTI DEFAULT  ()
%GlobalObject DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('NO')
WHEN  ('WindowToolbar') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ThisWindow')
WHEN  ('WindowToolbar') ('Toolbar')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (0)
WHEN  ('WindowToolbar') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%WindowStyles MULTI LONG  ()
%WindowStyleFontName DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontSize DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontStyle DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontColor DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontCharSet DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStylePicture DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleOtherListboxes MULTI DEFAULT  ()
%ProcedureAutoBindFields MULTI LONG  ()
%ProcedureAutoBindField DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindFieldTPL DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindProcedures MULTI LONG  ()
%ProcedureAutoBindProcedure DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindProcedureTPL DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindFieldsIgnored MULTI LONG  ()
%ProcedureAutoBindFieldIgnored DEPEND %ProcedureAutoBindFieldsIgnored DEFAULT TIMES 0

%ProcedureAutoBindProceduresIgnored MULTI LONG  ()
%ProcedureAutoBindProcedureIgnored DEPEND %ProcedureAutoBindProceduresIgnored DEFAULT TIMES 0

%ProcedureAutoBindValidToAddField LONG  (0)
%ProcedureUserBindFields MULTI LONG  ()
%ProcedureUserBindField DEPEND %ProcedureUserBindFields FIELD TIMES 0

%ProcedureAutoBindFieldIgnore DEPEND %ProcedureAutoBindFields LONG TIMES 0

%ProcedureUserBindProcedures MULTI LONG  ()
%ProcedureUserBindProcedure DEPEND %ProcedureUserBindProcedures PROCEDURE TIMES 0

%ProcedureAutoBindProcedureIgnore DEPEND %ProcedureAutoBindProcedures LONG TIMES 0

%ProcedureUserBindExpressions MULTI LONG  ()
%ProcedureUserBindExpressionName DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ProcedureUserBindExpression DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%PreserveVarsLoc MULTI LONG  ()
%PreserveVarLoc DEPEND %PreserveVarsLoc DEFAULT TIMES 0

%ExtUITabIcon DEPEND %Control DEFAULT TIMES 0

%ExtUITabStyleOverrideGlobal DEPEND %Control LONG TIMES 0

%ExtUITabStyle DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('Default')

%FieldGradientColorType DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('Off')

%FieldGradientColorTypeVariable DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('')

%FieldGradientColorTypeIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%FieldGradientColorFrom DEPEND %Control LONG TIMES 1
WHEN  ('') (-1)

%FieldGradientColorFromVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorFromIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%FieldGradientColorTo DEPEND %Control LONG TIMES 1
WHEN  ('') (-1)

%FieldGradientColorToVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorToIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%ButtonAction DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('No Special Action')

%ButtonRunName DEPEND %Control DEFAULT TIMES 0

%ButtonRunParameters DEPEND %Control DEFAULT TIMES 0

%ButtonProcedure DEPEND %Control PROCEDURE TIMES 0

%ButtonThread DEPEND %Control LONG TIMES 0

%ButtonThreadStack DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('25000')

%ButtonParameters DEPEND %Control DEFAULT TIMES 0

%ButtonReturnValueAssignment DEPEND %Control FIELD TIMES 0

%ButtonReturnValueReferenceAssign DEPEND %Control LONG TIMES 0

%ButtonRequest DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('None')

%ButtonThreadParameters DEPEND %Control DEFAULT TIMES 0

%ButtonThreadReturnValueAssignment DEPEND %Control FIELD TIMES 0

%PreLookupKey DEPEND %Control KEY TIMES 0

%PreLookupField DEPEND %Control COMPONENT TIMES 0

%PreLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PreLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupKey DEPEND %Control KEY TIMES 0

%PostLookupField DEPEND %Control COMPONENT TIMES 0

%PostLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupDuringValidate DEPEND %Control LONG TIMES 1
WHEN  ('') (1)

%LookupAssign DEPEND %Control MULTI LONG TIMES 0

%MoreTarget DEPEND %LookupAssign FIELD TIMES 0

%MoreField DEPEND %LookupAssign DEFAULT TIMES 0

%ForceWindowRefresh DEPEND %Control LONG TIMES 0

%CheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%CheckedAssignVariable DEPEND %CheckedAssigns FIELD TIMES 0

%CheckedAssignValue DEPEND %CheckedAssigns DEFAULT TIMES 0

%CheckedHides DEPEND %Control MULTI LONG TIMES 0

%CheckedControl DEPEND %CheckedHides DEFAULT TIMES 0

%CheckedControlAction DEPEND %CheckedHides DEFAULT TIMES 1
WHEN  ('')TIMES 0

%CheckedEnables DEPEND %Control MULTI LONG TIMES 0

%CheckedControl1 DEPEND %CheckedEnables DEFAULT TIMES 0

%CheckedControl1Action DEPEND %CheckedEnables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%UncheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%UncheckedAssignVariable DEPEND %UncheckedAssigns FIELD TIMES 0

%UncheckedAssignValue DEPEND %UncheckedAssigns DEFAULT TIMES 0

%UnCheckedHides DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl DEPEND %UnCheckedHides DEFAULT TIMES 0

%UnCheckedControlAction DEPEND %UnCheckedHides DEFAULT TIMES 1
WHEN  ('')TIMES 0

%UnCheckedEnables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl1 DEPEND %UnCheckedEnables DEFAULT TIMES 0

%UnCheckedControl1Action DEPEND %UnCheckedEnables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%CheckedDisables DEPEND %Control MULTI LONG TIMES 0

%CheckedDisableControl DEPEND %CheckedDisables DEFAULT TIMES 0

%CheckedDisableControlAction DEPEND %CheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%UnCheckedDisables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedDisableControl DEPEND %UnCheckedDisables DEFAULT TIMES 0

%UnCheckedDisableControlAction DEPEND %UnCheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%ActiveImageEnable DEPEND %Control LONG TIMES 0

%AIObjectName DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('AIBtn0')

%AIEnableMimicControl DEPEND %Control LONG TIMES 1
WHEN  ('') (1)

%AIMimicControl DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('?LIST1')

%AIImgRound DEPEND %Control LONG TIMES 0

%AIOverrideImg DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgVariable DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIDisableImg DEPEND %Control DEFAULT TIMES 0

%AIDisableImgVariable DEPEND %Control DEFAULT TIMES 0

%AIDisableImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIHotImg DEPEND %Control DEFAULT TIMES 0

%AIHotImgVariable DEPEND %Control DEFAULT TIMES 0

%AIHotImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIPressedImg DEPEND %Control DEFAULT TIMES 0

%AIPressedImgVariable DEPEND %Control DEFAULT TIMES 0

%AIPressedImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[WINDOW]
Window  WINDOW('Location Queues'),AT(,,476,225),FONT('Segoe UI Semilight',11),DOUBLE,GRAY, |
          MODAL,SYSTEM
          LIST,AT(16,16,211,196),USE(?LIST1),VSCROLL,FORMAT('40R(1)|M~LINE~C(0)@n10@102' & |
            '4L(2)|M~PROCEDURE~@s255@'),FROM(ProcNameQueue),#FIELDS(ThreadQ:lClock),#ORDINAL(1)
          LIST,AT(241,16,217,196),USE(?LIST2),VSCROLL,FORMAT('40R(1)|M~HIGH LINE~C(0)@n' & |
            '10@40R(1)|M~LOW LINE~C(0)@n10@124L(2)|M~SECTION~@s255@'),FROM(SectionQueue),#ORDINAL(2)
          STRING('Procedure Queue'),AT(16,3),USE(?STRING1),FONT(,14),#ORDINAL(3)
          STRING('Section Queue'),AT(240,3),USE(?STRING2),FONT(,14),#ORDINAL(4)
        END

[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2011/11/16' '12:06:19'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME BuildFileList
PROTOTYPE '(LONG pCurrentLevel, LONG pMaxLevel, *CSTRING pCurrentPath, *CSTRING pFileMask, *FILE:queue pFileQueue)'
PARAMETERS '(LONG pCurrentLevel, LONG pMaxLevel, *CSTRING pCurrentPath, *CSTRING pFileMask, *FILE:queue pFileQueue)'
[COMMON]
FROM ABC Source
MODIFIED '2011/11/16' '13:34:32'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
i                    LONG
j                    LONG
strSemicolon         CSTRING(';')
strBar               CSTRING('|')
strSpace             CSTRING(' ')
strDelimiter         CSTRING(2)
nCurrentLevel        LONG
DirectoryQueue       QUEUE(FILE:queue),PRE(DirectoryQueue)
                     END
szDirectoryName      CSTRING(FILE:MAXFILENAME+1)
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
    IF pCurrentLevel <= pMaxLevel
       !determine filemask delimiter
       IF INSTRING(strSemicolon,pFileMask)
          strDelimiter = strSemicolon
       ELSIF INSTRING(strBar, pFilemask)
          strDelimiter = strBar
       ELSIF INSTRING(strSpace, pFilemask)
          strDelimiter = strSpace
       ELSE
          strDelimiter = ''
       END

       !find all matching files in the current path
       FREE(DirectoryQueue)
       IF LEN(strDelimiter) = 0
          DIRECTORY(DirectoryQueue, pCurrentPath & '\' & pFileMask, ff_:NORMAL)
       ELSE
          i = 1
          j = INSTRING(strDelimiter, pFileMask, 1, i)
          LOOP WHILE j
             DIRECTORY(DirectoryQueue, pCurrentPath & '\' & pFileMask[i : j-1], ff_:NORMAL)
             i = j + 1
             j = INSTRING(strDelimiter, pFileMask, 1, i)
          END
          DIRECTORY(DirectoryQueue, pCurrentPath & '\' & pFileMask[i : LEN(pFileMask)], ff_:NORMAL)
       END
       LOOP i = 1 TO RECORDS(DirectoryQueue)
          GET(DirectoryQueue,i)
          DirectoryQueue.Name = pCurrentPath & '\' & CLIP(DirectoryQueue.Name)
          pFileQueue = DirectoryQueue
          ADD(pFileQueue)
       END

       !find all subdirectories in current path
       FREE(DirectoryQueue)
       DIRECTORY(DirectoryQueue, pCurrentPath & '\*.*', ff_:DIRECTORY)
       LOOP i = 1 TO RECORDS(DirectoryQueue)
          GET(DirectoryQueue,i)
          IF BOR(DirectoryQueue.Attrib,ff_:DIRECTORY)
             CASE CLIP(DirectoryQueue.Name)
               OF '.' OROF '..'
             ELSE
                szDirectoryName = pCurrentPath & '\' & CLIP(DirectoryQueue.Name)
                BuildFileList(pCurrentLevel+1, pMaxLevel, szDirectoryName, pFileMask, pFileQueue)
             END
          END
       END
    END
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2011/11/17' '11:17:58'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME UserOptions
PROTOTYPE '(LONG MaxStyleIndex, *CSTRING szInstallProgram),BOOL'
PARAMETERS '(LONG MaxStyleIndex, *CSTRING szInstallProgram)'
[COMMON]
DESCRIPTION 'User Options'
FROM ABC Window
MODIFIED '2019/02/18' '14:59:24'
[DATA]
[SCREENCONTROLS]
! PROMPT('this Edit Command:'),USE(?thisEditCommand:Prompt)
! ENTRY(@s20),USE(thisEditCommand)
[REPORTCONTROLS]
! STRING(@s20),USE(thisEditCommand)
thisEditCommand          LIKE(glo:szEditorCommand)
!!> GUID('e768b143-0f6e-41fa-97d4-acaf79871073'),PROMPT('this Edit Command:'),HEADER('this Edit Command'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('b Properties Changed:'),USE(?bPropertiesChanged:Prompt)
! ENTRY(@s20),USE(bPropertiesChanged)
[REPORTCONTROLS]
! STRING(@s20),USE(bPropertiesChanged)
bPropertiesChanged       BOOL
!!> GUID('549d02b6-c5ef-48d1-afd2-008881182b3b'),INITIAL('FALSE'),PROMPT('b Properties Changed:'),HEADER('b Properties Changed'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('loc : Splitter Orientation:'),USE(?loc:SplitterOrientation:Prompt)
! ENTRY(@n3),USE(loc:SplitterOrientation)
[REPORTCONTROLS]
! STRING(@n3),USE(loc:SplitterOrientation)
loc:SplitterOrientation  BYTE
!!> GUID('a7c1389c-3476-4b5b-8891-eecc3d70de06'),PROMPT('loc : Splitter Orientation:'),HEADER('loc : Splitter Orientation'),PICTURE(@n3),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('loc : sz Clarion Help File:'),USE(?loc:szClarionHelpFile:Prompt)
! ENTRY(@s255),USE(loc:szClarionHelpFile)
[REPORTCONTROLS]
! STRING(@s255),USE(loc:szClarionHelpFile)
loc:szClarionHelpFile    CSTRING(260)
!!> GUID('5acc2535-ed32-47a4-ab7f-db6119cf830d'),PROMPT('loc : sz Clarion Help File:'),HEADER('loc : sz Clarion Help File'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('loc : sz Versio:'),USE(?loc:szVersio:Prompt)
! ENTRY(@s22),USE(loc:szVersio)
[REPORTCONTROLS]
! STRING(@s22),USE(loc:szVersio)
loc:szVersion            CSTRING(23)
!!> GUID('312ffd7c-8e81-4ed9-a0c5-9d4c88e49da2'),PROMPT('loc : sz Versio:'),HEADER('loc : sz Versio'),PICTURE(@s22),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('loc : n Delete Warning Count:'),USE(?loc:nDeleteWarningCount:Prompt)
! ENTRY(@n-14),USE(loc:nDeleteWarningCount),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(loc:nDeleteWarningCount),RIGHT(1)
loc:nDeleteWarningCount  LONG
!!> GUID('eab68bba-e020-436c-879a-81f405c6014f'),PROMPT('loc : n Delete Warning Count:'),HEADER('loc : n Delete Warning Count'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('loc : Plus Key String:'),USE(?loc:PlusKeyString:Prompt)
! ENTRY(@s80),USE(loc:PlusKeyString)
[REPORTCONTROLS]
! STRING(@s80),USE(loc:PlusKeyString)
loc:PlusKeyString        CSTRING(81)
!!> GUID('b1b34e41-bee4-4ed9-9080-dca055c6bb54'),PROMPT('loc : Plus Key String:'),HEADER('loc : Plus Key String'),PICTURE(@s80),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('loc : Plus Key String:'),USE(?loc:PlusKeyTipString:Prompt)
! ENTRY(@s127),USE(loc:PlusKeyTipString)
[REPORTCONTROLS]
! STRING(@s127),USE(loc:PlusKeyTipString)
loc:PlusKeyTipString     CSTRING(128)
!!> GUID('de727e1c-98c7-40ae-91ff-7ebd94efed8b'),PROMPT('loc : Plus Key String:'),HEADER('loc : Plus Key String'),PICTURE(@s127),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('loc : Minus Key String:'),USE(?loc:MinusKeyString:Prompt)
! ENTRY(@s80),USE(loc:MinusKeyString)
[REPORTCONTROLS]
! STRING(@s80),USE(loc:MinusKeyString)
loc:MinusKeyString       CSTRING(81)
!!> GUID('0e4494f7-c69d-4c8d-a3ce-aff40fe1def4'),PROMPT('loc : Minus Key String:'),HEADER('loc : Minus Key String'),PICTURE(@s80),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('loc : Minus Key String:'),USE(?loc:MinusKeyTipString:Prompt)
! ENTRY(@s127),USE(loc:MinusKeyTipString)
[REPORTCONTROLS]
! STRING(@s127),USE(loc:MinusKeyTipString)
loc:MinusKeyTipString    CSTRING(128)
!!> GUID('827d7d39-8edc-47d8-872f-ac9a4ea91183'),PROMPT('loc : Minus Key String:'),HEADER('loc : Minus Key String'),PICTURE(@s127),TYPEMODE(INS)
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default', 'WindowToolbar')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('WindowManager')
WHEN  ('WindowToolbar') ('ToolbarClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(),BYTE,PROC,DERIVED', 'Kill {19}PROCEDURE(),BYTE,PROC,DERIVED', |
  'Reset {18}PROCEDURE(BYTE Force=0),DERIVED', 'TakeAccepted {11}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeFieldEvent {9}PROCEDURE(),BYTE,PROC,DERIVED', 'TakeNewSelection       PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeWindowEvent        PROCEDURE(),BYTE,PROC,DERIVED')

%ReturnValue FIELD  (bPropertiesChanged)
%WindowOperationMode DEFAULT  ('Use WINDOW setting')
%INISaveWindow LONG  (1)
%ProcedureDisableEnhanceFocus LONG  (0)
%ProcedureUseEnterInsteadTabOverride LONG  (0)
%WindowUseEnterInsteadTab LONG  (1)
%ProcedureUseEnterInsteadTabExcludeListCombo LONG  (0)
%ProcedureUseEnterInsteadTabEnableNextTabStop LONG  (0)
%ProcedureUseEnterInsteadTabExcludeG LONG  (1)
%WindowUseEnterInsteadTabExclude MULTI DEFAULT  ()
%GlobalObject DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('NO')
WHEN  ('WindowToolbar') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ThisWindow')
WHEN  ('WindowToolbar') ('Toolbar')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (0)
WHEN  ('WindowToolbar') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%WindowStyles MULTI LONG  (1, 2, 3)
%WindowStyleFontName DEPEND %WindowStyles DEFAULT TIMES 3
WHEN  (1) ('Segoe UI')
WHEN  (2) ('Segoe UI')
WHEN  (3) ('Segoe UI')

%WindowStyleFontNameVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameIsVariable DEPEND %WindowStyles LONG TIMES 3
WHEN  (1) (0)
WHEN  (2) (0)
WHEN  (3) (0)

%WindowStyleFontSize DEPEND %WindowStyles DEFAULT TIMES 3
WHEN  (1) ('10')
WHEN  (2) ('10')
WHEN  (3) ('10')

%WindowStyleFontSizeVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeIsVariable DEPEND %WindowStyles LONG TIMES 3
WHEN  (1) (0)
WHEN  (2) (0)
WHEN  (3) (0)

%WindowStyleFontStyle DEPEND %WindowStyles DEFAULT TIMES 3
WHEN  (1) ('700')
WHEN  (2) ('4496')
WHEN  (3) ('4796')

%WindowStyleFontStyleVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleIsVariable DEPEND %WindowStyles LONG TIMES 3
WHEN  (1) (0)
WHEN  (2) (0)
WHEN  (3) (0)

%WindowStyleFontColor DEPEND %WindowStyles DEFAULT TIMES 3
WHEN  (1) ('0')
WHEN  (2) ('0')
WHEN  (3) ('0')

%WindowStyleFontCharSet DEPEND %WindowStyles DEFAULT TIMES 3
WHEN  (1) ('1')
WHEN  (2) ('1')
WHEN  (3) ('1')

%WindowStyleForegroundNormal DEPEND %WindowStyles LONG TIMES 3
WHEN  (1) (-1)
WHEN  (2) (-1)
WHEN  (3) (-1)

%WindowStyleForegroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 3
WHEN  (1) (0)
WHEN  (2) (0)
WHEN  (3) (0)

%WindowStyleBackgroundNormal DEPEND %WindowStyles LONG TIMES 3
WHEN  (1) (-1)
WHEN  (2) (-1)
WHEN  (3) (-1)

%WindowStyleBackgroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 3
WHEN  (1) (0)
WHEN  (2) (0)
WHEN  (3) (0)

%WindowStyleForegroundSelected DEPEND %WindowStyles LONG TIMES 3
WHEN  (1) (-1)
WHEN  (2) (-1)
WHEN  (3) (-1)

%WindowStyleForegroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 3
WHEN  (1) (0)
WHEN  (2) (0)
WHEN  (3) (0)

%WindowStyleBackgroundSelected DEPEND %WindowStyles LONG TIMES 3
WHEN  (1) (-1)
WHEN  (2) (-1)
WHEN  (3) (-1)

%WindowStyleBackgroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 3
WHEN  (1) (0)
WHEN  (2) (0)
WHEN  (3) (0)

%WindowStylePicture DEPEND %WindowStyles DEFAULT TIMES 3
WHEN  (1) ('')
WHEN  (2) ('')
WHEN  (3) ('')

%WindowStylePictureVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureIsVariable DEPEND %WindowStyles LONG TIMES 3
WHEN  (1) (0)
WHEN  (2) (0)
WHEN  (3) (0)

%WindowStyleOtherListboxes MULTI DEFAULT  ()
%ProcedureAutoBindFields MULTI LONG  ()
%ProcedureAutoBindField DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindFieldTPL DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindProcedures MULTI LONG  ()
%ProcedureAutoBindProcedure DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindProcedureTPL DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindFieldsIgnored MULTI LONG  ()
%ProcedureAutoBindFieldIgnored DEPEND %ProcedureAutoBindFieldsIgnored DEFAULT TIMES 0

%ProcedureAutoBindProceduresIgnored MULTI LONG  ()
%ProcedureAutoBindProcedureIgnored DEPEND %ProcedureAutoBindProceduresIgnored DEFAULT TIMES 0

%ProcedureAutoBindValidToAddField LONG  (0)
%ProcedureUserBindFields MULTI LONG  ()
%ProcedureUserBindField DEPEND %ProcedureUserBindFields FIELD TIMES 0

%ProcedureAutoBindFieldIgnore DEPEND %ProcedureAutoBindFields LONG TIMES 0

%ProcedureUserBindProcedures MULTI LONG  ()
%ProcedureUserBindProcedure DEPEND %ProcedureUserBindProcedures PROCEDURE TIMES 0

%ProcedureAutoBindProcedureIgnore DEPEND %ProcedureAutoBindProcedures LONG TIMES 0

%ProcedureUserBindExpressions MULTI LONG  ()
%ProcedureUserBindExpressionName DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ProcedureUserBindExpression DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ExtUITabIcon DEPEND %Control DEFAULT TIMES 0

%ExtUITabStyleOverrideGlobal DEPEND %Control LONG TIMES 0

%ExtUITabStyle DEPEND %Control DEFAULT TIMES 6
WHEN  ('?LookupFile') ('Default')
WHEN  ('?LookupSendToCommand') ('Default')
WHEN  ('?cmdApply') ('Default')
WHEN  ('?cmdPropertyEditor') ('Default')
WHEN  ('?cmdRegisterNow') ('Default')
WHEN  ('?thisEditCommand') ('Default')

%ButtonAction DEPEND %Control DEFAULT TIMES 18
WHEN  ('?ApplicationColorButton') ('No Special Action')
WHEN  ('?BookmarkBackColorButton') ('No Special Action')
WHEN  ('?Change') ('No Special Action')
WHEN  ('?Delete') ('No Special Action')
WHEN  ('?Insert') ('No Special Action')
WHEN  ('?LookupFile') ('No Special Action')
WHEN  ('?LookupSendToCommand') ('No Special Action')
WHEN  ('?SelectedBackColorButton') ('No Special Action')
WHEN  ('?ToolbarColorButton') ('No Special Action')
WHEN  ('?cmdApply') ('No Special Action')
WHEN  ('?cmdDefault') ('No Special Action')
WHEN  ('?cmdDeletePropertyFile') ('No Special Action')
WHEN  ('?cmdFontDialog') ('No Special Action')
WHEN  ('?cmdGetMinusKey') ('No Special Action')
WHEN  ('?cmdGetPlusKey') ('No Special Action')
WHEN  ('?cmdPropertyEditor') ('No Special Action')
WHEN  ('?cmdRegisterNow') ('No Special Action')
WHEN  ('?thisEditCommand') ('No Special Action')

%ButtonRunName DEPEND %Control DEFAULT TIMES 3
WHEN  ('?LookupFile') ('')
WHEN  ('?LookupSendToCommand') ('')
WHEN  ('?cmdPropertyEditor') ('')

%ButtonRunParameters DEPEND %Control DEFAULT TIMES 3
WHEN  ('?LookupFile') ('')
WHEN  ('?LookupSendToCommand') ('')
WHEN  ('?cmdPropertyEditor') ('')

%ButtonProcedure DEPEND %Control PROCEDURE TIMES 3
WHEN  ('?LookupFile') ()
WHEN  ('?LookupSendToCommand') ()
WHEN  ('?cmdPropertyEditor') ()

%ButtonThread DEPEND %Control LONG TIMES 3
WHEN  ('?LookupFile') (0)
WHEN  ('?LookupSendToCommand') (0)
WHEN  ('?cmdPropertyEditor') (0)

%ButtonThreadStack DEPEND %Control DEFAULT TIMES 18
WHEN  ('?ApplicationColorButton') ('25000')
WHEN  ('?BookmarkBackColorButton') ('25000')
WHEN  ('?Change') ('25000')
WHEN  ('?Delete') ('25000')
WHEN  ('?Insert') ('25000')
WHEN  ('?LookupFile') ('25000')
WHEN  ('?LookupSendToCommand') ('25000')
WHEN  ('?SelectedBackColorButton') ('25000')
WHEN  ('?ToolbarColorButton') ('25000')
WHEN  ('?cmdApply') ('25000')
WHEN  ('?cmdDefault') ('25000')
WHEN  ('?cmdDeletePropertyFile') ('25000')
WHEN  ('?cmdFontDialog') ('25000')
WHEN  ('?cmdGetMinusKey') ('25000')
WHEN  ('?cmdGetPlusKey') ('25000')
WHEN  ('?cmdPropertyEditor') ('25000')
WHEN  ('?cmdRegisterNow') ('25000')
WHEN  ('?thisEditCommand') ('25000')

%ButtonParameters DEPEND %Control DEFAULT TIMES 3
WHEN  ('?LookupFile') ('')
WHEN  ('?LookupSendToCommand') ('')
WHEN  ('?cmdPropertyEditor') ('')

%ButtonReturnValueAssignment DEPEND %Control FIELD TIMES 3
WHEN  ('?LookupFile') ()
WHEN  ('?LookupSendToCommand') ()
WHEN  ('?cmdPropertyEditor') ()

%ButtonReturnValueReferenceAssign DEPEND %Control LONG TIMES 3
WHEN  ('?LookupFile') (0)
WHEN  ('?LookupSendToCommand') (0)
WHEN  ('?cmdPropertyEditor') (0)

%ButtonRequest DEPEND %Control DEFAULT TIMES 18
WHEN  ('?ApplicationColorButton') ('None')
WHEN  ('?BookmarkBackColorButton') ('None')
WHEN  ('?Change') ('None')
WHEN  ('?Delete') ('None')
WHEN  ('?Insert') ('None')
WHEN  ('?LookupFile') ('None')
WHEN  ('?LookupSendToCommand') ('None')
WHEN  ('?SelectedBackColorButton') ('None')
WHEN  ('?ToolbarColorButton') ('None')
WHEN  ('?cmdApply') ('None')
WHEN  ('?cmdDefault') ('None')
WHEN  ('?cmdDeletePropertyFile') ('None')
WHEN  ('?cmdFontDialog') ('None')
WHEN  ('?cmdGetMinusKey') ('None')
WHEN  ('?cmdGetPlusKey') ('None')
WHEN  ('?cmdPropertyEditor') ('None')
WHEN  ('?cmdRegisterNow') ('None')
WHEN  ('?thisEditCommand') ('None')

%ButtonThreadParameters DEPEND %Control DEFAULT TIMES 3
WHEN  ('?LookupFile') ('')
WHEN  ('?LookupSendToCommand') ('')
WHEN  ('?cmdPropertyEditor') ('')

%ButtonThreadReturnValueAssignment DEPEND %Control FIELD TIMES 3
WHEN  ('?LookupFile') ()
WHEN  ('?LookupSendToCommand') ()
WHEN  ('?cmdPropertyEditor') ()

%PreLookupKey DEPEND %Control KEY TIMES 0

%PreLookupField DEPEND %Control COMPONENT TIMES 0

%PreLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PreLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupKey DEPEND %Control KEY TIMES 0

%PostLookupField DEPEND %Control COMPONENT TIMES 0

%PostLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupDuringValidate DEPEND %Control LONG TIMES 14
WHEN  ('?LookupFile') (1)
WHEN  ('?LookupSendToCommand') (1)
WHEN  ('?cmdApply') (1)
WHEN  ('?cmdPropertyEditor') (1)
WHEN  ('?cmdRegisterNow') (1)
WHEN  ('?glo:RestorePointTimerInterval') (1)
WHEN  ('?loc:nDeleteWarningCount:2') (1)
WHEN  ('?loc:sApplicationColor') (1)
WHEN  ('?loc:sBookmarkBackColor') (1)
WHEN  ('?loc:sSelectedBackColor') (1)
WHEN  ('?loc:sToolbarColor') (1)
WHEN  ('?loc:szClarionHelpFile') (1)
WHEN  ('?szFontDescription') (1)
WHEN  ('?thisEditCommand') (1)

%LookupAssign DEPEND %Control MULTI LONG TIMES 0

%MoreTarget DEPEND %LookupAssign FIELD TIMES 0

%MoreField DEPEND %LookupAssign DEFAULT TIMES 0

%ForceWindowRefresh DEPEND %Control LONG TIMES 0

%CheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%CheckedAssignVariable DEPEND %CheckedAssigns FIELD TIMES 0

%CheckedAssignValue DEPEND %CheckedAssigns DEFAULT TIMES 0

%CheckedHides DEPEND %Control MULTI LONG TIMES 0

%CheckedControl DEPEND %CheckedHides DEFAULT TIMES 0

%CheckedControlAction DEPEND %CheckedHides DEFAULT TIMES 6
WHEN  ('?LookupFile')TIMES 0
WHEN  ('?LookupSendToCommand')TIMES 0
WHEN  ('?cmdApply')TIMES 0
WHEN  ('?cmdPropertyEditor')TIMES 0
WHEN  ('?cmdRegisterNow')TIMES 0
WHEN  ('?thisEditCommand')TIMES 0

%CheckedEnables DEPEND %Control MULTI LONG TIMES 0

%CheckedControl1 DEPEND %CheckedEnables DEFAULT TIMES 0

%CheckedControl1Action DEPEND %CheckedEnables DEFAULT TIMES 6
WHEN  ('?LookupFile')TIMES 0
WHEN  ('?LookupSendToCommand')TIMES 0
WHEN  ('?cmdApply')TIMES 0
WHEN  ('?cmdPropertyEditor')TIMES 0
WHEN  ('?cmdRegisterNow')TIMES 0
WHEN  ('?thisEditCommand')TIMES 0

%UncheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%UncheckedAssignVariable DEPEND %UncheckedAssigns FIELD TIMES 0

%UncheckedAssignValue DEPEND %UncheckedAssigns DEFAULT TIMES 0

%UnCheckedHides DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl DEPEND %UnCheckedHides DEFAULT TIMES 0

%UnCheckedControlAction DEPEND %UnCheckedHides DEFAULT TIMES 6
WHEN  ('?LookupFile')TIMES 0
WHEN  ('?LookupSendToCommand')TIMES 0
WHEN  ('?cmdApply')TIMES 0
WHEN  ('?cmdPropertyEditor')TIMES 0
WHEN  ('?cmdRegisterNow')TIMES 0
WHEN  ('?thisEditCommand')TIMES 0

%UnCheckedEnables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl1 DEPEND %UnCheckedEnables DEFAULT TIMES 0

%UnCheckedControl1Action DEPEND %UnCheckedEnables DEFAULT TIMES 6
WHEN  ('?LookupFile')TIMES 0
WHEN  ('?LookupSendToCommand')TIMES 0
WHEN  ('?cmdApply')TIMES 0
WHEN  ('?cmdPropertyEditor')TIMES 0
WHEN  ('?cmdRegisterNow')TIMES 0
WHEN  ('?thisEditCommand')TIMES 0

%CheckedDisables DEPEND %Control MULTI LONG TIMES 0

%CheckedDisableControl DEPEND %CheckedDisables DEFAULT TIMES 0

%CheckedDisableControlAction DEPEND %CheckedDisables DEFAULT TIMES 6
WHEN  ('?LookupFile')TIMES 0
WHEN  ('?LookupSendToCommand')TIMES 0
WHEN  ('?cmdApply')TIMES 0
WHEN  ('?cmdPropertyEditor')TIMES 0
WHEN  ('?cmdRegisterNow')TIMES 0
WHEN  ('?thisEditCommand')TIMES 0

%UnCheckedDisables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedDisableControl DEPEND %UnCheckedDisables DEFAULT TIMES 0

%UnCheckedDisableControlAction DEPEND %UnCheckedDisables DEFAULT TIMES 6
WHEN  ('?LookupFile')TIMES 0
WHEN  ('?LookupSendToCommand')TIMES 0
WHEN  ('?cmdApply')TIMES 0
WHEN  ('?cmdPropertyEditor')TIMES 0
WHEN  ('?cmdRegisterNow')TIMES 0
WHEN  ('?thisEditCommand')TIMES 0

%ProcedureOneInstance LONG  (0)
%FieldGradientColorType DEPEND %Control DEFAULT TIMES 6
WHEN  ('?Panel1') ('Off')
WHEN  ('?loc:sApplicationColorBox') ('Off')
WHEN  ('?loc:sBookmarkBackColorBox') ('Off')
WHEN  ('?loc:sResultListColorBox') ('Off')
WHEN  ('?loc:sSelectedBackColorBox') ('Off')
WHEN  ('?loc:sToolbarColorBox') ('Off')

%FieldGradientColorTypeVariable DEPEND %Control DEFAULT TIMES 6
WHEN  ('?Panel1') ('')
WHEN  ('?loc:sApplicationColorBox') ('')
WHEN  ('?loc:sBookmarkBackColorBox') ('')
WHEN  ('?loc:sResultListColorBox') ('')
WHEN  ('?loc:sSelectedBackColorBox') ('')
WHEN  ('?loc:sToolbarColorBox') ('')

%FieldGradientColorTypeIsVariable DEPEND %Control LONG TIMES 6
WHEN  ('?Panel1') (0)
WHEN  ('?loc:sApplicationColorBox') (0)
WHEN  ('?loc:sBookmarkBackColorBox') (0)
WHEN  ('?loc:sResultListColorBox') (0)
WHEN  ('?loc:sSelectedBackColorBox') (0)
WHEN  ('?loc:sToolbarColorBox') (0)

%FieldGradientColorFrom DEPEND %Control LONG TIMES 6
WHEN  ('?Panel1') (-1)
WHEN  ('?loc:sApplicationColorBox') (-1)
WHEN  ('?loc:sBookmarkBackColorBox') (-1)
WHEN  ('?loc:sResultListColorBox') (-1)
WHEN  ('?loc:sSelectedBackColorBox') (-1)
WHEN  ('?loc:sToolbarColorBox') (-1)

%FieldGradientColorFromVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorFromIsVariable DEPEND %Control LONG TIMES 6
WHEN  ('?Panel1') (0)
WHEN  ('?loc:sApplicationColorBox') (0)
WHEN  ('?loc:sBookmarkBackColorBox') (0)
WHEN  ('?loc:sResultListColorBox') (0)
WHEN  ('?loc:sSelectedBackColorBox') (0)
WHEN  ('?loc:sToolbarColorBox') (0)

%FieldGradientColorTo DEPEND %Control LONG TIMES 6
WHEN  ('?Panel1') (-1)
WHEN  ('?loc:sApplicationColorBox') (-1)
WHEN  ('?loc:sBookmarkBackColorBox') (-1)
WHEN  ('?loc:sResultListColorBox') (-1)
WHEN  ('?loc:sSelectedBackColorBox') (-1)
WHEN  ('?loc:sToolbarColorBox') (-1)

%FieldGradientColorToVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorToIsVariable DEPEND %Control LONG TIMES 6
WHEN  ('?Panel1') (0)
WHEN  ('?loc:sApplicationColorBox') (0)
WHEN  ('?loc:sBookmarkBackColorBox') (0)
WHEN  ('?loc:sResultListColorBox') (0)
WHEN  ('?loc:sSelectedBackColorBox') (0)
WHEN  ('?loc:sToolbarColorBox') (0)

%PreserveVarsLoc MULTI LONG  ()
%PreserveVarLoc DEPEND %PreserveVarsLoc DEFAULT TIMES 0

%ActiveImageEnable DEPEND %Control LONG TIMES 0

%AIObjectName DEPEND %Control DEFAULT TIMES 0

%AIEnableMimicControl DEPEND %Control LONG TIMES 0

%AIMimicControl DEPEND %Control DEFAULT TIMES 0

%AIImgRound DEPEND %Control LONG TIMES 0

%AIOverrideImg DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgVariable DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgIsVariable DEPEND %Control LONG TIMES 0

%AIDisableImg DEPEND %Control DEFAULT TIMES 0

%AIDisableImgVariable DEPEND %Control DEFAULT TIMES 0

%AIDisableImgIsVariable DEPEND %Control LONG TIMES 0

%AIHotImg DEPEND %Control DEFAULT TIMES 0

%AIHotImgVariable DEPEND %Control DEFAULT TIMES 0

%AIHotImgIsVariable DEPEND %Control LONG TIMES 0

%AIPressedImg DEPEND %Control DEFAULT TIMES 0

%AIPressedImgVariable DEPEND %Control DEFAULT TIMES 0

%AIPressedImgIsVariable DEPEND %Control LONG TIMES 0

[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
STYLE:NORMAL      EQUATE(0)
STYLE:BOLD        EQUATE(1)
STYLE:ITALIC      EQUATE(2)
STYLE:BOLDITALIC  EQUATE(3)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
keyCodeName       ctKssKeyCodeName

PropertyFileQueue          QUEUE
FileName                      CSTRING(MAXFILE)
FilenameStyle                 LONG
FilePath                      CSTRING(MAXPATH)
IsReadOnly                    BOOL
                           END
bReadOnly                  BOOL
szSearchFolder             CSTRING(MAXPATH)
loc:SelectedBack           LONG
loc:sSelectedBackColor     STRING(30)
loc:BookmarkBack           LONG
loc:sBookmarkBackColor     STRING(30)
loc:ApplicationColor       LONG
loc:sApplicationColor      STRING(30)
loc:ToolbarColor           LONG
loc:sToolbarColor          STRING(30)
loc:PlusKey                LONG
loc:MinusKey               LONG
szFontDescription          CSTRING(64)                           !
szFontName                 CSTRING(32)                           !
nFontSize                  BYTE                                  !
lForeColor                 LONG
nFontStyle                 LONG
DefaultErrors              GROUP
Number                        USHORT(1)
                              USHORT(Msg:ConfirmDelete)
                              BYTE(Level:User)
                              PSTRING('Confirm Delete')
                              PSTRING('Are you sure you want to delete the %File properties file?')
                           END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6300
PROPERTY:END
QEIP1::FileExtension CLASS(EditEntryClass)
CreateControl          PROCEDURE(),DERIVED                      ! Method added to host embed code
TakeAccepted           PROCEDURE(BYTE Action),BYTE,DERIVED      ! Method added to host embed code
                     END
[END]
EMBED %WindowManagerMethodCodeSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2700
PROPERTY:END
GlobalErrors.AddErrors(DefaultErrors)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7800
PROPERTY:END
DO FillPropertyFileQueue

loc:MinusKeyString = 'Previous Result Line assigned to ' & CLIP(KeyCodeName.ToName(glo:MinusKey))
loc:MinusKeyTipString = 'The ''Jump to Previous Line in Results List'' function is assigned to the ' & CLIP(KeyCodeName.ToName(glo:MinusKey))

loc:PlusKeyString = 'Next Result Line assigned to ' & CLIP(KeyCodeName.ToName(glo:PlusKey))
loc:PlusKeyTipString  = 'The ''Jump to Next Line in Results List'' function is assigned to the ' & CLIP(KeyCodeName.ToName(glo:PlusKey))

glo:OldMinusKey = glo:MinusKey
glo:OldPlusKey = glo:PlusKey
loc:MinusKey = glo:MinusKey
loc:PlusKey  = glo:PlusKey
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8005
PROPERTY:END
?loc:MinusKeyStringRegion{PROP:Tip} = loc:MinusKeyTipString
?loc:PlusKeyStringRegion{PROP:Tip} = loc:PlusKeyTipString
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8020
PROPERTY:END
?lbPropertyFiles{PROP:Selected} = 1
GET(PropertyFileQueue,1)
CASE PropertyFileQueue.FilenameStyle
  OF STYLE:NORMAL
     ?cmdDefault{PROP:Disable} = FALSE
  OF STYLE:BOLD
     ?cmdDefault{PROP:Disable} = TRUE
  OF STYLE:ITALIC
     ?cmdDefault{PROP:Disable} = FALSE
  OF STYLE:BOLDITALIC
     ?cmdDefault{PROP:Disable} = TRUE
END
?cmdDeletePropertyFile{PROP:Disable} = PropertyFileQueue.IsReadOnly
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8040
PROPERTY:END
OMIT('Original_Code')
IF RegisteredTo = UNREGISTERED_COPY
   UNHIDE(?cmdRegisterNow)
ELSE
   ?cmdRegisterNow{PROP:Text} = 'Check for Update'
   UNHIDE(?cmdRegisterNow)
END
!Original_Code
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8400
PROPERTY:END
CorrectForOffscreen(Window)

thisEditCommand = glo:szEditorCommand

szFontName  = glo:ResultListFontName
nFontSize   = glo:ResultListFontSize
lForeColor  = glo:ResultListForeColor
nFontStyle  = glo:ResultListFontStyle
DO GetFontDescription

CASE glo:ApplicationColor
  OF COLOR:GRADIENTACTIVECAPTION
     loc:ApplicationColor = kcr_GetSysColor(COLOR_GRADIENTACTIVECAPTION)
  OF COLOR:GRADIENTINACTIVECAPTION
     loc:ApplicationColor = kcr_GetSysColor(COLOR_GRADIENTINACTIVECAPTION)
ELSE
     loc:ApplicationColor = glo:ApplicationColor
END
CASE glo:ToolbarColor
  OF COLOR:GRADIENTACTIVECAPTION
     loc:ToolbarColor = kcr_GetSysColor(COLOR_GRADIENTACTIVECAPTION)
  OF COLOR:GRADIENTINACTIVECAPTION
     loc:ToolbarColor = kcr_GetSysColor(COLOR_GRADIENTINACTIVECAPTION)
ELSE
     loc:ToolbarColor = glo:ToolbarColor
END
loc:SelectedBack = glo:SelectedBack
loc:BookmarkBack = glo:BookmarkBack
loc:SplitterOrientation = glo:SplitterOrientation
loc:szVersion    = 'Version ' & glo:szVersion
loc:szClarionHelpFile = glo:szClarionHelpFile
loc:nDeleteWarningCount = glo:nDeleteWarningCount
?loc:nDeleteWarningCount{PROP:From} = 'Never|#0|Always|#1|When|#' & CHOOSE(loc:nDeleteWarningCount > 1,loc:nDeleteWarningCount,2)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8800
PROPERTY:END
FileLookup3.Flags=BOR(FileLookup3.Flags,FILE:KeepDir)    ! Return to start directory
FileLookup4.Flags=BOR(FileLookup4.Flags,FILE:KeepDir)    ! Return to start directory
[END]
[END]
WHEN 'Reset'
[INSTANCES]
WHEN '(BYTE Force=0)'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
!Color Options
!======================================================================================
?loc:sApplicationColorBox{PROP:Fill} = loc:ApplicationColor
loc:sApplicationColor = srcGetColorString(loc:ApplicationColor)

?loc:sToolbarColorBox{PROP:Fill} = loc:ToolbarColor
loc:sToolbarColor = srcGetColorString(loc:ToolbarColor)

?loc:sResultListColorBox{PROP:Fill} = lForeColor
DO GetFontDescription

?loc:sSelectedBackColorBox{PROP:Fill} = loc:SelectedBack
loc:sSelectedBackColor = srcGetColorString(loc:SelectedBack)

?loc:sBookmarkBackColorBox{PROP:Fill} = loc:BookmarkBack
loc:sBookmarkBackColor = srcGetColorString(loc:BookmarkBack)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8800
PROPERTY:END
IF RECORDS(EditorQueue) > 1
   ENABLE(?glo:PromptForEditor)
ELSE
   glo:PromptForEditor = FALSE
   DISABLE(?glo:PromptForEditor)
   DISPLAY(?glo:PromptForEditor)
END

IF glo:bAllExtensions = TRUE
   DISABLE(?ClarionExtensions:Group)
ELSE
   ENABLE(?ClarionExtensions:Group)
END

IF loc:nDeleteWarningCount < 2
   HIDE(?RemovingAtLeast,?loc:nDeleteWarningCount:2)
ELSE
   UNHIDE(?RemovingAtLeast,?loc:nDeleteWarningCount:2)
END

GET(PropertyFileQueue,CHOICE(?lbPropertyFiles))
CASE PropertyFileQueue.FilenameStyle
  OF STYLE:NORMAL
     ?cmdDefault{PROP:Disable} = FALSE
  OF STYLE:BOLD
     ?cmdDefault{PROP:Disable} = TRUE
  OF STYLE:ITALIC
     ?cmdDefault{PROP:Disable} = FALSE
  OF STYLE:BOLDITALIC
     ?cmdDefault{PROP:Disable} = TRUE
END
?cmdDeletePropertyFile{PROP:Disable} = PropertyFileQueue.IsReadOnly
[END]
[END]
[END]
EMBED %ControlEventHandling
[INSTANCES]
WHEN '?rgnWebAddress'
[INSTANCES]
WHEN 'MouseIn'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
?strWebAddress{PROP:FontStyle} = FONT:regular+FONT:underline
SETCURSOR('~harrow.cur')
[END]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
szURL = ?strWebAddress{PROP:Text}
szNull = ''
kcr_ShellExecute(window{prop:handle},0,szURL,0,szNull,1)
[END]
WHEN 'MouseOut'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
?strWebAddress{PROP:FontStyle} = FONT:regular
SETCURSOR()
[END]
[END]
WHEN '?thisEditCommand'
[INSTANCES]
WHEN 'AlertKey'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
CASE KEYCODE()
  OF DeleteKey
     FORWARDKEY(?thisEditCommand)
  OF MouseRight
     MRUContextMenu(EditorQueue, ?thisEditCommand, '<<Use Windows Default>')
     SELF.Reset()
END
[END]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
DO AddEditCommand
[END]
[END]
WHEN '?glo:bAllExtensions'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
SELF.Reset()
[END]
[END]
WHEN '?SelectedBackColorButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
saveColor = loc:SelectedBack
COLORDIALOG('Selected Color',loc:SelectedBack)
IF saveColor <> loc:SelectedBack
   bPropertiesChanged = TRUE
END
ThisWindow.Reset()
[END]
[END]
WHEN '?BookmarkBackColorButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
saveColor = loc:BookmarkBack
COLORDIALOG('Bookmark Color',loc:BookmarkBack)
IF saveColor <> loc:BookmarkBack
   bPropertiesChanged = TRUE
END
ThisWindow.Reset()
[END]
[END]
WHEN '?cmdRegisterNow'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
IF RegisteredTo = UNREGISTERED_COPY
   IF RegisterProduct() = Level:Benign
      IF CheckRegistration(RegisteredTo,lExpiryDate) = Level:Benign
         DISPLAY(?RegisteredTo)
         HIDE(?cmdRegisterNow)
      END
   END
END      
[END]
[END]
WHEN '?cmdPropertyEditor'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
GET(PropertyFileQueue,CHOICE(?lbPropertyFiles))
IF bPropertiesChanged = FALSE
   bPropertiesChanged = PropertyEditor(PropertyFileQueue.FilePath,MaxStyleIndex)
ELSE
   PropertyEditor(PropertyFileQueue.FilePath,MaxStyleIndex)
END
DO FillPropertyFileQueue
ThisWindow.Reset
[END]
[END]
WHEN '?lbPropertyFiles'
[INSTANCES]
WHEN 'AlertKey'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
CASE KEYCODE()
  OF MouseLeft2
     POST(EVENT:Accepted,?cmdPropertyEditor)
END
[END]
WHEN 'NewSelection'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
GET(PropertyFileQueue,CHOICE(?lbPropertyFiles))
CASE PropertyFileQueue.FilenameStyle
  OF STYLE:NORMAL
     ?cmdDefault{PROP:Disable} = FALSE
  OF STYLE:BOLD
     ?cmdDefault{PROP:Disable} = TRUE
  OF STYLE:ITALIC
     ?cmdDefault{PROP:Disable} = FALSE
  OF STYLE:BOLDITALIC
     ?cmdDefault{PROP:Disable} = TRUE
END
?cmdDeletePropertyFile{PROP:Disable} = PropertyFileQueue.IsReadOnly
[END]
[END]
WHEN '?ApplicationColorButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
saveColor = loc:ApplicationColor
COLORDIALOG('Application Color',loc:ApplicationColor)
IF saveColor <> loc:ApplicationColor
   bPropertiesChanged = TRUE
END
ThisWindow.Reset()
[END]
[END]
WHEN '?ToolbarColorButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
saveColor = loc:ToolbarColor
COLORDIALOG('Toolbar Color',loc:ToolbarColor)
IF saveColor <> loc:ToolbarColor
   bPropertiesChanged = TRUE
END
ThisWindow.Reset()
[END]
[END]
WHEN '?loc:nDeleteWarningCount'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
ThisWindow.Reset()
[END]
[END]
WHEN '?cmdFontDialog'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
IF FONTDIALOG('Choose Font',szFontName,nFontSize,lForeColor,nFontStyle,0)
   IF szFontName  <> glo:ResultListFontName  |
   OR nFontSize   <> glo:ResultListFontSize  |
   OR lForeColor  <> glo:ResultListForeColor |
   OR nFontStyle  <> glo:ResultListFontStyle
      bPropertiesChanged = TRUE
   END
   ThisWindow.Reset()
END
[END]
[END]
WHEN '?cmdApply'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
glo:szClarionHelpFile   = loc:szClarionHelpFile
glo:szEditorCommand     = thisEditCommand
glo:nDeleteWarningCount = loc:nDeleteWarningCount
glo:SelectedBack        = loc:SelectedBack
glo:BookmarkBack        = loc:BookmarkBack
glo:SplitterOrientation = loc:SplitterOrientation


IF loc:ApplicationColor = kcr_GetSysColor(COLOR_GRADIENTACTIVECAPTION)
   glo:ApplicationColor = COLOR:GRADIENTACTIVECAPTION
ELSIF loc:ApplicationColor = kcr_GetSysColor(COLOR_GRADIENTINACTIVECAPTION)
   glo:ApplicationColor = COLOR:GRADIENTINACTIVECAPTION
ELSE
   glo:ApplicationColor   = loc:ApplicationColor
END

IF loc:ToolbarColor = kcr_GetSysColor(COLOR_GRADIENTACTIVECAPTION)
   glo:ToolbarColor = COLOR:GRADIENTACTIVECAPTION
ELSIF loc:ToolbarColor = kcr_GetSysColor(COLOR_GRADIENTINACTIVECAPTION)
   glo:ToolbarColor = COLOR:GRADIENTINACTIVECAPTION
ELSE
   glo:ToolbarColor   = loc:ToolbarColor
END

INIMgr.Update('Global','DeleteWarningCount',glo:nDeleteWarningCount)
INIMgr.Update('Global','ApplicationColor',glo:ApplicationColor)
INIMgr.Update('Global','ToolbarColor',glo:ToolbarColor)
INIMgr.Update('Global','SelectedBack',glo:SelectedBack)
INIMgr.Update('Global','BookmarkBack',glo:BookmarkBack)

glo:ResultListFontName  = szFontName
glo:ResultListFontSize  = nFontSize
glo:ResultListForeColor = lForeColor
glo:ResultListFontStyle = nFontStyle
INIMgr.Update('Global','ResultListFontName',glo:ResultListFontName)
INIMgr.Update('Global','ResultListFontSize',glo:ResultListFontSize)
INIMgr.Update('Global','ResultListForeColor',glo:ResultListForeColor)
INIMgr.Update('Global','ResultListFontStyle',glo:ResultListFontStyle)

IF loc:MinusKey <> glo:MinusKey OR loc:PlusKey <> glo:PlusKey
   bPropertiesChanged = TRUE
END

glo:OldMinusKey = glo:MinusKey
glo:MinusKey = loc:MinusKey
INIMgr.Update('Global','ResultListMinusKey',glo:MinusKey)

glo:OldPlusKey = glo:PlusKey
glo:PlusKey  = loc:PlusKey
INIMgr.Update('Global','ResultListPlusKey',glo:PlusKey)

INIMgr.UpdateQueue('Editor Queue','EditCommand',EditorQueue,EditorQueue.szValue)
INIMgr.UpdateQueue('ClarionExtensions Queue','ClarionExtension',ClarionExtensionsQueue,ClarionExtensionsQueue.FileExtension)
POST(EVENT:CloseWindow)
[END]
[END]
WHEN '?cmdDefault'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
i = CHOICE(?lbPropertyFiles)
LOOP j = 1 TO RECORDS(PropertyFileQueue)
   GET(PropertyFileQueue,j)
   IF j = i
      PropertyFileQueue.FilenameStyle = STYLE:BOLD + CHOOSE(PropertyFileQueue.IsReadOnly=0,STYLE:ITALIC,0)
      glo:szDefaultPropertyFile = PropertyFileQueue.FileName
   ELSE
      PropertyFileQueue.FilenameStyle = STYLE:NORMAL + CHOOSE(PropertyFileQueue.IsReadOnly=0,STYLE:ITALIC,0)
   END
   PUT(PropertyFileQueue)
END
GET(PropertyFileQueue,i)
CASE PropertyFileQueue.FilenameStyle
  OF STYLE:NORMAL
     ?cmdDefault{PROP:Disable} = FALSE
  OF STYLE:BOLD
     ?cmdDefault{PROP:Disable} = TRUE
  OF STYLE:ITALIC
     ?cmdDefault{PROP:Disable} = FALSE
  OF STYLE:BOLDITALIC
     ?cmdDefault{PROP:Disable} = TRUE
END
[END]
[END]
WHEN '?cmdDeletePropertyFile'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
IF GlobalErrors.ThrowFile(Msg:ConfirmDelete,PropertyFileQueue.FileName) = Level:Benign
   REMOVE(PropertyFileQueue.FilePath)
   DO FillPropertyFileQueue
   ThisWindow.Reset
END
[END]
[END]
WHEN '?cmdGetPlusKey'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
WinGetKeyAssignment('Jump to Next Line in Results List',loc:PlusKey)
loc:PlusKeyString = 'Next Result Line assigned to ' & CLIP(KeyCodeName.ToName(loc:PlusKey))
loc:PlusKeyTipString  = 'The ''Jump to Next Line in Results List'' function is assigned to the ' & CLIP(KeyCodeName.ToName(loc:PlusKey))
?loc:PlusKeyStringRegion{PROP:Tip} = loc:PlusKeyTipString
[END]
[END]
WHEN '?cmdGetMinusKey'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
WinGetKeyAssignment('Jump to Previous Line in Results List',loc:MinusKey)
loc:MinusKeyString = 'Previous Result Line assigned to ' & CLIP(KeyCodeName.ToName(loc:MinusKey))
loc:MinusKeyTipString = 'The ''Jump to Previous Line in Results List'' function is assigned to the ' & CLIP(KeyCodeName.ToName(loc:MinusKey))
?loc:MinusKeyStringRegion{PROP:Tip} = loc:MinusKeyTipString
[END]
[END]
[END]
EMBED %LocalProcedures
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
QEIP1::FileExtension.CreateControl    PROCEDURE
   CODE
      PARENT.CreateControl()
      SELF.Feq{PROP:Upr} = TRUE
      RETURN

QEIP1::FileExtension.TakeAccepted    PROCEDURE(BYTE Action)
ReturnValue BYTE
   CODE
      ReturnValue = PARENT.TakeAccepted(Action)
      !CASE Action
      !  OF EditAction:Complete
      !     IF INSTRING('*',ClarionExtensionsQueue.FileExtension,1)  |
      !     OR INSTRING('?',ClarionExtensionsQueue.FileExtension,1)
      !        MESSAGE('File Extension may not contain wild cards (*,?)','Data Validation Error',ICON:HAND)
      !        ReturnValue = EditAction:None
      !     END
      !END
      RETURN(ReturnValue)

[END]
EMBED %QEIPInitCodeSection
[INSTANCES]
WHEN '1'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 500
PROPERTY:END
SELF.DeleteAction = EIPAction:Always
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1500
PROPERTY:END
SELF.AddControl(QEIP1::FileExtension,1,0)
[END]
[END]
EMBED %QEIPTakeCompletedCodeSection
[INSTANCES]
WHEN '1'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 500
PROPERTY:END
    IF Force = BUTTON:Yes
       IF INSTRING('*',ClarionExtensionsQueue.FileExtension,1)  |
       OR INSTRING('?',ClarionExtensionsQueue.FileExtension,1)
          MESSAGE('File Extension may not contain wild cards (*,?)','Data Validation Error',ICON:HAND)
          Force = BUTTON:Cancel
       ELSIF ClarionExtensionsQueue.FileExtension[1] <> '.'
          ClarionExtensionsQueue.FileExtension = '.' & ClarionExtensionsQueue.FileExtension
       END
    END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
IF SELF.Response = RequestCompleted
   SORT(ClarionExtensionsQueue,ClarionExtensionsQueue.FileExtension)
END
[END]
[END]
EMBED %WindowManagerMethodDataSection
[INSTANCES]
WHEN 'TakeAccepted'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
szURL                CSTRING(256)
szNull               CSTRING('<0>')
i                    LONG
j                    LONG
lExpiryDate          LONG
saveColor            LONG
[END]
[END]
WHEN 'TakeWindowEvent'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
nCode  SIGNED
[END]
[END]
[END]
EMBED %QEIPRunCodeSection
[INSTANCES]
WHEN '1'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2500
PROPERTY:END
DISABLE(?Insert,?Delete)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
ENABLE(?Insert,?Delete)
[END]
[END]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
AddEditCommand    ROUTINE
   DATA
i     LONG
j     LONG

   CODE
      UPDATE()
      IF thisEditCommand <> ''
         j = RECORDS(EditorQueue)
         LOOP i = 1 TO j
            GET(EditorQueue,i)
            IF EditorQueue.szValue = thisEditCommand
               BREAK
            END
         END
         IF i > j
            IF j = MAXMRU
               GET(EditorQueue,j)
               DELETE(EditorQueue)
            END
            EditorQueue.szValue = thisEditCommand
            ADD(EditorQueue,+EditorQueue.szValue)
         END
      END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
FillPropertyFileQueue  ROUTINE
   DATA

   CODE
      FREE(PropertyFileQueue)
      !get user properties
      szSearchFolder = svSpecialFolder.GetDir(SV:CSIDL_APPDATA, 'Devuna' & '\' & 'KSS\')
      bReadOnly = FALSE
      DO GetFilenames

      !get system properties
      szSearchFolder = LONGPATH() & '\'
      bReadOnly = TRUE
      DO GetFileNames

      GET(PropertyFileQueue,1)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
GetFilenames   ROUTINE
   DATA
i              LONG
j              LONG
cc             LONG
szPath         CSTRING(MAXPATH+1)
szDrive        CSTRING(MAXDRIVE+1)
szDir          CSTRING(MAXDIR+1)
szName         CSTRING(MAXFILE+1)
szExtension    CSTRING(MAXEXT+1)
FileModes      QUEUE(FILE:queue),PRE(fm)
               END
   CODE
      DIRECTORY(FileModes,szSearchFolder & '*.properties',0)
      j = RECORDS(FileModes)
      IF j > 0
         LOOP i = 1 TO j
            GET(FileModes,i)
            szPath = szSearchFolder & CLIP(FileModes.Name)
            cc = kcr_fnSplit(szPath, szDrive, szDir, szName, szExtension)
            PropertyFileQueue.FileName = LOWER(szName)
            GET(PropertyFileQueue,+PropertyFileQueue.FileName)
            IF ERRORCODE()
               PropertyFileQueue.FileName = LOWER(szName)
               PropertyFileQueue.FilePath = szPath
               PropertyFileQueue.IsReadOnly = bReadOnly
               IF PropertyFileQueue.FileName = glo:szDefaultPropertyFile
                  PropertyFileQueue.FilenameStyle = STYLE:BOLD + CHOOSE(PropertyFileQueue.IsReadOnly=0,STYLE:ITALIC,0)
               ELSE
                  PropertyFileQueue.FilenameStyle = STYLE:NORMAL + CHOOSE(PropertyFileQueue.IsReadOnly=0,STYLE:ITALIC,0)
               END
               ADD(PropertyFileQueue,+PropertyFileQueue.FileName)
            END
         END
      END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
GetFontDescription   ROUTINE
   IF szFontName
      szFontDescription = CLIP(szFontName) & ','
   END

   IF nFontSize
      szFontDescription = szFontDescription & nFontSize & ','
   END

   IF BAND(nFontStyle,0FFFh) >= FONT:bold
      szFontDescription = szFontDescription & 'Bold,'
   ELSIF BAND(nFontStyle,0FFFh) >= FONT:regular
      szFontDescription = szFontDescription & 'Regular,'
   ELSE
      szFontDescription = szFontDescription & 'Thin,'
   END

   IF BAND(nFontStyle,FONT:italic) = FONT:italic
      szFontDescription = szFontDescription & 'Italic,'
   END

   IF BAND(nFontStyle,FONT:underline) = FONT:underline
      szFontDescription = szFontDescription & 'Underline,'
   END

   IF szFontDescription[LEN(szFontDescription)] = ','
      szFontDescription[LEN(szFontDescription)] = '<0>'
   END
   DISPLAY(?szFontDescription)
   EXIT
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 2
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_QueueEIP
[INSTANCE]
INSTANCE 1
[PROMPTS]
%QueueEIPIncludePopupMenu LONG  (1)
%QueueEIPContinuousInsert LONG  (0)
%QueueEIPInsertionPoint DEFAULT  ('Append')
%QueueEIPTabAction DEFAULT  ('Always')
%QueueEIPTabRemain LONG  (1)
%QueueEIPEnterAction DEFAULT  ('Always')
%QueueEIPEnterRemain LONG  (0)
%QueueEIPArrowAction DEFAULT  ('Always')
%QueueEIPArrowRemain LONG  (1)
%QueueEIPArrowRetain LONG  (1)
%QueueEIPFocusAction DEFAULT  ('Never')
%QueueEditInPlaceList MULTI LONG  ()
%QueueEditInPlaceField DEPEND %QueueEditInPlaceList FIELD TIMES 0

%QueueEditInPlaceFieldDefaultValue DEPEND %QueueEditInPlaceList DEFAULT TIMES 0

%QueueAllowEIP DEPEND %QueueEditInPlaceList LONG TIMES 0

%QueueEditClass DEPEND %QueueEditInPlaceList DEFAULT TIMES 0

%QueueColorColumn DEPEND %QueueEditInPlaceList LONG TIMES 0

%QueueTextColor DEPEND %QueueEditInPlaceList LONG TIMES 0

%QueueBackColor DEPEND %QueueEditInPlaceList LONG TIMES 0

%QueueTextSelected DEPEND %QueueEditInPlaceList LONG TIMES 0

%QueueBackSelected DEPEND %QueueEditInPlaceList LONG TIMES 0

%HotFields MULTI LONG  ()
%HotField DEPEND %HotFields FIELD TIMES 0

[ADDITION]
NAME ABC DOSFileLookup
[INSTANCE]
INSTANCE 3
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('SelectFileClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 0

%DOSFileDialogHeader DEFAULT  ('Select Clarion Help File...')
%DOSFileField FIELD  (loc:szClarionHelpFile)
%DOSInitialDirectory DEFAULT  ('')
%DOSInitialFilename DEFAULT  ('ClarionHelp.chm')
%ReturnToOriginalDir LONG  (1)
%AllowLongFilenames LONG  (1)
%DOSFileDialogType DEFAULT  ('Open')
%AllowNoError LONG  (0)
%DefaultOnCancel LONG  (0)
%AllowMultiSelect LONG  (0)
%ActionsToTake DEFAULT  ('')
%AssignToImageControl LONG  (0)
%ImageControl DEFAULT  ('')
%ImageResize LONG  (1)
%DOSVariableMask LONG  (0)
%DOSMaskVariable DEFAULT  ('')
%DOSMaskDesc DEFAULT  ('Helpl Files')
%DOSMask DEFAULT  ('*.chm')
%DOSMoreMasks MULTI LONG  ()
%DOSMoreMaskDesc DEPEND %DOSMoreMasks DEFAULT TIMES 0

%DOSMoreMask DEPEND %DOSMoreMasks DEFAULT TIMES 0

%RedisplayWindow LONG  (1)
%UpdateFields MULTI LONG  ()
%UpdateFeq DEPEND %UpdateFields DEFAULT TIMES 0

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('FileLookup3')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('ADOBlob')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

[INSTANCE]
INSTANCE 4
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('SelectFileClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 0

%DOSFileDialogHeader DEFAULT  ('Select Send To Target...')
%DOSFileField FIELD  (thisEditCommand)
%DOSInitialDirectory DEFAULT  ('')
%DOSInitialFilename DEFAULT  ('')
%ReturnToOriginalDir LONG  (1)
%AllowLongFilenames LONG  (1)
%DOSFileDialogType DEFAULT  ('Open')
%AllowNoError LONG  (0)
%DefaultOnCancel LONG  (0)
%AllowMultiSelect LONG  (0)
%ActionsToTake DEFAULT  ('')
%AssignToImageControl LONG  (0)
%ImageControl DEFAULT  ('')
%ImageResize LONG  (1)
%DOSVariableMask LONG  (0)
%DOSMaskVariable DEFAULT  ('')
%DOSMaskDesc DEFAULT  ('Program Files')
%DOSMask DEFAULT  ('*.exe')
%DOSMoreMasks MULTI LONG  (1)
%DOSMoreMaskDesc DEPEND %DOSMoreMasks DEFAULT TIMES 1
WHEN  (1) ('All Files')

%DOSMoreMask DEPEND %DOSMoreMasks DEFAULT TIMES 1
WHEN  (1) ('*.*')

%RedisplayWindow LONG  (1)
%UpdateFields MULTI LONG  ()
%UpdateFeq DEPEND %UpdateFields DEFAULT TIMES 0

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('FileLookup4')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('ADOBlob')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

[CALLS]
CorrectForOffScreen
MRUContextMenu
PropertyEditor
RegisterProduct
srcGetColorString
srcGetRGBColorString
winGetKeyAssignment
[WINDOW]
Window  WINDOW('Options'),AT(,,530,320),FONT('Segoe UI',10),DOUBLE,TILED,GRAY,HLP('UserOptions.htm'), |
          SYSTEM
          PANEL,AT(5,5,520,310),USE(?Panel1),BEVEL(1),#ORDINAL(1)
          PROMPT('S&end to Command'),AT(10,10),USE(?thisEditCommand:Prompt),#ORDINAL(2)
          COMBO(@s255),AT(80,10,328,10),USE(thisEditCommand),VSCROLL,ALRT(DeleteKey),ALRT(MouseRight), |
            DROP(10),FORMAT('1020L(2)|M@s255@'),FROM(EditorQueue),#FIELDS(EditorQueue.szEditCommand), |
            #ORDINAL(3)
          BUTTON('...'),AT(413,10,11,10),USE(?LookupSendToCommand),#ORIG(?LookupFile),#SEQ(4), |
            #ORDINAL(4)
          CHECK(' &Prompt for Command'),AT(428,10,92),USE(glo:PromptForEditor),#ORDINAL(5)
          PROMPT('Clarion &Help File'),AT(10,25),USE(?loc:szClarionHelpFile:Prompt),#ORDINAL(6)
          ENTRY(@s255),AT(80,25,422,10),USE(loc:szClarionHelpFile),COLOR(COLOR:BTNFACE),READONLY, |
            SKIP,#ORDINAL(7)
          BUTTON('...'),AT(505,24,11,10),USE(?LookupFile),#ORIG(?LookupFile),#SEQ(3),#ORDINAL(8)
          CHECK(' Identify &Location in all files'),AT(17,49,137),USE(glo:bAllExtensions), |
            #ORDINAL(9)
          GROUP('Identify Location in these File Extensions'),AT(10,39,150,271),USE(?ClarionExtensions:Group), |
            BOXED,#ORDINAL(10)
            LIST,AT(17,62,136,225),USE(?List),CENTER,VSCROLL,ALRT(MouseLeft2),FORMAT('80L(2)|M@s20@'), |
              FROM(ClarionExtensionsQueue),TIP('Filenames containing the extensions in ' & |
              'this list will receive Location Identification processing.  This special' & |
              ' processing may incur significant processing overhead.'),#FIELDS(CEQ:FileExtension), |
              #ORIG(?List),#SEQ(1),#ORDINAL(11)
            BUTTON('Insert'),AT(17,292,40,12),USE(?Insert),KEY(InsertKey),#ORIG(?Insert),#SEQ(1), |
              #ORDINAL(12)
            BUTTON('Edit'),AT(59,292,40,12),USE(?Change),KEY(CtrlEnter),#ORIG(?Change),#SEQ(1), |
              #ORDINAL(13)
            BUTTON('Delete'),AT(102,292,40,12),USE(?Delete),KEY(DeleteKey),#ORIG(?Delete), |
              #SEQ(1),#ORDINAL(14)
          END
          GROUP('Properties'),AT(165,39,355,271),USE(?EditorStylesGroup),BOXED,#ORDINAL(15)
            LIST,AT(170,62,102,225),USE(?lbPropertyFiles),ALRT(MouseLeft2),FORMAT('125L(2)Y@s255@'), |
              FROM(PropertyFileQueue),#ORDINAL(16)
            BUTTON('Edit'),AT(188,292,40,12),USE(?cmdPropertyEditor),TIP('Edit the high' & |
              'lighted property file.'),#ORDINAL(17)
            PROMPT('&Confirm deletions'),AT(282,48,60,10),USE(?DeleteWarningThresholdPrompt), |
              TRN,#ORDINAL(18)
            LIST,AT(357,48,38,10),USE(loc:nDeleteWarningCount),DROP(3),FROM('Never|#0|A' & |
              'lways|#1|When|#2'),#ORDINAL(19)
            STRING('removing at least'),AT(398,48,,10),USE(?RemovingAtLeast),HIDE,#ORDINAL(20)
            SPIN(@N10~ rows~),AT(460,48,55,10),USE(loc:nDeleteWarningCount,,?loc:nDeleteWarningCount:2), |
              RIGHT(2),HIDE,RANGE(2,9999),TIP('Show a warning message when the number o' & |
              'f records to be deleted  is greater than or equal to this number.<0DH,0AH>' & |
              'Leave blank to completely disable the warning message.'),#ORDINAL(21)
            BOX,AT(282,62,11,10),USE(?loc:sResultListColorBox),COLOR(00B99D7Fh),FILL(COLOR:Black), |
              LINEWIDTH(1),ROUND,#ORDINAL(22)
            PROMPT('&Result List'),AT(297,62),USE(?Font:Prompt),TRN,#ORDINAL(23)
            ENTRY(@s63),AT(357,62,145,10),USE(szFontDescription),DISABLE,#ORDINAL(24)
            BUTTON('...'),AT(505,62,11,10),USE(?cmdFontDialog),#ORDINAL(25)
            BOX,AT(282,77,11,10),USE(?loc:sApplicationColorBox),COLOR(00B99D7Fh),FILL(00EAD1B9h), |
              LINEWIDTH(1),ROUND,#ORDINAL(26)
            PROMPT('&Application'),AT(297,77),USE(?loc:ApplicationColor:Prompt),TRN,#ORDINAL(27)
            ENTRY(@s30),AT(357,77,145,10),USE(loc:sApplicationColor),LEFT,COLOR(COLOR:White), |
              DISABLE,SKIP,#ORDINAL(28)
            BUTTON('...'),AT(505,77,11,10),USE(?ApplicationColorButton),TIP('Select App' & |
              'lication Color'),#ORDINAL(29)
            BOX,AT(282,92,11,10),USE(?loc:sToolbarColorBox),COLOR(00B99D7Fh),FILL(00F2E4D7h), |
              LINEWIDTH(1),ROUND,#ORDINAL(30)
            PROMPT('&Toolbar'),AT(297,92),USE(?loc:ToolbarColor:Prompt),TRN,#ORDINAL(31)
            ENTRY(@s30),AT(357,92,145,10),USE(loc:sToolbarColor),LEFT,COLOR(COLOR:White),DISABLE, |
              SKIP,#ORDINAL(32)
            BUTTON('...'),AT(505,92,11,10),USE(?ToolbarColorButton),TIP('Select Toolbar Color'), |
              #ORDINAL(33)
            BOX,AT(282,107,11,10),USE(?loc:sSelectedBackColorBox),COLOR(00B99D7Fh),FILL(COLOR:Red), |
              LINEWIDTH(1),ROUND,#ORDINAL(34)
            PROMPT('&Selected'),AT(297,107),USE(?loc:SelectedBackColor:Prompt),TRN,#ORDINAL(35)
            ENTRY(@s30),AT(357,107,145,10),USE(loc:sSelectedBackColor),LEFT,COLOR(COLOR:White), |
              DISABLE,SKIP,#ORDINAL(36)
            BUTTON('...'),AT(505,107,11,10),USE(?SelectedBackColorButton),TIP('Select Sel' & |
              'ected Text Background Color'),#ORDINAL(37)
            BOX,AT(282,122,11,10),USE(?loc:sBookmarkBackColorBox),COLOR(00B99D7Fh),FILL(COLOR:Maroon), |
              LINEWIDTH(1),ROUND,#ORDINAL(38)
            PROMPT('Boo&kmark'),AT(297,122),USE(?loc:BookmarkBackColor:Prompt),TRN,#ORDINAL(39)
            ENTRY(@s30),AT(357,122,145,10),USE(loc:sBookmarkBackColor),LEFT,COLOR(COLOR:White), |
              DISABLE,SKIP,#ORDINAL(40)
            BUTTON('...'),AT(505,122,11,10),USE(?BookmarkBackColorButton),TIP('Select Boo' & |
              'kmark Background Color'),#ORDINAL(41)
            BUTTON,AT(170,292,14,12),USE(?cmdDefault),ICON('check-black.ico'),TIP('Set the de' & |
              'fault property file'),#ORDINAL(42)
            BUTTON('Delete'),AT(232,292,40,12),USE(?cmdDeletePropertyFile),TIP('Delete the' & |
              ' highlighted property file.'),#ORDINAL(43)
          END
          CHECK(' &Link Paths and Files with Find Text'),AT(357,137),USE(glo:SyncPathWithPattern), |
            TIP('Recall Paths and Files when you select prior Find text from the drop list.'), |
            #ORDINAL(44)
          CHECK(' Allow &Multiple Instances'),AT(357,147),USE(glo:AllowMultipleInstances), |
            #ORDINAL(45)
          CHECK(' Auto Size Result &Columns'),AT(357,157),USE(glo:AutoSizeResultColumns),#ORDINAL(46)
          PROMPT('Restore &Point Timer'),AT(282,171),USE(?glo:RestorePointTimerInterval:Prompt), |
            #ORDINAL(47)
          SPIN(@n13),AT(358,171,60,10),USE(glo:RestorePointTimerInterval),RIGHT(1),STEP(1), |
            TIP('Set to 0 to disable Restore Point Feature'),#ORDINAL(48)
          STRING('minutes'),AT(423,171),USE(?Minutes:String),#ORDINAL(49)
          GROUP('Application Function Keys'),AT(282,182,234,38),USE(?FunctionKeyBox),BOXED, |
            TRN,#ORDINAL(50)
            STRING(@s80),AT(286,192,215,10),USE(loc:MinusKeyString),RIGHT,TRN,#ORDINAL(51)
            REGION,AT(286,192,215,10),USE(?loc:MinusKeyStringRegion),IMM,#ORDINAL(52)
            BUTTON('...'),AT(503,192,11,10),USE(?cmdGetMinusKey),#ORDINAL(53)
            STRING(@s80),AT(286,204,215,10),USE(loc:PlusKeyString),RIGHT,TRN,#ORDINAL(54)
            REGION,AT(286,204,215,10),USE(?loc:PlusKeyStringRegion),IMM,#ORDINAL(55)
            BUTTON('...'),AT(503,204,11,10),USE(?cmdGetPlusKey),#ORDINAL(56)
          END
          GROUP,AT(282,220,234,68),USE(?CopyrightBox),BOXED,TRN,#ORDINAL(57)
            STRING('Kwik Source Search'),AT(336,226,127),USE(?ProductName),FONT(,,,FONT:bold), |
              CENTER,TRN,#ORDINAL(58)
            STRING(@s22),AT(336,234,127),USE(loc:szVersion),CENTER,TRN,#ORDINAL(59)
            STRING('© Copyright  2011-2019'),AT(336,242,127),USE(?Copyright),CENTER,TRN,#ORDINAL(60)
            STRING('Devuna Inc.'),AT(336,251,127),USE(?CompanyName),CENTER,TRN,#ORDINAL(61)
            REGION,AT(359,260,90,10),USE(?rgnWebAddress),IMM,#ORDINAL(62)
            STRING('http://www.devuna.com'),AT(336,260,127),USE(?strWebAddress),FONT(,10,COLOR:Blue, |
              FONT:regular),CENTER,TRN,#ORDINAL(63)
            STRING('Registered to'),AT(336,269,127),USE(?strRegisteredTo),CENTER,TRN,#ORDINAL(64)
            STRING(@S28),AT(336,278,127),USE(RegisteredTo),CENTER,TRN,#ORDINAL(65)
          END
          BUTTON('Register Now'),AT(369,292,,12),USE(?cmdRegisterNow),HIDE,#ORDINAL(66)
          BUTTON('&Apply'),AT(476,292,40,12),USE(?cmdApply),#ORDINAL(67)
        END

[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2011/11/18' '11:28:19'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME ColourRGB
PROTOTYPE '(LONG r, LONG g, LONG b),LONG'
PARAMETERS '(LONG r, LONG g, LONG b)'
[COMMON]
FROM ABC Source
MODIFIED '2011/11/30' '17:17:41'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
    RETURN(BOR(r,BOR(BSHIFT(g,8),BSHIFT(b,16))))
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[PROCEDURE]
NAME srcGetColorString
PROTOTYPE '(LONG lColor),STRING'
PARAMETERS '(LONG lColor)'
[COMMON]
FROM ABC Source
MODIFIED '2012/01/09' '14:47:51'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
     CASE lColor
       OF COLOR:GRADIENTACTIVECAPTION
          lColor = kcr_GetSysColor(COLOR_GRADIENTACTIVECAPTION)
       OF COLOR:GRADIENTINACTIVECAPTION
          lColor = kcr_GetSysColor(COLOR_GRADIENTINACTIVECAPTION)
     END

     CASE lColor
       OF COLOR:NONE
          sReturn = 'COLOR:NONE'
       OF COLOR:SCROLLBAR
          sReturn = 'COLOR:SCROLLBAR'
       OF COLOR:BACKGROUND
          sReturn = 'COLOR:BACKGROUND'
       OF COLOR:ACTIVECAPTION
          sReturn = 'COLOR:ACTIVECAPTION'
       OF COLOR:INACTIVECAPTION
          sReturn = 'COLOR:INACTIVECAPTION'
       OF COLOR:MENU
          sReturn = 'COLOR:MENU'
       OF COLOR:WINDOW
          sReturn = 'COLOR:WINDOW'
       OF COLOR:WINDOWFRAME
          sReturn = 'COLOR:WINDOWFRAME'
       OF COLOR:MENUTEXT
          sReturn = 'COLOR:MENUTEXT'
       OF COLOR:WINDOWTEXT
          sReturn = 'COLOR:WINDOWTEXT'
       OF COLOR:CAPTIONTEXT
          sReturn = 'COLOR:CAPTIONTEXT'
       OF COLOR:ACTIVEBORDER
          sReturn = 'COLOR:ACTIVEBORDER'
       OF COLOR:INACTIVEBORDER
          sReturn = 'COLOR:INACTIVEBORDER'
       OF COLOR:APPWORKSPACE
          sReturn = 'COLOR:APPWORKSPACE'
       OF COLOR:HIGHLIGHT
          sReturn = 'COLOR:HIGHLIGHT'
       OF COLOR:HIGHLIGHTTEXT
          sReturn = 'COLOR:HIGHLIGHTTEXT'
       OF COLOR:BTNFACE
          sReturn = 'COLOR:BTNFACE'
       OF COLOR:BTNSHADOW
          sReturn = 'COLOR:BTNSHADOW'
       OF COLOR:GRAYTEXT
          sReturn = 'COLOR:GRAYTEXT'
       OF COLOR:BTNTEXT
          sReturn = 'COLOR:BTNTEXT'
       OF COLOR:INACTIVECAPTIONTEXT
          sReturn = 'COLOR:INACTIVECAPTIONTEXT'
       OF COLOR:BTNHIGHLIGHT
          sReturn = 'COLOR:BTNHIGHLIGHT'
       OF COLOR:Black
          sReturn = 'COLOR:Black'
       OF COLOR:Maroon
          sReturn = 'COLOR:Maroon'
       OF COLOR:Green
          sReturn = 'COLOR:Green'
       OF COLOR:Olive
          sReturn = 'COLOR:Olive'
       OF COLOR:Navy
          sReturn = 'COLOR:Navy'
       OF COLOR:Purple
          sReturn = 'COLOR:Purple'
       OF COLOR:Teal
          sReturn = 'COLOR:Teal'
       OF COLOR:Gray
          sReturn = 'COLOR:Gray'
       OF COLOR:Silver
          sReturn = 'COLOR:Silver'
       OF COLOR:Red
          sReturn = 'COLOR:Red'
       OF COLOR:Lime
          sReturn = 'COLOR:Lime'
       OF COLOR:Yellow
          sReturn = 'COLOR:Yellow'
       OF COLOR:Blue
          sReturn = 'COLOR:Blue'
       OF COLOR:Fuschia
          sReturn = 'COLOR:Fuschia'
       OF COLOR:Aqua
          sReturn = 'COLOR:Aqua'
       OF COLOR:White
          sReturn = 'COLOR:White'
     ELSE
       !kcr_ltoa(lColor,sReturn,16)
       !sReturn = '0' & UPPER(sReturn) & 'H'

       kcr_ltoa(lColor,sReturn,16)
       sReturn = ALL('0',6-LEN(sReturn)) & sReturn
       sReturn = '#' & sReturn[5 : 6] & sReturn[3 : 4] & sReturn[1 : 2]
       sReturn = UPPER(sReturn)
     END
  RETURN(sReturn)
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
sReturn             CSTRING(31)
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[PROCEDURE]
NAME DoubleQuote
PROTOTYPE '(*CSTRING InputString, *CSTRING OutputString, LONG bufferSize, *CSTRING quoteChar),LONG,PROC'
PARAMETERS '(*CSTRING InputString, *CSTRING OutputString, LONG bufferSize, *CSTRING quoteChar)'
[COMMON]
FROM ABC Source
MODIFIED '2011/12/08' ' 7:04:47'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
i                   LONG
j                   LONG
p                   LONG
quoteCount          LONG
returnString        &CSTRING
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
      j = LEN(InputString)
      LOOP i = 1 TO j
         IF InputString[i] = quoteChar[1]
            quoteCount += 1
         END
      END
      IF bufferSize = 0
         RETURN j + quoteCount
      ELSIF bufferSize < j + quoteCount
         RETURN -1
      ELSE
         IF quoteCount = 0
            OutputString = InputString
            RETURN LEN(OutputString)
         ELSE
            p = 0
            LOOP i = 1 TO j
               p += 1
               OutputString[p] = InputString[i]
               IF InputString[i] = quoteChar[1]
                  p += 1
                  OutputString[p] = InputString[i]
               END
            END
            RETURN LEN(OutputString)
         END
      END
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[PROCEDURE]
NAME srcGetRGBColorString
PROTOTYPE '(LONG lColor),STRING'
PARAMETERS '(LONG lColor)'
[COMMON]
FROM ABC Source
MODIFIED '2012/01/09' '14:43:56'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
      CASE lColor
        OF COLOR:GRADIENTACTIVECAPTION
           lColor = kcr_GetSysColor(COLOR_GRADIENTACTIVECAPTION)
        OF COLOR:GRADIENTINACTIVECAPTION
           lColor = kcr_GetSysColor(COLOR_GRADIENTINACTIVECAPTION)
      END
      !sReturn = srcGetColorString(lColor)
      !IF sReturn[1] <> 'C'
         kcr_ltoa(lColor,sReturn,16)
         sReturn = ALL('0',6-LEN(sReturn)) & sReturn
         sReturn = '#' & sReturn[5 : 6] & sReturn[3 : 4] & sReturn[1 : 2]
      !END
      RETURN UPPER(sReturn)
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
sReturn             CSTRING(31)
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[PROCEDURE]
NAME URLEncode
PROTOTYPE '(*CSTRING source, *CSTRING destination)'
PARAMETERS '(*CSTRING source, *CSTRING destination)'
[COMMON]
FROM ABC Source
MODIFIED '2012/03/01' '11:50:20'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
WordCharacters CSTRING('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789')
i              LONG
j              LONG
n              LONG
d              ULONG
h              STRING(30)
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
      n = 1
      j = LEN(source)
      LOOP i = 1 TO j
         IF INSTRING(source[i],WordCharacters)
            destination[n] = source[i]
            n += 1
         ELSE
            d = VAL(source[i])
            LOOP UNTIL (~d)
               h = SUB('0123456789ABCDEF',1+d % 16,1) & CLIP(h)
               d = INT(d / 16)
            END
            destination[n] = '%'
            n += 1
            destination[n] = h[1]
            n += 1
            destination[n] = h[2]
            n += 1
         END
      END
      destination[n] = '<0>'
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[PROCEDURE]
NAME ReplaceTabs
PROTOTYPE '(*STRING szText)'
PARAMETERS '(*STRING szText)'
[COMMON]
FROM ABC Source
MODIFIED '2012/10/14' '10:02:34'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
i              LONG
j              LONG
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
      j = LEN(CLIP(szText))
      LOOP i = 1 TO j
        IF szText[i] = '<9>'
           szText[i] = ' '
        END
      END
      RETURN
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[PROCEDURE]
NAME ReplaceChr
PROTOTYPE '(*CSTRING szText, STRING strReplace, STRING strWIth)'
PARAMETERS '(*CSTRING szText, STRING strReplace, STRING strWIth)'
[COMMON]
FROM ABC Source
MODIFIED '2012/10/14' '10:01:59'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
i              LONG
j              LONG
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
      j = LEN(CLIP(szText))
      LOOP i = 1 TO j
        IF szText[i] = strReplace   !'<9>'
           szText[i] = strWith      !' '
        END
      END
      RETURN
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[PROCEDURE]
NAME ColourBrightness
PROTOTYPE '(LONG colour),BYTE'
PARAMETERS '(LONG colour) !,BYTE'
[COMMON]
FROM ABC Source
MODIFIED '2013/06/02' '12:22:27'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
      CASE colour
        OF COLOR:GRADIENTACTIVECAPTION
           rgb = kcr_GetSysColor(COLOR_GRADIENTACTIVECAPTION)
        OF COLOR:GRADIENTINACTIVECAPTION
           rgb = kcr_GetSysColor(COLOR_GRADIENTINACTIVECAPTION)
      ELSE
           rgb = colour
      END

      r = BAND(rgb,0000000FFh)
      g = BSHIFT(BAND(rgb,00000FF00h),-8)
      b = BSHIFT(BAND(rgb,000FF0000h),-16)
      brightness  = ((r * 299) + (g * 587) + (b * 114)) / 1000

      RETURN brightness
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
rgb            LONG
r              LONG
g              LONG
b              LONG
brightness     BYTE
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[PROCEDURE]
NAME winGetKeyAssignment
PROTOTYPE '(STRING strAssignmentText, *LONG lKeyCode)'
PARAMETERS '(STRING strAssignmentText, *LONG lKeyCode)'
[COMMON]
FROM ABC Source
MODIFIED '2017/08/05' '11:35:34'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
keyCodeName       ctKssKeyCodeName
szFunctionText    CSTRING(81)
szAssignmentText  CSTRING(81)
newKeyCode        LONG
ReservedKeyQueue  QUEUE,PRE()
nCode                LONG
                  END
window WINDOW('Application Function Key Assignment'),AT(,,335,82),GRAY, |
            FONT('Segoe UI',10,,,CHARSET:DEFAULT),TIMER(10),DOUBLE
        STRING(@S80),AT(5,10,325),USE(szFunctionText),CENTER
        STRING(@S80),AT(5,20,325),USE(szAssignmentText),CENTER
        STRING('Press Any Key to select it for assignment to the application function.'), |
                AT(47,40,240),USE(?PressAnyKeyString),CENTER
        BUTTON('Assign'),AT(120,60,45,14),USE(?cmdAssign),DISABLE
        BUTTON('Cancel'),AT(169,60,45,14),USE(?cmdCancel)
    END
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  ReservedKeyQueue.nCode = AltDelete
  ADD(ReservedKeyQueue,+ReservedKeyQueue.nCode)
  ReservedKeyQueue.nCode = CtrlC
  ADD(ReservedKeyQueue,+ReservedKeyQueue.nCode)
  ReservedKeyQueue.nCode = CtrlDelete
  ADD(ReservedKeyQueue,+ReservedKeyQueue.nCode)
  ReservedKeyQueue.nCode = CtrlE
  ADD(ReservedKeyQueue,+ReservedKeyQueue.nCode)
  ReservedKeyQueue.nCode = CtrlEnd
  ADD(ReservedKeyQueue,+ReservedKeyQueue.nCode)
  ReservedKeyQueue.nCode = CtrlF
  ADD(ReservedKeyQueue,+ReservedKeyQueue.nCode)
  ReservedKeyQueue.nCode = CtrlF4
  ADD(ReservedKeyQueue,+ReservedKeyQueue.nCode)
  ReservedKeyQueue.nCode = CtrlHome
  ADD(ReservedKeyQueue,+ReservedKeyQueue.nCode)
  ReservedKeyQueue.nCode = CtrlP
  ADD(ReservedKeyQueue,+ReservedKeyQueue.nCode)
  ReservedKeyQueue.nCode = CtrlPgDn
  ADD(ReservedKeyQueue,+ReservedKeyQueue.nCode)
  ReservedKeyQueue.nCode = CtrlPgUp
  ADD(ReservedKeyQueue,+ReservedKeyQueue.nCode)
  ReservedKeyQueue.nCode = CtrlR
  ADD(ReservedKeyQueue,+ReservedKeyQueue.nCode)
  ReservedKeyQueue.nCode = CtrlS
  ADD(ReservedKeyQueue,+ReservedKeyQueue.nCode)
  ReservedKeyQueue.nCode = CtrlShiftF2
  ADD(ReservedKeyQueue,+ReservedKeyQueue.nCode)
  ReservedKeyQueue.nCode = CtrlShiftHook
  ADD(ReservedKeyQueue,+ReservedKeyQueue.nCode)
  ReservedKeyQueue.nCode = CtrlShiftM
  ADD(ReservedKeyQueue,+ReservedKeyQueue.nCode)
  ReservedKeyQueue.nCode = CtrlShiftS
  ADD(ReservedKeyQueue,+ReservedKeyQueue.nCode)
  ReservedKeyQueue.nCode = CtrlSHiftT
  ADD(ReservedKeyQueue,+ReservedKeyQueue.nCode)
  ReservedKeyQueue.nCode = CtrlT
  ADD(ReservedKeyQueue,+ReservedKeyQueue.nCode)
  ReservedKeyQueue.nCode = CtrlW
  ADD(ReservedKeyQueue,+ReservedKeyQueue.nCode)
  ReservedKeyQueue.nCode = CtrlZ
  ADD(ReservedKeyQueue,+ReservedKeyQueue.nCode)
  ReservedKeyQueue.nCode = DeleteKey
  ADD(ReservedKeyQueue,+ReservedKeyQueue.nCode)
  ReservedKeyQueue.nCode = DownKey
  ADD(ReservedKeyQueue,+ReservedKeyQueue.nCode)
  ReservedKeyQueue.nCode = EnterKey
  ADD(ReservedKeyQueue,+ReservedKeyQueue.nCode)
  ReservedKeyQueue.nCode = EscKey
  ADD(ReservedKeyQueue,+ReservedKeyQueue.nCode)
  ReservedKeyQueue.nCode = F12Key
  ADD(ReservedKeyQueue,+ReservedKeyQueue.nCode)
  ReservedKeyQueue.nCode = F2Key
  ADD(ReservedKeyQueue,+ReservedKeyQueue.nCode)
  ReservedKeyQueue.nCode = F3Key
  ADD(ReservedKeyQueue,+ReservedKeyQueue.nCode)
  ReservedKeyQueue.nCode = F5Key
  ADD(ReservedKeyQueue,+ReservedKeyQueue.nCode)
  ReservedKeyQueue.nCode = glo:MinusKey
  ADD(ReservedKeyQueue,+ReservedKeyQueue.nCode)
  ReservedKeyQueue.nCode = PgDnKey
  ADD(ReservedKeyQueue,+ReservedKeyQueue.nCode)
  ReservedKeyQueue.nCode = PgUpKey
  ADD(ReservedKeyQueue,+ReservedKeyQueue.nCode)
  ReservedKeyQueue.nCode = glo:PlusKey
  ADD(ReservedKeyQueue,+ReservedKeyQueue.nCode)
  ReservedKeyQueue.nCode = UpKey
  ADD(ReservedKeyQueue,+ReservedKeyQueue.nCode)

  newKeyCode = lKeyCode
  szFunctionText = 'The ' & strAssignmentText & ' function'
  szAssignmentText = 'is assigned to the ' & keyCodeName.ToName(newKeyCode)
  OPEN(Window)
  ACCEPT
    CASE EVENT()
      OF EVENT:Timer
         IF KEYCODE() > MouseCenter2 AND KEYCODE() <> EnterKey
            ReservedKeyQueue.nCode = KEYCODE()
            GET(ReservedKeyQueue,+ReservedKeyQueue.nCode)
            IF ~ERRORCODE() AND KEYCODE() <> lKeyCode
               szAssignmentText = keyCodeName.ToName() & ' is assigned to another function - please try a different key'
               ?szAssignmentText{PROP:FontColor} = COLOR:White
               ?szAssignmentText{PROP:Color} = COLOR:Red
               DISABLE(?cmdAssign)
            ELSE
               IF BAND(KEYCODE(),0FFh)
                  newKeyCode = KEYCODE()
                  szAssignmentText = CHOOSE(newKeyCode = lKeyCode,'is','will be') & ' assigned to the ' & keyCodeName.ToName(newKeyCode)
                  ?szAssignmentText{PROP:FontColor} = COLOR:None
                  ?szAssignmentText{PROP:Color} = COLOR:None
                  IF newKeyCode = lKeyCode
                     DISABLE(?cmdAssign)
                  ELSE
                     ENABLE(?cmdAssign)
                     SELECT(?cmdAssign)
                  END
               END
            END
            DISPLAY(?szAssignmentText)
         END
      OF EVENT:Accepted
         CASE ACCEPTED()
           OF ?cmdAssign
              lKeyCode = newKeyCode
              POST(EVENT:CloseWindow)
           OF ?cmdCancel
              POST(EVENT:CloseWindow)
         END
      OF EVENT:CloseWindow
         BREAK
    END
  END
  CLOSE(Window)
  RETURN
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[PROCEDURE]
NAME SilentlyRemoveDirectory
PROTOTYPE '(*CSTRING szDirPath)'
PARAMETERS '(*CSTRING szDirPath)'
[COMMON]
FROM ABC Source
MODIFIED '2015/05/16' '14:47:22'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
czztFrom      CSTRING(262)
czztTo        CSTRING('<0,0>')
file_op       GROUP(_SHFILEOPSTRUCT),PRE(FO)
              END
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  file_op.hwnd = 0
  file_op.wFunc = FO_DELETE
  czztFrom = szDirPath & '<0,0>'
  file_op.pFrom = ADDRESS(czztFrom)
  file_op.pTo   = ADDRESS(czztTo)
  file_op.fFlags = FOF_NO_UI
  file_op.fAnyOperationsAborted = FALSE
  file_op.hNameMappings = 0
  file_op.lpszProgressTitle = ADDRESS(czztTo)
  kcr_SHFileOperation(file_op)
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2011/11/18' '14:32:30'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME FindStr
PROTOTYPE '(STRING strOptionsGroup)'
PARAMETERS '(STRING strOptionsGroup)'
[COMMON]
FROM ABC Source
MODIFIED '2019/02/17' '11:39:11'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
      ASSERT(0,eqDBG & 'Thread ' & thread() & ' started')
      FindStrOptions = strOptionsGroup
      ReplaceChr(FindStrOptions.szPattern,'§','''')
      ResultQueue &= FindStrOptions.ResultQueue

      !szCmdline   CSTRING('findstr /s /i /n /p "keystone" "d:\program files (x86)\softvelocity\clarion8\accessory\libsrc\win\*.inc"')
      szCmdLine = 'findstr /n '
      IF NOT FindStrOptions.bIncludeBinary
         szCmdLine = szCmdLine & '/p '
      END
      IF FindStrOptions.bMatchPatternStartOfLine
         szCmdLine = szCmdLine & '/b '
      END
      IF FindStrOptions.bMatchPatternEndOfLine
         szCmdLine = szCmdLine & '/e '
      END
      IF FindStrOptions.bUseRegularExpressions
         szCmdLine = szCmdLine & '/r '
      ELSE
         szCmdLine = szCmdLine & '/l '
      END
      IF NOT FindStrOptions.bCaseSensitive
         szCmdLine = szCmdLine & '/i '
      END
      IF FindStrOptions.bExactMatch
         szCmdLine = szCmdLine & '/x '
      END
      IF FindStrOptions.bExcludeMatch
         szCmdLine = szCmdLine & '/v '
      END
      IF FindStrOptions.bFilenamesOnly
         szCmdLine = szCmdLine & '/m '
      END

      IF FindStrOptions.bFileListFromFile = FALSE
         IF FindStrOptions.bSearchSubdirectories
            IF FindStrOptions.nLevels = 0
               szCmdLine = szCmdLine & '/s '
            ELSE
               FREE(FileQueue)

               j = 1
               k = INSTRING(';',FindStrOptions.szSearchPath,1,j)
               LOOP WHILE k
                  szSearchFolder = FindStrOptions.szSearchPath[j : k-1]
                  BuildFileList(0, FindStrOptions.nLevels, szSearchFolder, FindStrOptions.szFileMask, FileQueue)
                  j = k+1
                  k = INSTRING(';',FindStrOptions.szSearchPath,1,j)
               END
               szSearchFolder = FindStrOptions.szSearchPath[j : LEN(FindStrOptions.szSearchPath)]
               BuildFileList(0, FindStrOptions.nLevels, szSearchFolder, FindStrOptions.szFileMask, FileQueue)

               szFileListFilename = ''
               IF kcr_GetTempPath(SIZE(szPathName),szPathName) > 0
                  IF kcr_GetTempFileName(szPathName, szPrefixString, THREAD(), szFileListFilename)
                     AsciiFilename = szFileListFilename
                     CREATE(AsciiFile)
                     OPEN(AsciiFile)
                     LOOP i = 1 TO RECORDS(FileQueue)
                        GET(FileQueue,i)
                        AsciiFile.Buffer = FileQueue.Name
                        APPEND(AsciiFile)
                     END
                     CLOSE(AsciiFile)
                     szCmdLine = szCmdLine & '/f:"' & szFileListFilename & '" '
                  ELSE
                     MESSAGE('GetTempFileName Failed')
                  END
               ELSE
                  MESSAGE('GetTempPath Failed')
               END
            END
         END
      ELSE
         IF UPPER(SUB(FindStrOptions.szFileListFilename,-3,3)) = 'XML'
            FREE(FileQueue)
            x# = 0
!<File_List name="kss.cwproj" version="1">
!  <Opened_Files>
!    <file name="BIN\RELEASE\KSS.EXE" />
!    <file name="C:\CLARION11 PROJECTS\DEVUNA-KWIKSOURCESEARCH\APPLICATION\KSS\ABDNROW.ICO" />   
            XmlFilename = FindStrOptions.szFileListFilename
            OPEN(XmlFile)
            IF NOT ERRORCODE()
               SET(XmlFile)
               NEXT(XmlFile)
               LOOP UNTIL ERRORCODE()
                  szXmlString = UPPER(CLIP(LEFT(XmlFile.Buffer)))
                  IF szXmlString = '<<OPENED_FILES>'
                     !Get the Filenames
                     NEXT(XmlFile)
                     LOOP UNTIL ERRORCODE()
                        szXmlString = UPPER(CLIP(LEFT(XmlFile.Buffer)))
                        IF szXmlString = '<</OPENED_FILES>'
                           BREAK !Exit inner loop
                        ELSE
                           IF szXmlString[14] = ':'
                              FileQueue.Name = szXmlString[13 : (LEN(szXmlString) - 4)]
                              !only include clw, inc, def, equ and trn
                              CASE SUB(CLIP(FileQueue.Name),-3,3) !FileQueue.Name is a STRING so needs to be clipped
                                OF 'CLW' OROF 'INC' OROF 'DEF' OROF 'EQU' OROF 'TRN' OROF 'INT'
                                   ADD(FileQueue)
                              ELSE
                              END
                           END
                        END
                        NEXT(XmlFile)
                     END
                     
                     szFileListFilename = ''
                     IF kcr_GetTempPath(SIZE(szPathName),szPathName) > 0
                        IF kcr_GetTempFileName(szPathName, szPrefixString, THREAD(), szFileListFilename)
                           AsciiFilename = szFileListFilename
                           CREATE(AsciiFile)
                           OPEN(AsciiFile)
                           LOOP i = 1 TO RECORDS(FileQueue)
                              GET(FileQueue,i)
                              AsciiFile.Buffer = FileQueue.Name
                              APPEND(AsciiFile)
                           END
                           CLOSE(AsciiFile)
                           szCmdLine = szCmdLine & '/f:"' & szFileListFilename & '" '
                        ELSE
                           MESSAGE('GetTempFileName Failed')
                        END
                     ELSE
                        MESSAGE('GetTempPath Failed')
                     END                     
                     
                     BREAK !Exit outer loop
                  ELSE
                  END
                  NEXT(XmlFile)
               END
               CLOSE(XmlFile)
            ELSE
               MESSAGE('Error Opening ' & XmlFilename)
            END
         ELSE
            szCmdLine = szCmdLine & '/f:"' & FindStrOptions.szFileListFilename & '" '
         END   
      END

      szFixedFileMask = FindStrOptions.szFileMask
      j = LEN(szFixedFileMask)
      LOOP i = 1 TO j
         IF szFixedFileMask[i] = ';' OR szFixedFileMask[i] = '|'
            szFixedFileMask[i] = ' '
         END
      END

      !setup exclusions for use with MASK procedure
      j = LEN(FindStrOptions.szExcludeMask)
      k = 1
      LOOP i = 1 TO j
         CASE FindStrOptions.szExcludeMask[i]
           OF ';' OROF '|'
              szFixedExcludeMask[k] = ' '
              k += 1
           OF '*'
              IF k = 1 OR szFixedExcludeMask[k-1] = ' '
                 szFixedExcludeMask[k] = '^'
                 k += 1
                 szFixedExcludeMask[k] = '.'
                 k += 1
                 szFixedExcludeMask[k] = '*'
                 k += 1
              ELSIF i < j
                 CASE FindStrOptions.szExcludeMask[i+1]
                   OF ' ' OROF ';' OROF '|'
                      szFixedExcludeMask[k] = '.'
                      k += 1
                      szFixedExcludeMask[k] = '*'
                      k += 1
                      szFixedExcludeMask[k] = '$'
                      k += 1
                 ELSE
                      IF FindStrOptions.szExcludeMask[i-1] <> '.' !add IF statement around following code
                         szFixedExcludeMask[k] = '.'              !
                         k += 1                                   !   
                      END                                         !ENDIF   
                      szFixedExcludeMask[k] = '*'
                      k += 1
                 END
              ELSE
                 szFixedExcludeMask[k] = '.'
                 k += 1
                 szFixedExcludeMask[k] = '*'
                 k += 1
                 szFixedExcludeMask[k] = '$'
                 k += 1
              END
         ELSE
            szFixedExcludeMask[k] = UPPER(FindStrOptions.szExcludeMask[i])
            k += 1
         END
      END
      szFixedExcludeMask[k] = '<0>'

      IF NOT FindStrOptions.bUseRegularExpressions
!     http://stackoverflow.com/questions/8844868/what-are-the-undocumented-features-and-limitations-of-the-windows-findstr-comman
!     Escaping Quote within command line search strings
!        Quotes within command line search strings must be escaped with backslash like \". This is true for both literal and regex search strings.

!        Note: The quote may also need to be escaped for the CMD.EXE parser, but this has nothing to do with FINDSTR. For example, to search for a single quote you could use:
!        FINDSTR \^" file && echo found || echo not found

!     Escaping Backslash within command line literal search strings
!        Backslash in a literal search string must generally be escaped with backslash like \\.
!        But there is a special case when the search string contains the following form:
!        [quote][any set of chars][1 or more backslashes][quote]
!        Each backslash in [1 or more backslashes] must be double escaped as \\\\
!        Any backslash in [any set of chars] is escaped normally as \\ as long as the last character in the set is not a backslash.

!        The quotes are escaped normally as \"

!        For example, "\a\b\\" is escaped as \"\\a\\b\\\\\\\\\"

         !need to escape any " in the pattern

         !find [any set of chars]
         j = LEN(FindStrOptions.szPattern)
         LOOP i = j TO 1 BY -1
           IF FindStrOptions.szPattern[i] <> '\'
              BREAK
           END
         END
         IF i = 0    !szPattern is all \ chars
            szAnySetOfChars = ''
            szBackslashes = FindStrOptions.szPattern
         ELSIF i < j
            szAnySetOfChars = FindStrOptions.szPattern[1 : i]
            szBackslashes = FindStrOptions.szPattern[i+1 : j]
         ELSE        !i = j
            szAnySetOfChars = FindStrOptions.szPattern
            szBackslashes = ''
         END
         j = LEN(szAnySetOfChars)
         k = 0
         FindStrOptions.szPattern = ''
         LOOP i = 1 TO j
           IF szAnySetOfChars[i] <> '\'
              k += 1
              FindStrOptions.szPattern[k] = szAnySetOfChars[i]
           ELSE   !double up the '\' chars
              k += 1
              FindStrOptions.szPattern[k] = '\'
              k += 1
              FindStrOptions.szPattern[k] = '\'
           END
         END
         !now terminate the cstring
         k += 1
         FindStrOptions.szPattern[k] = '<0>'

         j = LEN(szBackslashes)
         LOOP j TIMES
           FindStrOptions.szPattern = FindStrOptions.szPattern & '\\\\'
         END

         !now escape any " chars
         j = 1
         i = INSTRING('"',FindStrOptions.szPattern,,j)
         LOOP WHILE i
            FindStrOptions.szPattern = FindStrOptions.szPattern[j : i-1] & '\' & FindStrOptions.szPattern[i : LEN(FindStrOptions.szPattern)]
            j = i + 2
            i = INSTRING('"',FindStrOptions.szPattern,,j)
         END


      ELSE  !using regular expressions
      !  Escaping Backslash within command line regex search strings
      !     Backslash in a regex must be either double escaped like \\\\, or else single escaped within a character class set like [\\]
      END

      IF FindStrOptions.bSearchStringsFromFile
         szCmdLine = szCmdLine & '/g:"' & FindStrOptions.szSearchStringFilename & '"'
      ELSE
         IF INSTRING('|',FindStrOptions.szPattern)
            szSearchStringFilename = SavePatternToFile(FindStrOptions.szPattern)
            IF szSearchStringFilename <> ''
               szCmdLine = szCmdLine & '/g:"' & szSearchStringFilename & '"'
            END
         ELSE
            szCmdLine = szCmdLine & '/c:"' & FindStrOptions.szPattern & '"'
         END
      END

      IF FindStrOptions.bFileListFromFile = FALSE
         IF FindStrOptions.bSearchSubdirectories = TRUE
            IF FindStrOptions.nLevels = 0
               szCmdLine = szCmdLine & ' /d:"' & FindStrOptions.szSearchPath & '" ' & szFixedFileMask
            ELSE
               !files from file list
            END
         ELSE
            szCmdLine = szCmdLine & ' /d:"' & FindStrOptions.szSearchPath & '" ' & szFixedFileMask
         END
      END

      glo:findstrCommandLine = szCmdLine

      saAttr.nLength = SIZE(SECURITY_ATTRIBUTES)
      saAttr.bInheritHandle = TRUE
      saAttr.lpSecurityDescriptor = 0

      ! Create a pipe for the child process's STDOUT.
      IF kcr_CreatePipe(g_hChildStd_OUT_Rd, g_hChildStd_OUT_Wr, saAttr, 0)
         !Ensure the read handle to the pipe for STDOUT is not inherited.
         IF kcr_SetHandleInformation(g_hChildStd_OUT_Rd, HANDLE_FLAG_INHERIT, 0)
         !IF kcr_SetHandleInformation(g_hChildStd_OUT_Rd, BOR(HANDLE_FLAG_INHERIT,FILE_FLAG_OVERLAPPED), 0)
            ! Create a pipe for the child process's STDIN.
            IF kcr_CreatePipe(g_hChildStd_IN_Rd, g_hChildStd_IN_Wr, saAttr, 0)
               ! Ensure the write handle to the pipe for STDIN is not inherited.
               IF kcr_SetHandleInformation(g_hChildStd_IN_Wr, HANDLE_FLAG_INHERIT, 0)
                  !save the current path
                  SavePath = PATH()

                  FREE(ResultQueue)
                  CreateChildProcess(szCmdLine)
                  progressCalls = ReadFromPipe(FindStrOptions.feqSearchProgress, CancelFlag)

                  IF szFileListFilename <> ''
                     REMOVE(szFileListFilename)
                  END
                  IF szSearchStringFilename <> ''
                     REMOVE(szSearchStringFilename)
                  END
                  FillResultQueue(ResultQueue, FindStrOptions.feqSearchProgress, szFixedFileMask, szFixedExcludeMask, CancelFlag, progressCalls, FindStrOptions.bFilenamesOnly, FindStrOptions.bFileListFromFile)

                  IF FindStrOptions.bExcludeComments
                     bMatchMode = Match:Simple
                     IF NOT FindStrOptions.bCaseSensitive
                        bMatchMode = BOR(bMatchMode,Match:NoCase)
                     END
                     IF FindStrOptions.bUseRegularExpressions
                        bMatchMode = BOR(bMatchMode,Match:Regular)
                     END

                     j = RECORDS(ResultQueue)
                     LOOP i = j TO 1 BY -1
                        GET(ResultQueue,i)
                        IF thisFile <> ResultQueue.Filename & ResultQueue.szExtension
                           thisFile = ResultQueue.Filename & ResultQueue.szExtension
                        END
                        IF NOT MatchWithoutComment(ResultQueue.Text,FindStrOptions.szPattern,bMatchMode,ResultQueue.szExtension)
                           DELETE(ResultQueue)
                        END
                        YIELD()
                     END
                  END

                  SETPATH(SavePath)
               ELSE
                  MESSAGE('Stdin SetHandleInformation')
               END
            ELSE
               MESSAGE('Stdin CreatePipe')
            END
         ELSE
            MESSAGE('Stdout SetHandleInformation')
         END
      ELSE
         MESSAGE('StdoutRd CreatePipe')
      END
      kcr_CloseHandle(g_hChildStd_IN_Rd)
      kcr_CloseHandle(g_hChildStd_IN_Wr)
      kcr_CloseHandle(g_hChildStd_OUT_Rd)
      !kcr_CloseHandle(g_hChildStd_OUT_Wr)
      kcr_CloseHandle(piProcInfo.hProcess)

      !dbx.Debugout('Thread Event posted for tab ' & FindStrOptions.tabNumber & '  in FindStr')
      POST(EVENT:THREAD+FindStrOptions.tabNumber,,1)
      ASSERT(0,eqDBG & 'Thread ' & thread() & ' finished')
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!samples for testing
!f:\
!f:\softvelocity
!f:\softvelocity\
!f:\softvelocity\\
!'f:\
!'f:\softvelocity'
!'f:\softvelocity\'
!'f:\softvelocity\\'
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
saAttr               LIKE(SECURITY_ATTRIBUTES)
SavePath             CSTRING(261)
szCmdLine            CSTRING(261)
ResultQueue          &ResultQueueType
lpResultQueue        LONG
bExcludeComments     BYTE
bIncludeBinary       BYTE
bMatchMode           LONG
FindStrOptions       GROUP(FindStrOptionsGroupType)
                     END
szFixedFileMask      LIKE(FindStrOptions.szFileMask)
szFixedExcludeMask   LIKE(FindStrOptions.szExcludeMask)

i                    LONG
j                    LONG
k                    LONG
pStringStart         LONG
pStringEnd           LONG
pCommentMarker       LONG
pMatch               LONG
szMatchText          LIKE(ResultQueue.Text)
szSearchFolder       CSTRING(261)
szSearchStringFilename  CSTRING(260)
szFileListFilename   CSTRING(260)
FileQueue            QUEUE(FILE:queue),PRE(FileQueue)
                     END
thisFile             LIKE(ResultQueue.Filename)
thisExtension        LIKE(ResultQueue.szExtension)
szPathName           CSTRING(MAXPATH)
szPrefixString       CSTRING('KSS')
cc                   LONG
progressCalls        LONG
szAnySetOfChars      CSTRING(512)
szBackslashes        CSTRING(512)
szXmlString          CSTRING(2049)
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[CALLS]
BuildFileList
CreateChildProcess
FillResultQueue
MatchWithoutComment
ReadFromPipe
ReplaceChr
SavePatternToFile
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2011/11/27' '13:54:28'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME GetFindDeleteOptions
PROTOTYPE '(*SearchFindOptionsGroupType SearchFindOptions),BOOL'
PARAMETERS '(*SearchFindOptionsGroupType SearchFindOptions)'
[COMMON]
FROM ABC Window
MODIFIED '2013/12/13' '15:39:54'
[DATA]
[SCREENCONTROLS]
! PROMPT('this Search Find Options:'),USE(?thisSearchFindOptions:Prompt)
! ENTRY(@s20),USE(thisSearchFindOptions)
[REPORTCONTROLS]
! STRING(@s20),USE(thisSearchFindOptions)
thisSearchFindOptions    GROUP(SearchFindOptionsGroupType),PRE()
!!> GUID('3a11af8d-8bed-47c7-b100-0461147afa7e'),PROMPT('this Search Find Options:'),HEADER('this Search Find Options'),PICTURE(@s20),TYPEMODE(INS)
                         END
!!> GUID('b347f719-85b9-4254-81e4-05c8ee5a6995')
[SCREENCONTROLS]
! PROMPT('Find Text Queue:'),USE(?FindTextQueue:Prompt)
! ENTRY(@s20),USE(FindTextQueue)
[REPORTCONTROLS]
! STRING(@s20),USE(FindTextQueue)
FindTextQueue            FindTextQueueType
!!> GUID('a5f3a907-2ec1-469f-a0e4-6002c8d8987f'),PROMPT('Find Text Queue:'),HEADER('Find Text Queue'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('cc:'),USE(?cc:Prompt)
! ENTRY(@n3),USE(cc),MSG('Completion Code'),TIP('Completion Code')
[REPORTCONTROLS]
! STRING(@n3),USE(cc)
cc                       BYTE !Completion Code
!!> GUID('9d1a43e7-bf28-43ac-bdd1-def999a77683'),INITIAL('LEVEL:User'),PROMPT('cc:'),HEADER('cc'),MESSAGE('Completion Code'),TOOLTIP('Completion Code'),PICTURE(@n3),TYPEMODE(INS)
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default', 'WindowToolbar')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('WindowManager')
WHEN  ('WindowToolbar') ('ToolbarClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(),BYTE,PROC,DERIVED', 'Kill {19}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeAccepted {11}PROCEDURE(),BYTE,PROC,DERIVED')

%ReturnValue FIELD  (cc)
%WindowOperationMode DEFAULT  ('Use WINDOW setting')
%INISaveWindow LONG  (1)
%ProcedureDisableEnhanceFocus LONG  (0)
%ProcedureUseEnterInsteadTabOverride LONG  (0)
%WindowUseEnterInsteadTab LONG  (1)
%ProcedureUseEnterInsteadTabExcludeListCombo LONG  (0)
%ProcedureUseEnterInsteadTabEnableNextTabStop LONG  (0)
%ProcedureUseEnterInsteadTabExcludeG LONG  (1)
%WindowUseEnterInsteadTabExclude MULTI DEFAULT  ()
%GlobalObject DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('NO')
WHEN  ('WindowToolbar') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ThisWindow')
WHEN  ('WindowToolbar') ('Toolbar')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (0)
WHEN  ('WindowToolbar') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%WindowStyles MULTI LONG  ()
%WindowStyleFontName DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontSize DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontStyle DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontColor DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontCharSet DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStylePicture DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleOtherListboxes MULTI DEFAULT  ()
%ProcedureAutoBindFields MULTI LONG  ()
%ProcedureAutoBindField DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindFieldTPL DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindProcedures MULTI LONG  ()
%ProcedureAutoBindProcedure DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindProcedureTPL DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindFieldsIgnored MULTI LONG  ()
%ProcedureAutoBindFieldIgnored DEPEND %ProcedureAutoBindFieldsIgnored DEFAULT TIMES 0

%ProcedureAutoBindProceduresIgnored MULTI LONG  ()
%ProcedureAutoBindProcedureIgnored DEPEND %ProcedureAutoBindProceduresIgnored DEFAULT TIMES 0

%ProcedureAutoBindValidToAddField LONG  (0)
%ProcedureUserBindFields MULTI LONG  ()
%ProcedureUserBindField DEPEND %ProcedureUserBindFields FIELD TIMES 0

%ProcedureAutoBindFieldIgnore DEPEND %ProcedureAutoBindFields LONG TIMES 0

%ProcedureUserBindProcedures MULTI LONG  ()
%ProcedureUserBindProcedure DEPEND %ProcedureUserBindProcedures PROCEDURE TIMES 0

%ProcedureAutoBindProcedureIgnore DEPEND %ProcedureAutoBindProcedures LONG TIMES 0

%ProcedureUserBindExpressions MULTI LONG  ()
%ProcedureUserBindExpressionName DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ProcedureUserBindExpression DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ExtUITabIcon DEPEND %Control DEFAULT TIMES 0

%ExtUITabStyleOverrideGlobal DEPEND %Control LONG TIMES 0

%ExtUITabStyle DEPEND %Control DEFAULT TIMES 3
WHEN  ('') ('Default')
WHEN  ('?FindText:Prompt') ('Default')
WHEN  ('?cmdDeleteNow') ('Default')

%ButtonAction DEPEND %Control DEFAULT TIMES 5
WHEN  ('') ('No Special Action')
WHEN  ('?FindText:Prompt') ('No Special Action')
WHEN  ('?cmdDeleteNow') ('No Special Action')
WHEN  ('?cmdDeleteSelected') ('No Special Action')
WHEN  ('?cmdRegExHelp') ('No Special Action')

%ButtonRunName DEPEND %Control DEFAULT TIMES 0

%ButtonRunParameters DEPEND %Control DEFAULT TIMES 0

%ButtonProcedure DEPEND %Control PROCEDURE TIMES 0

%ButtonThread DEPEND %Control LONG TIMES 0

%ButtonThreadStack DEPEND %Control DEFAULT TIMES 5
WHEN  ('') ('25000')
WHEN  ('?FindText:Prompt') ('25000')
WHEN  ('?cmdDeleteNow') ('25000')
WHEN  ('?cmdDeleteSelected') ('25000')
WHEN  ('?cmdRegExHelp') ('25000')

%ButtonParameters DEPEND %Control DEFAULT TIMES 0

%ButtonReturnValueAssignment DEPEND %Control FIELD TIMES 0

%ButtonReturnValueReferenceAssign DEPEND %Control LONG TIMES 0

%ButtonRequest DEPEND %Control DEFAULT TIMES 5
WHEN  ('') ('None')
WHEN  ('?FindText:Prompt') ('None')
WHEN  ('?cmdDeleteNow') ('None')
WHEN  ('?cmdDeleteSelected') ('None')
WHEN  ('?cmdRegExHelp') ('None')

%ButtonThreadParameters DEPEND %Control DEFAULT TIMES 0

%ButtonThreadReturnValueAssignment DEPEND %Control FIELD TIMES 0

%PreLookupKey DEPEND %Control KEY TIMES 0

%PreLookupField DEPEND %Control COMPONENT TIMES 0

%PreLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PreLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupKey DEPEND %Control KEY TIMES 0

%PostLookupField DEPEND %Control COMPONENT TIMES 0

%PostLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupDuringValidate DEPEND %Control LONG TIMES 3
WHEN  ('') (1)
WHEN  ('?FindText:Prompt') (1)
WHEN  ('?cmdDeleteNow') (1)

%LookupAssign DEPEND %Control MULTI LONG TIMES 0

%MoreTarget DEPEND %LookupAssign FIELD TIMES 0

%MoreField DEPEND %LookupAssign DEFAULT TIMES 0

%ForceWindowRefresh DEPEND %Control LONG TIMES 0

%CheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%CheckedAssignVariable DEPEND %CheckedAssigns FIELD TIMES 0

%CheckedAssignValue DEPEND %CheckedAssigns DEFAULT TIMES 0

%CheckedHides DEPEND %Control MULTI LONG TIMES 0

%CheckedControl DEPEND %CheckedHides DEFAULT TIMES 0

%CheckedControlAction DEPEND %CheckedHides DEFAULT TIMES 3
WHEN  ('')TIMES 0
WHEN  ('?FindText:Prompt')TIMES 0
WHEN  ('?cmdDeleteNow')TIMES 0

%CheckedEnables DEPEND %Control MULTI LONG TIMES 0

%CheckedControl1 DEPEND %CheckedEnables DEFAULT TIMES 0

%CheckedControl1Action DEPEND %CheckedEnables DEFAULT TIMES 3
WHEN  ('')TIMES 0
WHEN  ('?FindText:Prompt')TIMES 0
WHEN  ('?cmdDeleteNow')TIMES 0

%UncheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%UncheckedAssignVariable DEPEND %UncheckedAssigns FIELD TIMES 0

%UncheckedAssignValue DEPEND %UncheckedAssigns DEFAULT TIMES 0

%UnCheckedHides DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl DEPEND %UnCheckedHides DEFAULT TIMES 0

%UnCheckedControlAction DEPEND %UnCheckedHides DEFAULT TIMES 3
WHEN  ('')TIMES 0
WHEN  ('?FindText:Prompt')TIMES 0
WHEN  ('?cmdDeleteNow')TIMES 0

%UnCheckedEnables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl1 DEPEND %UnCheckedEnables DEFAULT TIMES 0

%UnCheckedControl1Action DEPEND %UnCheckedEnables DEFAULT TIMES 3
WHEN  ('')TIMES 0
WHEN  ('?FindText:Prompt')TIMES 0
WHEN  ('?cmdDeleteNow')TIMES 0

%CheckedDisables DEPEND %Control MULTI LONG TIMES 0

%CheckedDisableControl DEPEND %CheckedDisables DEFAULT TIMES 0

%CheckedDisableControlAction DEPEND %CheckedDisables DEFAULT TIMES 3
WHEN  ('')TIMES 0
WHEN  ('?FindText:Prompt')TIMES 0
WHEN  ('?cmdDeleteNow')TIMES 0

%UnCheckedDisables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedDisableControl DEPEND %UnCheckedDisables DEFAULT TIMES 0

%UnCheckedDisableControlAction DEPEND %UnCheckedDisables DEFAULT TIMES 3
WHEN  ('')TIMES 0
WHEN  ('?FindText:Prompt')TIMES 0
WHEN  ('?cmdDeleteNow')TIMES 0

%ProcedureOneInstance LONG  (0)
%FieldGradientColorType DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('Off')
WHEN  ('?TextBox') ('Off')

%FieldGradientColorTypeVariable DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('')
WHEN  ('?TextBox') ('')

%FieldGradientColorTypeIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?TextBox') (0)

%FieldGradientColorFrom DEPEND %Control LONG TIMES 2
WHEN  ('') (-1)
WHEN  ('?TextBox') (-1)

%FieldGradientColorFromVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorFromIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?TextBox') (0)

%FieldGradientColorTo DEPEND %Control LONG TIMES 2
WHEN  ('') (-1)
WHEN  ('?TextBox') (-1)

%FieldGradientColorToVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorToIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?TextBox') (0)

%PreserveVarsLoc MULTI LONG  ()
%PreserveVarLoc DEPEND %PreserveVarsLoc DEFAULT TIMES 0

%ActiveImageEnable DEPEND %Control LONG TIMES 0

%AIObjectName DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('AIBtn0')

%AIEnableMimicControl DEPEND %Control LONG TIMES 1
WHEN  ('') (1)

%AIMimicControl DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('?FindText:Prompt')

%AIImgRound DEPEND %Control LONG TIMES 0

%AIOverrideImg DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgVariable DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIDisableImg DEPEND %Control DEFAULT TIMES 0

%AIDisableImgVariable DEPEND %Control DEFAULT TIMES 0

%AIDisableImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIHotImg DEPEND %Control DEFAULT TIMES 0

%AIHotImgVariable DEPEND %Control DEFAULT TIMES 0

%AIHotImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIPressedImg DEPEND %Control DEFAULT TIMES 0

%AIPressedImgVariable DEPEND %Control DEFAULT TIMES 0

%AIPressedImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[END]
EMBED %WindowManagerMethodCodeSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5300
PROPERTY:END
thisSearchFindOptions = SearchFindOptions
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8040
PROPERTY:END
  IF thisSearchFindOptions.MatchType = Match:Regular
     ENABLE(?cmdRegExHelp)
  ELSE
     DISABLE(?cmdRegExHelp)
  END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8400
PROPERTY:END
CorrectForOffscreen(Window)
INIMgr.FetchQueue('FindText Queue','FindText',FindTextQueue,FindTextQueue.szFindText)
[END]
[END]
WHEN 'Kill'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
INIMgr.UpdateQueue('FindText Queue','FindText',FindTextQueue,FindTextQueue.szFindText)
[END]
[END]
[END]
EMBED %ControlEventHandling
[INSTANCES]
WHEN '?FindText'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
j = RECORDS(FindTextQueue)
LOOP i = 1 TO j
   GET(FindTextQueue,i)
   IF FindTextQueue.szFindText = thisSearchFindOptions.szFindText
      BREAK
   END
END
IF i > j
   IF j = MAXMRU
      GET(FindTextQueue,j)
      DELETE(FindTextQueue)
   END
   FindTextQueue.szFindText = thisSearchFindOptions.szFindText
   ADD(FindTextQueue,1)
ELSE
   DELETE(FindTextQueue)
   FindTextQueue.szFindText = thisSearchFindOptions.szFindText
   ADD(FindTextQueue,1)
END
[END]
[END]
WHEN '?cmdDeleteNow'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
SearchFindOptions = thisSearchFindOptions
cc = LEVEL:Benign
POST(EVENT:CloseWindow)
[END]
[END]
WHEN '?cmdCancel '
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
cc = Level:Cancel
POST(EVENT:CloseWindow)
[END]
[END]
WHEN '?MatchType'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
IF thisSearchFindOptions.MatchType = Match:Simple
   DISABLE(?cmdRegExHelp)
ELSE
   ENABLE(?cmdRegExHelp)
END
[END]
[END]
WHEN '?cmdDeleteSelected'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
i = ?szText{PROP:SelStart}
j = ?szText{PROP:SelEnd}
IF j > i
   thisSearchFindOptions.szFindText = thisSearchFindOptions.szText[i : j]
   j = RECORDS(FindTextQueue)
   LOOP i = 1 TO j
      GET(FindTextQueue,i)
      IF FindTextQueue.szFindText = thisSearchFindOptions.szFindText
         BREAK
      END
   END
   IF i > j
      IF j = MAXMRU
         GET(FindTextQueue,j)
         DELETE(FindTextQueue)
      END
      FindTextQueue.szFindText = thisSearchFindOptions.szFindText
      ADD(FindTextQueue,1)
   ELSE
      DELETE(FindTextQueue)
      FindTextQueue.szFindText = thisSearchFindOptions.szFindText
      ADD(FindTextQueue,1)
   END
   SearchFindOptions = thisSearchFindOptions
   cc = LEVEL:Benign
   POST(EVENT:CloseWindow)
ELSE
   MESSAGE('This button is intended to make it easy to search|on the selected (highlighted) text from the current line.','No Text Selected',ICON:Asterisk)
END
[END]
[END]
WHEN '?cmdRegExHelp'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
oHH.ShowTopic('RegularExpressionOperators.htm')
[END]
[END]
[END]
EMBED %WindowManagerMethodDataSection
[INSTANCES]
WHEN 'TakeAccepted'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
i      LONG
j      LONG
[END]
[END]
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[CALLS]
CorrectForOffScreen
[WINDOW]
Window  WINDOW('Find and Delete Options'),AT(,,290,208),FONT('Segoe UI',10,,,CHARSET:DEFAULT), |
          DOUBLE,ICON('kss.ico'),GRAY,HLP('FindAndDeleteOptions.htm'),SYSTEM
          PROMPT('Find'),AT(5,5),USE(?FindText:Prompt),TRN,#ORDINAL(1)
          COMBO(@S255),AT(30,5,255,10),USE(thisSearchFindOptions.szFindText,,?FindText),DROP(20), |
            FROM(FindTextQueue),#ORDINAL(2)
          OPTION('Match In'),AT(5,20,280,25),USE(thisSearchFindOptions.SearchLocation,,?SearchLocation), |
            BOXED,#ORDINAL(3)
            RADIO('Path'),AT(11,30),USE(?SearchLocation:Radio1),TRN,VALUE('1'),#ORDINAL(4)
            RADIO('Filename'),AT(55,30),USE(?SearchLocation:Radio2),TRN,VALUE('2'),#ORDINAL(5)
            RADIO('Extension'),AT(115,30),USE(?SearchLocation:Radio2:2),TRN,VALUE('3'),#ORDINAL(6)
            RADIO('Location'),AT(175,30),USE(?SearchLocation:Radio3),TRN,VALUE('5'),#ORDINAL(7)
            RADIO('Text'),AT(233,30),USE(?SearchLocation:Radio4),FONT(,,,FONT:bold),TRN,VALUE('6'), |
              #ORDINAL(8)
          END
          OPTION('Delete Condition'),AT(5,50,280,25),USE(thisSearchFindOptions.DeleteCondition, |
            ,?DeleteCondition),BOXED,#ORDINAL(9)
            RADIO('Delete rows when they match'),AT(11,60),USE(?DeleteCondition:Radio1),TRN, |
              VALUE('0'),#ORDINAL(10)
            RADIO('Delete rows when they do NOT match'),AT(132,60),USE(?DeleteCondition:Radio2), |
              TRN,VALUE('1'),#ORDINAL(11)
          END
          OPTION('Match Type'),AT(5,80,280,25),USE(thisSearchFindOptions.MatchType,,?MatchType), |
            BOXED,#ORDINAL(12)
            RADIO('Simple'),AT(11,90),USE(?MatchType:Radio1),TIP('Searches for an occur' & |
              'rence of the find parameter in the selected result column.'),TRN,VALUE('0'), |
              #ORDINAL(13)
            RADIO('Regular Expression'),AT(87,90,76),USE(?MatchType:Radio2),TIP('A regular ' & |
              'expression match where the find parameter contains the regular expression.'), |
              TRN,VALUE('2'),#ORDINAL(14)
          END
          BUTTON,AT(169,90,12,10),USE(?cmdRegExHelp),ICON('help.ico'),FLAT,TIP('Regular Ex' & |
            'pression Help'),#ORDINAL(15)
          CHECK(' Case Sensitive'),AT(198,90),USE(thisSearchFindOptions.MatchCase,,?MatchCase), |
            TRN,#ORDINAL(16)
          BOX,AT(5,108,279,76),USE(?TextBox),COLOR(COLOR:Black),LINEWIDTH(1),#ORDINAL(17)
          TEXT,AT(7,109,276,74),USE(thisSearchFindOptions.szText,,?szText),VSCROLL,READONLY, |
            SKIP,#ORDINAL(18)
          BUTTON('Delete &Now'),AT(222,189,60,14),USE(?cmdDeleteNow),DEFAULT,#ORDINAL(19)
          BUTTON('Delete &Selected'),AT(157,189,60,14),USE(?cmdDeleteSelected),#ORDINAL(20)
        END

[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2011/11/30' '16:15:57'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME winGetSearchParameters
PROTOTYPE '(*FindStrOptionsGroupType SearchOptions),BOOL'
PARAMETERS '(*FindStrOptionsGroupType SearchOptions)'
[COMMON]
FROM ABC Window
MODIFIED '2019/02/15' '16:30:49'
[DATA]
[SCREENCONTROLS]
! PROMPT('Result Code:'),USE(?ResultCode:Prompt)
! ENTRY(@n3),USE(ResultCode)
[REPORTCONTROLS]
! STRING(@n3),USE(ResultCode)
ResultCode               BYTE
!!> GUID('ee5dacb5-301d-458d-a469-481addf95d47'),INITIAL('Level:Cancel'),PROMPT('Result Code:'),HEADER('Result Code'),PICTURE(@n3),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('Pattern Queue:'),USE(?PatternQueue:Prompt)
! ENTRY(@s20),USE(PatternQueue)
[REPORTCONTROLS]
! STRING(@s20),USE(PatternQueue)
PatternQueue             QUEUE(MRUQueueType),PRE(PatternQueue)
!!> GUID('c7c335e4-bc67-43b1-aaed-1159cf11af11'),PROMPT('Pattern Queue:'),HEADER('Pattern Queue'),PICTURE(@s20),TYPEMODE(INS)
                         END
!!> GUID('d27b2055-7700-477f-9ec4-b3bf59d37624')
[SCREENCONTROLS]
! PROMPT('Search Path Queue:'),USE(?SearchPathQueue:Prompt)
! ENTRY(@s20),USE(SearchPathQueue)
[REPORTCONTROLS]
! STRING(@s20),USE(SearchPathQueue)
SearchPathQueue          QUEUE(MRUQueueType),PRE(SearchPathQueue)
!!> GUID('494a0e1a-a9c6-42d7-afbf-b6e07270085a'),PROMPT('Search Path Queue:'),HEADER('Search Path Queue'),PICTURE(@s20),TYPEMODE(INS)
                         END
!!> GUID('9b5a3a93-650c-4dd5-a320-2c29a952b01a')
[SCREENCONTROLS]
! PROMPT('File Mask Queue:'),USE(?FileMaskQueue:Prompt)
! ENTRY(@s20),USE(FileMaskQueue)
[REPORTCONTROLS]
! STRING(@s20),USE(FileMaskQueue)
FileMaskQueue            QUEUE(MRUQueueType),PRE(FileMaskQueue)
!!> GUID('ec6ef9ae-03b5-418f-8a1a-ad798d15ae1b'),PROMPT('File Mask Queue:'),HEADER('File Mask Queue'),PICTURE(@s20),TYPEMODE(INS)
                         END
!!> GUID('786e6f02-c398-488e-b35a-29348eff1a0c')
[SCREENCONTROLS]
! PROMPT('Exclude Mask Queue:'),USE(?ExcludeMaskQueue:Prompt)
! ENTRY(@s20),USE(ExcludeMaskQueue)
[REPORTCONTROLS]
! STRING(@s20),USE(ExcludeMaskQueue)
ExcludeMaskQueue         QUEUE(MRUQueueType),PRE(ExcludeMaskQueue)
!!> GUID('1a77b75c-e4fd-44d0-83ae-9d151f5c54a9'),PROMPT('Exclude Mask Queue:'),HEADER('Exclude Mask Queue'),PICTURE(@s20),TYPEMODE(INS)
                         END
!!> GUID('cb6cdfec-2c12-433f-b72d-ae0dfdb10b9c')
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default', 'WindowToolbar')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('WindowManager')
WHEN  ('WindowToolbar') ('ToolbarClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(),BYTE,PROC,DERIVED', 'Kill {19}PROCEDURE(),BYTE,PROC,DERIVED', |
  'Reset {18}PROCEDURE(BYTE Force=0),DERIVED', 'TakeAccepted {11}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeFieldEvent {9}PROCEDURE(),BYTE,PROC,DERIVED', 'TakeNewSelection       PROCEDURE(),BYTE,PROC,DERIVED')

%ReturnValue FIELD  (ResultCode)
%WindowOperationMode DEFAULT  ('Use WINDOW setting')
%INISaveWindow LONG  (1)
%ProcedureDisableEnhanceFocus LONG  (0)
%ProcedureUseEnterInsteadTabOverride LONG  (0)
%WindowUseEnterInsteadTab LONG  (1)
%ProcedureUseEnterInsteadTabExcludeListCombo LONG  (0)
%ProcedureUseEnterInsteadTabEnableNextTabStop LONG  (0)
%ProcedureUseEnterInsteadTabExcludeG LONG  (1)
%WindowUseEnterInsteadTabExclude MULTI DEFAULT  ()
%GlobalObject DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('NO')
WHEN  ('WindowToolbar') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ThisWindow')
WHEN  ('WindowToolbar') ('Toolbar')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (0)
WHEN  ('WindowToolbar') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%WindowStyles MULTI LONG  ()
%WindowStyleFontName DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontSize DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontStyle DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontColor DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontCharSet DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStylePicture DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleOtherListboxes MULTI DEFAULT  ()
%ProcedureAutoBindFields MULTI LONG  ()
%ProcedureAutoBindField DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindFieldTPL DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindProcedures MULTI LONG  ()
%ProcedureAutoBindProcedure DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindProcedureTPL DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindFieldsIgnored MULTI LONG  ()
%ProcedureAutoBindFieldIgnored DEPEND %ProcedureAutoBindFieldsIgnored DEFAULT TIMES 0

%ProcedureAutoBindProceduresIgnored MULTI LONG  ()
%ProcedureAutoBindProcedureIgnored DEPEND %ProcedureAutoBindProceduresIgnored DEFAULT TIMES 0

%ProcedureAutoBindValidToAddField LONG  (0)
%ProcedureUserBindFields MULTI LONG  ()
%ProcedureUserBindField DEPEND %ProcedureUserBindFields FIELD TIMES 0

%ProcedureAutoBindFieldIgnore DEPEND %ProcedureAutoBindFields LONG TIMES 0

%ProcedureUserBindProcedures MULTI LONG  ()
%ProcedureUserBindProcedure DEPEND %ProcedureUserBindProcedures PROCEDURE TIMES 0

%ProcedureAutoBindProcedureIgnore DEPEND %ProcedureAutoBindProcedures LONG TIMES 0

%ProcedureUserBindExpressions MULTI LONG  ()
%ProcedureUserBindExpressionName DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ProcedureUserBindExpression DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ExtUITabIcon DEPEND %Control DEFAULT TIMES 0

%ExtUITabStyleOverrideGlobal DEPEND %Control LONG TIMES 0

%ExtUITabStyle DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('Default')

%ButtonAction DEPEND %Control DEFAULT TIMES 9
WHEN  ('') ('No Special Action')
WHEN  ('?cmdAddFolder') ('No Special Action')
WHEN  ('?cmdLoadSavedResults') ('No Special Action')
WHEN  ('?cmdLookupFileListFilename') ('No Special Action')
WHEN  ('?cmdLookupSearchStringFilename') ('No Special Action')
WHEN  ('?cmdRegExHelp') ('No Special Action')
WHEN  ('?cmdSearch') ('No Special Action')
WHEN  ('?cmdSearchNew') ('No Special Action')
WHEN  ('?cmdSelectFolder') ('No Special Action')

%ButtonRunName DEPEND %Control DEFAULT TIMES 0

%ButtonRunParameters DEPEND %Control DEFAULT TIMES 0

%ButtonProcedure DEPEND %Control PROCEDURE TIMES 0

%ButtonThread DEPEND %Control LONG TIMES 0

%ButtonThreadStack DEPEND %Control DEFAULT TIMES 9
WHEN  ('') ('25000')
WHEN  ('?cmdAddFolder') ('25000')
WHEN  ('?cmdLoadSavedResults') ('25000')
WHEN  ('?cmdLookupFileListFilename') ('25000')
WHEN  ('?cmdLookupSearchStringFilename') ('25000')
WHEN  ('?cmdRegExHelp') ('25000')
WHEN  ('?cmdSearch') ('25000')
WHEN  ('?cmdSearchNew') ('25000')
WHEN  ('?cmdSelectFolder') ('25000')

%ButtonParameters DEPEND %Control DEFAULT TIMES 0

%ButtonReturnValueAssignment DEPEND %Control FIELD TIMES 0

%ButtonReturnValueReferenceAssign DEPEND %Control LONG TIMES 0

%ButtonRequest DEPEND %Control DEFAULT TIMES 9
WHEN  ('') ('None')
WHEN  ('?cmdAddFolder') ('None')
WHEN  ('?cmdLoadSavedResults') ('None')
WHEN  ('?cmdLookupFileListFilename') ('None')
WHEN  ('?cmdLookupSearchStringFilename') ('None')
WHEN  ('?cmdRegExHelp') ('None')
WHEN  ('?cmdSearch') ('None')
WHEN  ('?cmdSearchNew') ('None')
WHEN  ('?cmdSelectFolder') ('None')

%ButtonThreadParameters DEPEND %Control DEFAULT TIMES 0

%ButtonThreadReturnValueAssignment DEPEND %Control FIELD TIMES 0

%PreLookupKey DEPEND %Control KEY TIMES 0

%PreLookupField DEPEND %Control COMPONENT TIMES 0

%PreLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PreLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupKey DEPEND %Control KEY TIMES 0

%PostLookupField DEPEND %Control COMPONENT TIMES 0

%PostLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupDuringValidate DEPEND %Control LONG TIMES 4
WHEN  ('') (1)
WHEN  ('?nLevels') (1)
WHEN  ('?szFileListFilename') (1)
WHEN  ('?szSearchStringFilename') (1)

%LookupAssign DEPEND %Control MULTI LONG TIMES 0

%MoreTarget DEPEND %LookupAssign FIELD TIMES 0

%MoreField DEPEND %LookupAssign DEFAULT TIMES 0

%ForceWindowRefresh DEPEND %Control LONG TIMES 0

%CheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%CheckedAssignVariable DEPEND %CheckedAssigns FIELD TIMES 0

%CheckedAssignValue DEPEND %CheckedAssigns DEFAULT TIMES 0

%CheckedHides DEPEND %Control MULTI LONG TIMES 0

%CheckedControl DEPEND %CheckedHides DEFAULT TIMES 0

%CheckedControlAction DEPEND %CheckedHides DEFAULT TIMES 1
WHEN  ('')TIMES 0

%CheckedEnables DEPEND %Control MULTI LONG TIMES 0

%CheckedControl1 DEPEND %CheckedEnables DEFAULT TIMES 0

%CheckedControl1Action DEPEND %CheckedEnables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%UncheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%UncheckedAssignVariable DEPEND %UncheckedAssigns FIELD TIMES 0

%UncheckedAssignValue DEPEND %UncheckedAssigns DEFAULT TIMES 0

%UnCheckedHides DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl DEPEND %UnCheckedHides DEFAULT TIMES 0

%UnCheckedControlAction DEPEND %UnCheckedHides DEFAULT TIMES 1
WHEN  ('')TIMES 0

%UnCheckedEnables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl1 DEPEND %UnCheckedEnables DEFAULT TIMES 0

%UnCheckedControl1Action DEPEND %UnCheckedEnables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%CheckedDisables DEPEND %Control MULTI LONG TIMES 0

%CheckedDisableControl DEPEND %CheckedDisables DEFAULT TIMES 0

%CheckedDisableControlAction DEPEND %CheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%UnCheckedDisables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedDisableControl DEPEND %UnCheckedDisables DEFAULT TIMES 0

%UnCheckedDisableControlAction DEPEND %UnCheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%ProcedureOneInstance LONG  (0)
%FieldGradientColorType DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('Off')

%FieldGradientColorTypeVariable DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('')

%FieldGradientColorTypeIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%FieldGradientColorFrom DEPEND %Control LONG TIMES 1
WHEN  ('') (-1)

%FieldGradientColorFromVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorFromIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%FieldGradientColorTo DEPEND %Control LONG TIMES 1
WHEN  ('') (-1)

%FieldGradientColorToVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorToIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%PreserveVarsLoc MULTI LONG  ()
%PreserveVarLoc DEPEND %PreserveVarsLoc DEFAULT TIMES 0

%ActiveImageEnable DEPEND %Control LONG TIMES 0

%AIObjectName DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('AIBtn0')

%AIEnableMimicControl DEPEND %Control LONG TIMES 1
WHEN  ('') (1)

%AIMimicControl DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('?szSearchStringFilename:Prompt')

%AIImgRound DEPEND %Control LONG TIMES 0

%AIOverrideImg DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgVariable DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIDisableImg DEPEND %Control DEFAULT TIMES 0

%AIDisableImgVariable DEPEND %Control DEFAULT TIMES 0

%AIDisableImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIHotImg DEPEND %Control DEFAULT TIMES 0

%AIHotImgVariable DEPEND %Control DEFAULT TIMES 0

%AIHotImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIPressedImg DEPEND %Control DEFAULT TIMES 0

%AIPressedImgVariable DEPEND %Control DEFAULT TIMES 0

%AIPressedImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

[EMBED]
EMBED %ControlEventHandling
[INSTANCES]
WHEN '?cmdSearch'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
IF SearchOptions.szPattern = ''
   SELECT(?szPattern)
ELSIF SearchOptions.szSearchPath = ''
   SELECT(?szSearchPath)
ELSIF SearchOptions.szFileMask = ''
   SELECT(?szFileMask)
ELSE
   IF ValidateSearchPath(SearchOptions.szSearchPath)
      SELECT(?szSearchPath)
   ELSE
      IF glo:SyncPathWithPattern = TRUE
         SaveSearchOptions(SearchOptions)
      END
      glo:NewSearchAction = FALSE   !thisNewSearchAction
      ResultCode = Level:Benign
      glo:nDefaultSearchButton = BUTTON:SEARCH
      POST(EVENT:CloseWindow)
   END
END
[END]
[END]
WHEN '?szPattern'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
UPDATE()
IF SearchOptions.szPattern <> ''
   j = RECORDS(PatternQueue)
   LOOP i = 1 TO j
      GET(PatternQueue,i)
      IF PatternQueue.szValue = SearchOptions.szPattern
         BREAK
      END
   END
   IF i > j
      IF j = MAXMRU
         GET(PatternQueue,j)
         DELETE(PatternQueue)
      END
      PatternQueue.szValue = SearchOptions.szPattern
      ADD(PatternQueue,1)
   ELSE
!      IF glo:SyncPathWithPattern = TRUE
!         IF LoadSearchOptions(SearchOptions) = NoError
!            DISPLAY()
!            POST(EVENT:Accepted,?szSearchPath,,1)
!            POST(EVENT:Accepted,?szFileMask,,1)
!            POST(EVENT:Accepted,?szExcludeMask,,1)
!         END
!      END
!      DELETE(PatternQueue)
!      PatternQueue.szValue = SearchOptions.szPattern
!      IF glo:SyncPathWithPattern = TRUE
!         SaveSearchOptions(SearchOptions)
!      END
!      ADD(PatternQueue,1)
!      POST(EVENT:Accepted,?szSearchPath,,1)
   END
END
[END]
WHEN 'AlertKey'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
 CASE KEYCODE()
   OF MouseRight
      MRUContextMenu(PatternQueue,?szPattern,'')
 END
[END]
WHEN 'NewSelection'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
GET(PatternQueue,CHOICE(?szPattern))
IF glo:SyncPathWithPattern = TRUE
   IF LoadSearchOptions(SearchOptions) = NoError
      DISPLAY()
      POST(EVENT:Accepted,?szSearchPath,,1)
      POST(EVENT:Accepted,?szFileMask,,1)
      POST(EVENT:Accepted,?szExcludeMask,,1)
   END
END
[END]
[END]
WHEN '?szSearchPath'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
UPDATE()
IF SearchOptions.szSearchPath <> ''
   !fix up search path by removing trailing '\'
   szSearchPath = ''
   i = 1
   j = INSTRING(';',SearchOptions.szSearchPath,1,i)
   LOOP WHILE j > 0
      IF j > i
         szPath = CLIP(LEFT(SearchOptions.szSearchPath[i : j-1]))
         IF szPath[LEN(szPath)] = '\'
            szPath[LEN(szPath)] = '<0>'
         END
         IF szPath <> ''
            szSearchPath = szSearchPath & szPath & ';'
         END
      END
      i = j + 1
      j = INSTRING(';',SearchOptions.szSearchPath,1,i)
   END
   j = LEN(SearchOptions.szSearchPath)
   szPath = CLIP(LEFT(SearchOptions.szSearchPath[i : j]))
   IF szPath[LEN(szPath)] = '\'
      szPath[LEN(szPath)] = '<0>'
   END
   IF szPath <> ''
      SearchOptions.szSearchPath = szSearchPath & szPath
   ELSE
      SearchOptions.szSearchPath = szSearchPath
   END

   IF ValidateSearchPath(SearchOptions.szSearchPath)
      SELECT(?szSearchPath)
   ELSE
      j = RECORDS(SearchPathQueue)
      LOOP i = 1 TO j
         GET(SearchPathQueue,i)
         IF SearchPathQueue.szValue = SearchOptions.szSearchPath
            BREAK
         END
      END
      IF i > j
         IF j = MAXMRU
            GET(SearchPathQueue,j)
            DELETE(SearchPathQueue)
         END
         SearchPathQueue.szValue = SearchOptions.szSearchPath
         ADD(SearchPathQueue,1)
      ELSE
         DELETE(SearchPathQueue)
         SearchPathQueue.szValue = SearchOptions.szSearchPath
         ADD(SearchPathQueue,1)
      END
   END
END
DO SetSearchPathTip
[END]
WHEN 'AlertKey'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
 CASE KEYCODE()
   OF MouseRight
      MRUContextMenu(SearchPathQueue,?szSearchPath,'')
 END
[END]
[END]
WHEN '?cmdSelectFolder'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
szSelectedFolder = SearchOptions.szSearchPath
IF FILEDIALOG('Select Search Folder',szSelectedFolder,'*.*',FILE:KeepDir+FILE:LongName+FILE:Directory)
   IF szSelectedFolder[LEN(szSelectedFolder)] = '\'
      szSelectedFolder[LEN(szSelectedFolder)] = '<0>'
   END
   SearchOptions.szSearchPath = szSelectedFolder
   DISPLAY(?szSearchPath)
   POST(EVENT:Accepted,?szSearchPath)
END
[END]
[END]
WHEN '?cmdAddFolder'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
szSelectedFolder = SearchOptions.szSearchPath
IF FILEDIALOG('Select Search Folder',szSelectedFolder,'*.*',FILE:KeepDir+FILE:LongName+FILE:Directory)
   IF szSelectedFolder[LEN(szSelectedFolder)] = '\'
      szSelectedFolder[LEN(szSelectedFolder)] = '<0>'
   END
   IF SearchOptions.szSearchPath = ''
      SearchOptions.szSearchPath = szSelectedFolder
   ELSE
      SearchOptions.szSearchPath = SearchOptions.szSearchPath & ';' & szSelectedFolder
   END
   DISPLAY(?szSearchPath)
   POST(EVENT:Accepted,?szSearchPath)
END
[END]
[END]
WHEN '?bSearchSubdirectories'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
IF SearchOptions.bSearchSubdirectories = TRUE
   ENABLE(?nLevels:Prompt,?nLevels)
ELSE
   DISABLE(?nLevels:Prompt,?nLevels)
END
[END]
[END]
WHEN '?szFileMask'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
UPDATE()
IF SearchOptions.szFileMask <> ''
   j = RECORDS(FileMaskQueue)
   LOOP i = 1 TO j
      GET(FileMaskQueue,i)
      IF FileMaskQueue.szValue = SearchOptions.szFileMask
         BREAK
      END
   END
   IF i > j
      IF j = MAXMRU
         GET(FileMaskQueue,j)
         DELETE(FileMaskQueue)
      END
      FileMaskQueue.szValue = SearchOptions.szFileMask
      ADD(FileMaskQueue,1)
   ELSE
      DELETE(FileMaskQueue)
      FileMaskQueue.szValue = SearchOptions.szFileMask
      ADD(FileMaskQueue,1)
   END
END
[END]
WHEN 'AlertKey'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
 CASE KEYCODE()
   OF MouseRight
      MRUContextMenu(FileMaskQueue,?szFileMask,'')
 END
[END]
[END]
WHEN '?bExcludeComments'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
ThisWindow.Reset()
[END]
[END]
WHEN '?bExcludeMatch'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
ThisWindow.Reset()
[END]
[END]
WHEN '?bUseRegularExpressions'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
ThisWindow.Reset()
[END]
[END]
WHEN '?bCaseSensitive'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
ThisWindow.Reset()
[END]
[END]
WHEN '?bMatchPatternStartOfLine'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
ThisWindow.Reset()
[END]
[END]
WHEN '?bMatchPatternEndOfLine'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
ThisWindow.Reset()
[END]
[END]
WHEN '?bExactMatch'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
ThisWindow.Reset()
[END]
[END]
WHEN '?cmdLoadSavedResults'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
glo:NewSearchAction = thisNewSearchAction
ResultCode = Level:User
glo:nDefaultSearchButton = BUTTON:LOAD
POST(EVENT:CloseWindow)
[END]
[END]
WHEN '?cmdRegExHelp'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
oHH.ShowTopic('UsingRegularExpressions.htm')
[END]
[END]
WHEN '?bFileListFromFile'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
IF SearchOptions.bFileListFromFile = TRUE
   HIDE(?szSearchPath:Prompt,?szFileMask)
   UNHIDE(?szFileListFilename:Prompt,?cmdLookupFileListFilename)
ELSE
   HIDE(?szFileListFilename:Prompt,?cmdLookupFileListFilename)
   UNHIDE(?szSearchPath:Prompt,?szFileMask)
END
[END]
[END]
WHEN '?szFileListFilename'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
UPDATE()
IF SearchOptions.szFileListFilename <> ''
   IF NOT EXISTS(SearchOptions.szFileListFilename)
      MESSAGE('Specified File not found!','Validation Error',ICON:Hand)
      SELECT(?szFileListFilename)
   END
END
[END]
[END]
WHEN '?cmdLookupFileListFilename'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
szFileListFilename = SearchOptions.szFileListFilename
IF FILEDIALOG('Select File List Filename',szFileListFilename,'*.*',FILE:KeepDir+FILE:LongName)
   SearchOptions.szFileListFilename = szFileListFilename
   DISPLAY(?szFileListFilename)
   POST(EVENT:Accepted,?szFileListFilename)
END
[END]
[END]
WHEN '?bSearchStringsFromFile'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
 IF SearchOptions.bSearchStringsFromFile = TRUE
    HIDE(?szPattern:Prompt,?szPattern)
    UNHIDE(?szSearchStringFilename:Prompt,?cmdLookupSearchStringFilename)
    SELECT(?szSearchStringFilename)
 ELSE
    HIDE(?szSearchStringFilename:Prompt,?cmdLookupSearchStringFilename)
    UNHIDE(?szPattern:Prompt,?szPattern)
    SELECT(?szPattern)
 END
[END]
[END]
WHEN '?szSearchStringFilename'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
UPDATE()
IF SearchOptions.szSearchStringFilename <> ''
   IF NOT EXISTS(SearchOptions.szSearchStringFilename)
      MESSAGE('Specified File not found!','Validation Error',ICON:Hand)
      SELECT(?szSearchStringFilename)
   END
END
[END]
[END]
WHEN '?cmdLookupSearchStringFilename'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
szSearchStringFilename = SearchOptions.szSearchStringFilename
IF FILEDIALOG('Select Search Text Filename',szSearchStringFilename,'*.*',FILE:KeepDir+FILE:LongName)
   SearchOptions.szSearchStringFilename = szSearchStringFilename
   DISPLAY(?szSearchStringFilename)
   POST(EVENT:Accepted,?szSearchStringFilename)
END
[END]
[END]
WHEN '?cmdSearchNew'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
IF SearchOptions.szPattern = ''
   SELECT(?szPattern)
ELSIF SearchOptions.szSearchPath = ''
   SELECT(?szSearchPath)
ELSIF SearchOptions.szFileMask = ''
   SELECT(?szFileMask)
ELSE
   IF ValidateSearchPath(SearchOptions.szSearchPath)
      SELECT(?szSearchPath)
   ELSE
      IF glo:SyncPathWithPattern = TRUE
         SaveSearchOptions(SearchOptions)
      END
      glo:NewSearchAction = TRUE   !thisNewSearchAction
      ResultCode = Level:Benign
      glo:nDefaultSearchButton = BUTTON:SEARCHNEW
      glo:bSearchNewTabPressed = TRUE
      POST(EVENT:CloseWindow)
   END
END
[END]
[END]
WHEN '?szExcludeMask'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
UPDATE()
IF SearchOptions.szExcludeMask <> ''
   j = RECORDS(ExcludeMaskQueue)
   LOOP i = 1 TO j
      GET(ExcludeMaskQueue,i)
      IF ExcludeMaskQueue.szValue = SearchOptions.szExcludeMask
         BREAK
      END
   END
   IF i > j
      IF j = MAXMRU
         GET(ExcludeMaskQueue,j)
         DELETE(ExcludeMaskQueue)
      END
      ExcludeMaskQueue.szValue = SearchOptions.szExcludeMask
      ADD(ExcludeMaskQueue,1)
   ELSE
      DELETE(ExcludeMaskQueue)
      ExcludeMaskQueue.szValue = SearchOptions.szExcludeMask
      ADD(ExcludeMaskQueue,1)
   END
END
[END]
WHEN 'AlertKey'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
 CASE KEYCODE()
   OF MouseRight
      MRUContextMenu(ExcludeMaskQueue,?szExcludeMask,'')
 END
[END]
[END]
[END]
EMBED %WindowManagerMethodCodeSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7800
PROPERTY:END
IF glo:RestorePointChecked = FALSE
   DIRECTORY(resultQueue,svSpecialFolder.GetDir(SV:CSIDL_APPDATA) & '\Devuna\KSS\RestorePoint\*.*',ff_:DIRECTORY)

   !look for restore points
   LOOP i = RECORDS(resultQueue) TO 1 BY -1
      GET(resultQueue,i)
      CASE resultQueue.name
        OF '.' OROF '..'
           DELETE(resultQueue)
      ELSE
        IF NUMERIC(resultQueue.name)
           dwProcess = resultQueue.name
           szProcessName = '<<unknown>'
           hProcess = kcr_OpenProcess(BOR(PROCESS_QUERY_INFORMATION,PROCESS_VM_READ),FALSE,dwProcess)
           ! Get the process name.
           IF hProcess <> 0
              IF kcr_EnumProcessModules( hProcess, hMod, SIZE(hMod), cbNeeded)
                 kcr_GetModuleBaseName( hProcess, hMod, szProcessName, SIZE(szProcessName))
                 IF UPPER(szProcessName) = 'KSS.EXE'
                    DELETE(resultQueue)
                 END
              END
              kcr_CloseHandle(hProcess)
           ELSE
           END
        ELSE
           DELETE(resultQueue)
        END
     END
   END

   IF RECORDS(resultQueue) > 0
      CASE MESSAGE('Would you like to recover a System Restore Point?','System Restore Point Detected',ICON:Hand,BUTTON:YES+BUTTON:NO,BUTTON:YES)
        OF BUTTON:YES
           RestoreSession = TRUE
        OF BUTTON:NO
           RestoreSession = FALSE
      END
   END

   !delete restore points
   LOOP i = 1 TO RECORDS(resultQueue)
        GET(resultQueue,i)
        IF RestoreSession = TRUE
           glo:RestorePointFolder = svSpecialFolder.GetDir(SV:CSIDL_APPDATA) & '\Devuna\KSS\RestorePoint\' & CLIP(resultQueue.name)
           RestoreSession = FALSE
           SessionRestored = TRUE
        ELSE
           szDirPath = svSpecialFolder.GetDir(SV:CSIDL_APPDATA) & '\Devuna\KSS\RestorePoint\' & CLIP(resultQueue.name)
           SilentlyRemoveDirectory(szDirPath)
        END
   END
   glo:RestorePointChecked = TRUE
END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8005
PROPERTY:END
CASE glo:nDefaultSearchButton
  OF BUTTON:LOAD
     ?cmdLoadSavedResults{PROP:Default} = TRUE
  OF BUTTON:SEARCH
     ?cmdSearch{PROP:Default} = TRUE
  OF BUTTON:SEARCHNEW
     ?cmdSearchNew{PROP:Default} = TRUE
ELSE
     ?cmdSearch{PROP:Default} = TRUE
END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8080
PROPERTY:END
Window{PROP:MinHeight} = Window{PROP:Height}            ! Restrict the minimum window height
Window{PROP:MaxHeight} = Window{PROP:Height}            ! Restrict the maximum window height
Window{PROP:MinWidth}  = Window{PROP:Width}             ! Restrict the minimum window width
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8400
PROPERTY:END
CorrectForOffscreen(Window)

INIMgr.FetchQueue('Pattern Queue','Pattern',PatternQueue,PatternQueue.szValue)

j = RECORDS(PatternQueue)
LOOP i = 1 TO j
   GET(PatternQueue,i)
   ReplaceChr(PatternQueue.szValue,'§','''')
   PUT(PatternQueue)
END

INIMgr.FetchQueue('SearchPath Queue','SearchPath',SearchPathQueue,SearchPathQueue.szValue)
INIMgr.FetchQueue('FileMask Queue','FileMask',FileMaskQueue,FileMaskQueue.szValue)
INIMgr.FetchQueue('ExcludeMask Queue','ExcludeMask',ExcludeMaskQueue,ExcludeMaskQueue.szValue)
thisNewSearchAction = glo:NewSearchAction
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9500
PROPERTY:END
IF SearchOPtions.bSearchStringsFromFile = TRUE
   HIDE(?szPattern:Prompt,?szPattern)
   UNHIDE(?szSearchStringFilename:Prompt,?cmdLookupSearchStringFilename)
ELSE
   HIDE(?szSearchStringFilename:Prompt,?cmdLookupSearchStringFilename)
   UNHIDE(?szPattern:Prompt,?szPattern)
END

IF SearchOptions.bSearchSubdirectories = FALSE
   DISABLE(?nLevels)
END

IF SearchOptions.bFileListFromFile = TRUE
   HIDE(?szSearchPath:Prompt,?szFileMask)
   UNHIDE(?szFileListFilename:Prompt,?cmdLookupFileListFilename)
END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9700
PROPERTY:END
DO SetSearchPathTip
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9950
PROPERTY:END
IF SessionRestored = TRUE
   ResultCode = Level:Program
   SELF.Response = RequestCompleted
   ReturnValue = Level:User
END
[END]
[END]
WHEN 'Kill'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7300
PROPERTY:END
!FindStrOptionsGroup = SearchOptions
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
!INIMgr.Update('Search Options','szPattern',SearchOptions.szPattern)

j = RECORDS(PatternQueue)
LOOP i = 1 TO j
    GET(PatternQueue,i)
    ReplaceChr(PatternQueue.szValue,'''','§')
!      n = LEN(PatternQueue.szValue)
!      LOOP p = 1 TO n
!        IF PatternQueue.szValue[p] = ''''
!           PatternQueue.szValue[p] = CHR(VAL('''') + 128)
!        END
!      END
    PUT(PatternQueue)
END

INIMgr.UpdateQueue('Pattern Queue','Pattern',PatternQueue,PatternQueue.szValue)
INIMgr.UpdateQueue('SearchPath Queue','SearchPath',SearchPathQueue,SearchPathQueue.szValue)
INIMgr.UpdateQueue('FileMask Queue','Filemask',FileMaskQueue,FileMaskQueue.szValue)
INIMgr.UpdateQueue('ExcludeMask Queue','ExcludeMask',ExcludeMaskQueue,ExcludeMaskQueue.szValue)
[END]
[END]
WHEN 'Reset'
[INSTANCES]
WHEN '(BYTE Force=0)'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5001
PROPERTY:END
IF SearchOptions.bExcludeComments
   SearchOptions.bExcludeMatch = FALSE
   DISABLE(?bExcludeMatch)
   DISPLAY(?bExcludeMatch)
ELSE
   ENABLE(?bExcludeMatch)
END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5001
PROPERTY:END
IF SearchOptions.bExcludeMatch
   SearchOptions.bExcludeComments = FALSE
   DISABLE(?bExcludeComments)
   DISPLAY(?bExcludeComments)
ELSE
   ENABLE(?bExcludeComments)
END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5001
PROPERTY:END
IF SearchOptions.bUseRegularExpressions = TRUE
   ENABLE(?cmdRegExHelp)
   SearchOptions.bMatchPatternStartOfLine = FALSE
   DISABLE(?bMatchPatternStartOfLine)
   DISPLAY(?bMatchPatternStartOfLine)
   SearchOptions.bMatchPatternEndOfLine = FALSE
   DISABLE(?bMatchPatternEndOfLine)
   DISPLAY(?bMatchPatternEndOfLine)
   SearchOptions.bExactMatch = FALSE
   DISABLE(?bExactMatch)
   DISPLAY(?bExactMatch)
ELSE
   DISABLE(?cmdRegExHelp)
   ENABLE(?bMatchPatternStartOfLine)
   ENABLE(?bMatchPatternEndOfLine)
   ENABLE(?bExactMatch)
   !IF SearchOptions.bCaseSensitive           = TRUE |
   IF SearchOptions.bMatchPatternStartOfLine = TRUE |
   OR SearchOptions.bMatchPatternEndOfLine   = TRUE |
   OR SearchOptions.bExactMatch              = TRUE
      DISABLE(?bUseRegularExpressions)
   ELSE
      ENABLE(?bUseRegularExpressions)
   END
END
[END]
[END]
[END]
EMBED %WindowManagerMethodDataSection
[INSTANCES]
WHEN 'TakeAccepted'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
szSelectedFolder     CSTRING(MAX_PATH)
szPath               CSTRING(MAX_PATH)
i                    LONG
j                    LONG
[END]
[END]
WHEN 'Kill'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
i                    LONG,AUTO
j                    LONG,AUTO
n                    LONG,AUTO
p                    LONG,AUTO
tempValue            LIKE(PatternQueue.szValue)
quoteChar            CSTRING('''')
[END]
[END]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
i                    LONG,AUTO
j                    LONG,AUTO
n                    LONG,AUTO
p                    LONG,AUTO
resultQueue          QUEUE(ff_:queue),PRE(RQ)
                     END
szDirPath            CSTRING(261)


dwProcess            DWORD
cbNeeded             DWORD
cProcesses           DWORD
lCopyCount           LONG
szProcessName        CSTRING(MAX_PATH)
hProcess             HANDLE
hMod                 HMODULE
thisProcessId        DWORD
hwnd                 HWND
dwPID                DWORD
szWindowCaption      CSTRING('Kwik Source Search')
RestoreSession       BOOL(FALSE)
SessionRestored      BOOL(FALSE)
[END]
[END]
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3000
PROPERTY:END
thisNewSearchAction     LIKE(glo:NewSearchAction)
szSearchPath            CSTRING(1025)
szFileListFilename      CSTRING(260)
szSearchStringFilename  CSTRING(260)

BUTTON:LOAD             EQUATE(1)
BUTTON:SEARCH           EQUATE(2)
BUTTON:SEARCHNEW        EQUATE(3)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3580
PROPERTY:END
!bFilenamesOnly       BOOL
[END]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
SetSearchPathTip  ROUTINE
   DATA
tipText     CSTRING(1024)
i           LONG
j           LONG

   CODE
      tipText = ''
      i = 1
      j = INSTRING(';',SearchOptions.szSearchPath,1,i)
      LOOP WHILE j
         tipText = tipText & SearchOptions.szSearchPath[i : j-1] & '<13,10>'
         IF j < LEN(SearchOptions.szSearchPath)
            i = j+1
            j = INSTRING(';',SearchOptions.szSearchPath,1,i)
         ELSE
            i = LEN(SearchOptions.szSearchPath)
            BREAK
         END
      END
      IF i < LEN(SearchOptions.szSearchPath)
         tipText = tipText & SearchOptions.szSearchPath[i : LEN(SearchOptions.szSearchPath)]
      END
     ?szSearchPath{PROP:Tip} = tipText
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME ABC WindowResize
[FIELDPROMPT]
%ResizeAnchorTop DEPEND %Control LONG TIMES 0

%ResizeAnchorLeft DEPEND %Control LONG TIMES 0

%ResizeAnchorRight DEPEND %Control LONG TIMES 0

%ResizeAnchorBottom DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowTop DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowLeft DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowRight DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowBottom DEPEND %Control LONG TIMES 0

[INSTANCE]
INSTANCE 2
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('WindowResizeClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(BYTE AppStrategy=AppStrategy:Resize,BYTE SetWindowMinSize=False,BYTE SetWindowMaxSize=False)')

%AppStrategy DEFAULT  ('Spread')
%RestrictMinSize LONG  (0)
%WindowMinWidth DEFAULT  ('')
%WindowMinHeight DEFAULT  ('0')
%RestrictMaxSize LONG  (0)
%WindowMaxWidth DEFAULT  ('')
%WindowMaxHeight DEFAULT  ('')
%AutoFindParents DEFAULT  ('Default')
%DeferMoves DEFAULT  ('Default')
%OverrideControls MULTI LONG  (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, |
  16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 32, 33, 29, 30, 31, 34)
%OverrideControl DEPEND %OverrideControls DEFAULT TIMES 34
WHEN  (1) ('?szSearchStringFilename:Prompt')
WHEN  (2) ('?szSearchStringFilename')
WHEN  (3) ('?cmdLookupSearchStringFilename')
WHEN  (4) ('?szPattern:Prompt')
WHEN  (5) ('?szPattern')
WHEN  (6) ('?bSearchStringsFromFile')
WHEN  (7) ('?bCaseSensitive')
WHEN  (8) ('?bExcludeComments')
WHEN  (9) ('?bMatchPatternStartOfLine')
WHEN  (10) ('?bMatchPatternEndOfLine')
WHEN  (11) ('?bExactMatch')
WHEN  (12) ('?bExcludeMatch')
WHEN  (13) ('?bUseRegularExpressions')
WHEN  (14) ('?cmdRegExHelp')
WHEN  (15) ('?bFilenamesOnly')
WHEN  (16) ('?bFileListFromFile')
WHEN  (17) ('?szFileListFilename:Prompt')
WHEN  (18) ('?szFileListFilename')
WHEN  (19) ('?cmdLookupFileListFilename')
WHEN  (20) ('?szSearchPath:Prompt')
WHEN  (21) ('?szSearchPath')
WHEN  (22) ('?cmdSelectFolder')
WHEN  (23) ('?cmdAddFolder')
WHEN  (24) ('?bSearchSubdirectories')
WHEN  (25) ('?nLevels:Prompt')
WHEN  (26) ('?nLevels')
WHEN  (27) ('?szFileMask:Prompt')
WHEN  (28) ('?szFileMask')
WHEN  (29) ('?cmdLoadSavedResults')
WHEN  (30) ('?cmdSearch')
WHEN  (31) ('?cmdSearchNew')
WHEN  (32) ('?szExcludeMask:Prompt')
WHEN  (33) ('?szExcludeMask')
WHEN  (34) ('?bIncludeBinary')

%DisableResize DEPEND %OverrideControls LONG TIMES 34
WHEN  (1) (0)
WHEN  (2) (0)
WHEN  (3) (0)
WHEN  (4) (0)
WHEN  (5) (0)
WHEN  (6) (0)
WHEN  (7) (0)
WHEN  (8) (0)
WHEN  (9) (0)
WHEN  (10) (0)
WHEN  (11) (0)
WHEN  (12) (0)
WHEN  (13) (0)
WHEN  (14) (0)
WHEN  (15) (0)
WHEN  (16) (0)
WHEN  (17) (0)
WHEN  (18) (0)
WHEN  (19) (0)
WHEN  (20) (0)
WHEN  (21) (0)
WHEN  (22) (0)
WHEN  (23) (0)
WHEN  (24) (0)
WHEN  (25) (0)
WHEN  (26) (0)
WHEN  (27) (0)
WHEN  (28) (0)
WHEN  (29) (0)
WHEN  (30) (0)
WHEN  (31) (0)
WHEN  (32) (0)
WHEN  (33) (0)
WHEN  (34) (0)

%HorizResize DEPEND %OverrideControls DEFAULT TIMES 34
WHEN  (1) ('Lock Width')
WHEN  (2) ('Constant Right Border')
WHEN  (3) ('Lock Width')
WHEN  (4) ('Lock Width')
WHEN  (5) ('Constant Right Border')
WHEN  (6) ('Lock Width')
WHEN  (7) ('Lock Width')
WHEN  (8) ('Lock Width')
WHEN  (9) ('Lock Width')
WHEN  (10) ('Lock Width')
WHEN  (11) ('Lock Width')
WHEN  (12) ('Lock Width')
WHEN  (13) ('Lock Width')
WHEN  (14) ('Lock Width')
WHEN  (15) ('Lock Width')
WHEN  (16) ('Lock Width')
WHEN  (17) ('Lock Width')
WHEN  (18) ('Constant Right Border')
WHEN  (19) ('Lock Width')
WHEN  (20) ('Lock Width')
WHEN  (21) ('Constant Right Border')
WHEN  (22) ('Lock Width')
WHEN  (23) ('Lock Width')
WHEN  (24) ('Lock Width')
WHEN  (25) ('Lock Width')
WHEN  (26) ('Lock Width')
WHEN  (27) ('Lock Width')
WHEN  (28) ('Constant Right Border')
WHEN  (29) ('Lock Width')
WHEN  (30) ('Lock Width')
WHEN  (31) ('Lock Width')
WHEN  (32) ('Lock Width')
WHEN  (33) ('Constant Right Border')
WHEN  (34) ('Lock Width')

%VertResize DEPEND %OverrideControls DEFAULT TIMES 34
WHEN  (1) ('Lock Height')
WHEN  (2) ('Lock Height')
WHEN  (3) ('Lock Height')
WHEN  (4) ('Lock Height')
WHEN  (5) ('Lock Height')
WHEN  (6) ('Lock Height')
WHEN  (7) ('Lock Height')
WHEN  (8) ('Lock Height')
WHEN  (9) ('Lock Height')
WHEN  (10) ('Lock Height')
WHEN  (11) ('Lock Height')
WHEN  (12) ('Lock Height')
WHEN  (13) ('Lock Height')
WHEN  (14) ('Lock Height')
WHEN  (15) ('Lock Height')
WHEN  (16) ('Lock Height')
WHEN  (17) ('Lock Height')
WHEN  (18) ('Lock Height')
WHEN  (19) ('Lock Height')
WHEN  (20) ('Lock Height')
WHEN  (21) ('Lock Height')
WHEN  (22) ('Lock Height')
WHEN  (23) ('Lock Height')
WHEN  (24) ('Lock Height')
WHEN  (25) ('Lock Height')
WHEN  (26) ('Lock Height')
WHEN  (27) ('Lock Height')
WHEN  (28) ('Lock Height')
WHEN  (29) ('Lock Height')
WHEN  (30) ('Lock Height')
WHEN  (31) ('Lock Height')
WHEN  (32) ('Lock Height')
WHEN  (33) ('Lock Height')
WHEN  (34) ('Lock Height')

%HorizPositional DEPEND %OverrideControls DEFAULT TIMES 34
WHEN  (1) ('Fix Left')
WHEN  (2) ('Fix Left')
WHEN  (3) ('Fix Right')
WHEN  (4) ('Fix Left')
WHEN  (5) ('Fix Left')
WHEN  (6) ('Fix Left')
WHEN  (7) ('Fix Left')
WHEN  (8) ('Fix Left')
WHEN  (9) ('Fix Left')
WHEN  (10) ('Fix Left')
WHEN  (11) ('Fix Left')
WHEN  (12) ('Fix Left')
WHEN  (13) ('Fix Left')
WHEN  (14) ('Fix Left')
WHEN  (15) ('Fix Left')
WHEN  (16) ('Fix Left')
WHEN  (17) ('Fix Left')
WHEN  (18) ('Fix Left')
WHEN  (19) ('Fix Right')
WHEN  (20) ('Fix Left')
WHEN  (21) ('Fix Left')
WHEN  (22) ('Fix Right')
WHEN  (23) ('Fix Right')
WHEN  (24) ('Fix Left')
WHEN  (25) ('Fix Left')
WHEN  (26) ('Fix Left')
WHEN  (27) ('Fix Left')
WHEN  (28) ('Fix Left')
WHEN  (29) ('Fix Left')
WHEN  (30) ('Fix Center')
WHEN  (31) ('Fix Right')
WHEN  (32) ('Fix Left')
WHEN  (33) ('Fix Left')
WHEN  (34) ('Fix Left')

%VertPositional DEPEND %OverrideControls DEFAULT TIMES 34
WHEN  (1) ('Fix Top')
WHEN  (2) ('Fix Top')
WHEN  (3) ('Fix Top')
WHEN  (4) ('Fix Top')
WHEN  (5) ('Fix Top')
WHEN  (6) ('Fix Top')
WHEN  (7) ('Fix Top')
WHEN  (8) ('Fix Top')
WHEN  (9) ('Fix Top')
WHEN  (10) ('Fix Top')
WHEN  (11) ('Fix Top')
WHEN  (12) ('Fix Top')
WHEN  (13) ('Fix Top')
WHEN  (14) ('Fix Top')
WHEN  (15) ('Fix Top')
WHEN  (16) ('Fix Top')
WHEN  (17) ('Fix Top')
WHEN  (18) ('Fix Top')
WHEN  (19) ('Fix Top')
WHEN  (20) ('Fix Top')
WHEN  (21) ('Fix Top')
WHEN  (22) ('Fix Top')
WHEN  (23) ('Fix Top')
WHEN  (24) ('Fix Top')
WHEN  (25) ('Fix Top')
WHEN  (26) ('Fix Top')
WHEN  (27) ('Fix Top')
WHEN  (28) ('Fix Top')
WHEN  (29) ('Fix Bottom')
WHEN  (30) ('Fix Bottom')
WHEN  (31) ('Fix Bottom')
WHEN  (32) ('Fix Bottom')
WHEN  (33) ('Fix Top')
WHEN  (34) ('Fix Top')

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('Resizer')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('ADOBlob')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

[CALLS]
CorrectForOffScreen
DoubleQuote
LoadSearchOptions
MRUContextMenu
ReplaceChr
SaveSearchOptions
SilentlyRemoveDirectory
ValidateSearchPath
[WINDOW]
Window  WINDOW('Search for...'),AT(,,320,180),FONT('Segoe UI',10),RESIZE,GRAY,HLP('SearchFor.htm'), |
          SYSTEM
          PROMPT('&File'),AT(5,5),USE(?szSearchStringFilename:Prompt),HIDE,TRN,#ORDINAL(1)
          ENTRY(@S255),AT(35,5,262,10),USE(SearchOptions.szSearchStringFilename,,?szSearchStringFilename), |
            HIDE,#ORDINAL(2)
          BUTTON('...'),AT(301,5,14,10),USE(?cmdLookupSearchStringFilename),HIDE,TIP('Lookup Sea' & |
            'rch String Filename'),#ORDINAL(3)
          PROMPT('Fi&nd'),AT(5,5),USE(?szPattern:Prompt),TRN,#ORDINAL(4)
          COMBO(@s255),AT(35,5,262,10),USE(SearchOptions.szPattern,,?szPattern),VSCROLL,ALRT(MouseRight), |
            COLOR(COLOR:White),DROP(10),FORMAT('80L(2)|MS(1024)@s255@'),FROM(PatternQueue), |
            TIP('Specified text to be searched for.'),#ORDINAL(5)
          CHECK(' &Get Find Text from Specified File'),AT(35,17),USE(SearchOptions.bSearchStringsFromFile, |
            ,?bSearchStringsFromFile),TIP('Get search strings from the specified file'),#ORDINAL(6)
          CHECK(' &Case Sensitive'),AT(35,35),USE(SearchOptions.bCaseSensitive,,?bCaseSensitive), |
            TIP('Specifies that the search is to be case-sensitive.'),TRN,#ORDINAL(7)
          CHECK(' Exclude Commen&t Lines'),AT(170,35),USE(SearchOptions.bExcludeComments,, |
            ?bExcludeComments),TIP('Prints only lines that do not contain a match insid' & |
            'e a comment.'),TRN,#ORDINAL(8)
          CHECK(' Matc&h Pattern at Start of Line'),AT(35,45),USE(SearchOptions.bMatchPatternStartOfLine, |
            ,?bMatchPatternStartOfLine),TIP('Matches the pattern if at the beginning of a line.'), |
            TRN,#ORDINAL(9)
          CHECK(' Match Pattern at &End of Line'),AT(170,45),USE(SearchOptions.bMatchPatternEndOfLine, |
            ,?bMatchPatternEndOfLine),TIP('Matches the pattern if at the end of a line.'), |
            TRN,#ORDINAL(10)
          CHECK(' Exact &Match'),AT(35,55),USE(SearchOptions.bExactMatch,,?bExactMatch),TIP('Finds line' & |
            's that match exactly.'),TRN,#ORDINAL(11)
          CHECK(' E&xclude Matching Lines'),AT(170,55),USE(SearchOptions.bExcludeMatch,,?bExcludeMatch), |
            TIP('Prints only lines that do not contain a match.'),TRN,#ORDINAL(12)
          CHECK(' Use &Regular Expressions'),AT(35,65),USE(SearchOptions.bUseRegularExpressions, |
            ,?bUseRegularExpressions),TIP('Uses Find strings as regular expressions.'),TRN, |
            #ORDINAL(13)
          BUTTON,AT(143,65,12,10),USE(?cmdRegExHelp),ICON('help.ico'),FLAT,#ORDINAL(14)
          CHECK(' Filenames &Only'),AT(170,65),USE(SearchOptions.bFilenamesOnly,,?bFilenamesOnly), |
            TIP('Prints only the names of files that do contain a match.'),TRN,#ORDINAL(15)
          CHECK(' &Include files with non-printable characters'),AT(35,75),USE(SearchOptions.bIncludeBinary, |
            ,?bIncludeBinary),TIP('Includes files with non-printable characters.'),TRN,#ORDINAL(16)
          CHECK(' Re&ad File List from Specified File'),AT(35,90),USE(SearchOptions.bFileListFromFile, |
            ,?bFileListFromFile),TIP('Get the list of files to search from the specified file'), |
            TRN,#ORDINAL(17)
          PROMPT('F&ile'),AT(5,102),USE(?szFileListFilename:Prompt),HIDE,TRN,#ORDINAL(18)
          ENTRY(@S255),AT(35,102,262,10),USE(SearchOptions.szFileListFilename,,?szFileListFilename), |
            HIDE,#ORDINAL(19)
          BUTTON('...'),AT(301,102,14,10),USE(?cmdLookupFileListFilename),HIDE,TIP('Lookup Fil' & |
            'e List Filename'),#ORDINAL(20)
          PROMPT('&Paths'),AT(5,102),USE(?szSearchPath:Prompt),TRN,#ORDINAL(21)
          COMBO(@S255),AT(35,102,245,10),USE(SearchOptions.szSearchPath,,?szSearchPath),VSCROLL, |
            ALRT(MouseRight),COLOR(COLOR:White),DROP(10),FORMAT('80L(2)|MS(1024)@s255@'),FROM(SearchPathQueue), |
            MSG('Search Path'),TIP('Search Path Starting Folder'),#ORDINAL(22)
          BUTTON('...'),AT(284,102,14,10),USE(?cmdSelectFolder),TIP('Select New Search Path'), |
            #ORDINAL(23)
          BUTTON('+'),AT(301,102,14,10),USE(?cmdAddFolder),TIP('Append to Existing Search Path'), |
            #ORDINAL(24)
          CHECK(' Search S&ubdirectories'),AT(35,117),USE(SearchOptions.bSearchSubdirectories, |
            ,?bSearchSubdirectories),TIP('Searches for matching files in the current di' & |
            'rectory and all subdirectories.'),TRN,#ORDINAL(25)
          PROMPT('Le&vels:'),AT(139,117),USE(?nLevels:Prompt),TRN,#ORDINAL(26)
          SPIN(@n3b),AT(165,117,25,10),USE(SearchOptions.nLevels,,?nLevels),RIGHT,COLOR(COLOR:White), |
            MSG('Subdirectory Levels to Search'),RANGE(0,255),TIP('Specify the number o' & |
            'f subdirectory levels to search.  If this value is blank then all subdirec' & |
            'tories will be searched.'),#ORDINAL(27)
          PROMPT('&Files'),AT(5,132),USE(?szFileMask:Prompt),TRN,#ORDINAL(28)
          COMBO(@s255),AT(35,132,280,10),USE(SearchOptions.szFileMask,,?szFileMask),VSCROLL, |
            ALRT(MouseRight),COLOR(COLOR:White),DROP(10),FORMAT('80L(2)|MS(1024)@s255@'),FROM(FileMaskQueue), |
            TIP('Specifies a file or files to search.<0DH,0AH>The elements in the strin' & |
            'g may be delimited by vertical bars (|) ,  semicolons (;), or spaces.'),#ORDINAL(29)
          PROMPT('E&xclude'),AT(5,147),USE(?szExcludeMask:Prompt),TRN,#ORDINAL(30)
          COMBO(@s255),AT(35,147,280,10),USE(SearchOptions.szExcludeMask,,?szExcludeMask), |
            VSCROLL,ALRT(MouseRight),COLOR(COLOR:White),DROP(10),FORMAT('80L(2)|MS(1024)@s255@'), |
            FROM(ExcludeMaskQueue),TIP('Specifies a file or files to be excluded from t' & |
            'he search.<0DH,0AH>The elements in the string may be delimited by vertical' & |
            ' bars (|) ,  semicolons (;), or spaces.'),#ORDINAL(31)
          BUTTON('&Load Saved Results'),AT(35,162,70,14),USE(?cmdLoadSavedResults),#ORDINAL(32)
          BUTTON('&Search'),AT(140,162,70,14),USE(?cmdSearch),DEFAULT,#ORDINAL(33)
          BUTTON('Search Ne&w Tab'),AT(245,162,70,14),USE(?cmdSearchNew),#ORDINAL(34)
        END

[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2011/12/02' '13:30:45'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME ValidateSearchPath
PROTOTYPE '(*CSTRING szSearchPath),BOOL'
PARAMETERS '(*CSTRING szSearchPath)'
[COMMON]
FROM ABC Source
MODIFIED '2011/12/02' '15:14:55'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
pStart              LONG
pDelimiter          LONG
szPath              CSTRING(MAXPATH)
errFlag             BOOL
errMsg              CSTRING(MAXPATH)
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  errFlag = FALSE
  pStart = 1
  pDelimiter = INSTRING(';',szSearchPath,1,pStart)
  LOOP WHILE pDelimiter > 0
     szPath = szSearchPath[pStart : pDelimiter-1] & '\'
     IF NOT EXISTS(szPath)
        errMsg = szPath & '|'
        errFlag = TRUE
        BREAK
     ELSE
        pStart = pDelimiter+1
        pDelimiter = INSTRING(';',szSearchPath,1,pStart)
     END
  END
  IF NOT errFlag
     pDelimiter = LEN(szSearchPath)
     szPath = szSearchPath[pStart : pDelimiter] & '\'
     IF NOT EXISTS(szPath)
        errMsg = szPath & '|'
        errFlag = TRUE
     END
  END
  IF errFlag = TRUE
     errMsg[LEN(errMsg)] = '<0>'
     MESSAGE('Folder in search path not found!|' & errMsg,'Validation Error',ICON:Hand)
  END
  RETURN errFlag
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2011/12/05' '12:47:52'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME SelectSendToCommand
PROTOTYPE '(),BOOL'
PARAMETERS '()'
[COMMON]
FROM ABC Window
MODIFIED '2013/06/02' '13:00:32'
[DATA]
[SCREENCONTROLS]
! PROMPT('Return Code:'),USE(?ReturnCode:Prompt)
! ENTRY(@n3),USE(ReturnCode)
[REPORTCONTROLS]
! STRING(@n3),USE(ReturnCode)
ReturnCode               BYTE
!!> GUID('b804a038-9d54-41f1-b5e2-994373a2d4ce'),INITIAL('Level:Cancel'),PROMPT('Return Code:'),HEADER('Return Code'),PICTURE(@n3),TYPEMODE(INS)
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default', 'WindowToolbar')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('WindowManager')
WHEN  ('WindowToolbar') ('ToolbarClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(),BYTE,PROC,DERIVED', 'Kill {19}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeAccepted {11}PROCEDURE(),BYTE,PROC,DERIVED', 'TakeFieldEvent {9}PROCEDURE(),BYTE,PROC,DERIVED')

%ReturnValue FIELD  (ReturnCode)
%WindowOperationMode DEFAULT  ('Use WINDOW setting')
%INISaveWindow LONG  (1)
%ProcedureDisableEnhanceFocus LONG  (0)
%ProcedureUseEnterInsteadTabOverride LONG  (0)
%WindowUseEnterInsteadTab LONG  (1)
%ProcedureUseEnterInsteadTabExcludeListCombo LONG  (0)
%ProcedureUseEnterInsteadTabEnableNextTabStop LONG  (0)
%ProcedureUseEnterInsteadTabExcludeG LONG  (1)
%WindowUseEnterInsteadTabExclude MULTI DEFAULT  ()
%GlobalObject DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('NO')
WHEN  ('WindowToolbar') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ThisWindow')
WHEN  ('WindowToolbar') ('Toolbar')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (0)
WHEN  ('WindowToolbar') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%WindowStyles MULTI LONG  ()
%WindowStyleFontName DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontSize DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontStyle DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontColor DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontCharSet DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStylePicture DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleOtherListboxes MULTI DEFAULT  ()
%ProcedureAutoBindFields MULTI LONG  ()
%ProcedureAutoBindField DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindFieldTPL DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindProcedures MULTI LONG  ()
%ProcedureAutoBindProcedure DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindProcedureTPL DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindFieldsIgnored MULTI LONG  ()
%ProcedureAutoBindFieldIgnored DEPEND %ProcedureAutoBindFieldsIgnored DEFAULT TIMES 0

%ProcedureAutoBindProceduresIgnored MULTI LONG  ()
%ProcedureAutoBindProcedureIgnored DEPEND %ProcedureAutoBindProceduresIgnored DEFAULT TIMES 0

%ProcedureAutoBindValidToAddField LONG  (0)
%ProcedureUserBindFields MULTI LONG  ()
%ProcedureUserBindField DEPEND %ProcedureUserBindFields FIELD TIMES 0

%ProcedureAutoBindFieldIgnore DEPEND %ProcedureAutoBindFields LONG TIMES 0

%ProcedureUserBindProcedures MULTI LONG  ()
%ProcedureUserBindProcedure DEPEND %ProcedureUserBindProcedures PROCEDURE TIMES 0

%ProcedureAutoBindProcedureIgnore DEPEND %ProcedureAutoBindProcedures LONG TIMES 0

%ProcedureUserBindExpressions MULTI LONG  ()
%ProcedureUserBindExpressionName DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ProcedureUserBindExpression DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ExtUITabIcon DEPEND %Control DEFAULT TIMES 0

%ExtUITabStyleOverrideGlobal DEPEND %Control LONG TIMES 0

%ExtUITabStyle DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('Default')
WHEN  ('?cmdCancel') ('Default')

%ButtonAction DEPEND %Control DEFAULT TIMES 3
WHEN  ('') ('No Special Action')
WHEN  ('?cmdCancel') ('No Special Action')
WHEN  ('?cmdSelect') ('No Special Action')

%ButtonRunName DEPEND %Control DEFAULT TIMES 0

%ButtonRunParameters DEPEND %Control DEFAULT TIMES 0

%ButtonProcedure DEPEND %Control PROCEDURE TIMES 0

%ButtonThread DEPEND %Control LONG TIMES 0

%ButtonThreadStack DEPEND %Control DEFAULT TIMES 3
WHEN  ('') ('25000')
WHEN  ('?cmdCancel') ('25000')
WHEN  ('?cmdSelect') ('25000')

%ButtonParameters DEPEND %Control DEFAULT TIMES 0

%ButtonReturnValueAssignment DEPEND %Control FIELD TIMES 0

%ButtonReturnValueReferenceAssign DEPEND %Control LONG TIMES 0

%ButtonRequest DEPEND %Control DEFAULT TIMES 3
WHEN  ('') ('None')
WHEN  ('?cmdCancel') ('None')
WHEN  ('?cmdSelect') ('None')

%ButtonThreadParameters DEPEND %Control DEFAULT TIMES 0

%ButtonThreadReturnValueAssignment DEPEND %Control FIELD TIMES 0

%PreLookupKey DEPEND %Control KEY TIMES 0

%PreLookupField DEPEND %Control COMPONENT TIMES 0

%PreLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PreLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupKey DEPEND %Control KEY TIMES 0

%PostLookupField DEPEND %Control COMPONENT TIMES 0

%PostLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupDuringValidate DEPEND %Control LONG TIMES 2
WHEN  ('') (1)
WHEN  ('?cmdCancel') (1)

%LookupAssign DEPEND %Control MULTI LONG TIMES 0

%MoreTarget DEPEND %LookupAssign FIELD TIMES 0

%MoreField DEPEND %LookupAssign DEFAULT TIMES 0

%ForceWindowRefresh DEPEND %Control LONG TIMES 0

%CheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%CheckedAssignVariable DEPEND %CheckedAssigns FIELD TIMES 0

%CheckedAssignValue DEPEND %CheckedAssigns DEFAULT TIMES 0

%CheckedHides DEPEND %Control MULTI LONG TIMES 0

%CheckedControl DEPEND %CheckedHides DEFAULT TIMES 0

%CheckedControlAction DEPEND %CheckedHides DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?cmdCancel')TIMES 0

%CheckedEnables DEPEND %Control MULTI LONG TIMES 0

%CheckedControl1 DEPEND %CheckedEnables DEFAULT TIMES 0

%CheckedControl1Action DEPEND %CheckedEnables DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?cmdCancel')TIMES 0

%UncheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%UncheckedAssignVariable DEPEND %UncheckedAssigns FIELD TIMES 0

%UncheckedAssignValue DEPEND %UncheckedAssigns DEFAULT TIMES 0

%UnCheckedHides DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl DEPEND %UnCheckedHides DEFAULT TIMES 0

%UnCheckedControlAction DEPEND %UnCheckedHides DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?cmdCancel')TIMES 0

%UnCheckedEnables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl1 DEPEND %UnCheckedEnables DEFAULT TIMES 0

%UnCheckedControl1Action DEPEND %UnCheckedEnables DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?cmdCancel')TIMES 0

%CheckedDisables DEPEND %Control MULTI LONG TIMES 0

%CheckedDisableControl DEPEND %CheckedDisables DEFAULT TIMES 0

%CheckedDisableControlAction DEPEND %CheckedDisables DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?cmdCancel')TIMES 0

%UnCheckedDisables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedDisableControl DEPEND %UnCheckedDisables DEFAULT TIMES 0

%UnCheckedDisableControlAction DEPEND %UnCheckedDisables DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?cmdCancel')TIMES 0

%ProcedureOneInstance LONG  (0)
%FieldGradientColorType DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('Off')

%FieldGradientColorTypeVariable DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('')

%FieldGradientColorTypeIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%FieldGradientColorFrom DEPEND %Control LONG TIMES 1
WHEN  ('') (-1)

%FieldGradientColorFromVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorFromIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%FieldGradientColorTo DEPEND %Control LONG TIMES 1
WHEN  ('') (-1)

%FieldGradientColorToVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorToIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%PreserveVarsLoc MULTI LONG  ()
%PreserveVarLoc DEPEND %PreserveVarsLoc DEFAULT TIMES 0

%ActiveImageEnable DEPEND %Control LONG TIMES 0

%AIObjectName DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('AIBtn0')

%AIEnableMimicControl DEPEND %Control LONG TIMES 1
WHEN  ('') (1)

%AIMimicControl DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('?EditorList')

%AIImgRound DEPEND %Control LONG TIMES 0

%AIOverrideImg DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgVariable DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIDisableImg DEPEND %Control DEFAULT TIMES 0

%AIDisableImgVariable DEPEND %Control DEFAULT TIMES 0

%AIDisableImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIHotImg DEPEND %Control DEFAULT TIMES 0

%AIHotImgVariable DEPEND %Control DEFAULT TIMES 0

%AIHotImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIPressedImg DEPEND %Control DEFAULT TIMES 0

%AIPressedImgVariable DEPEND %Control DEFAULT TIMES 0

%AIPressedImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[END]
EMBED %ControlEventHandling
[INSTANCES]
WHEN '?cmdSelect'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
GET(EditorQueue,CHOICE(?EditorList))
glo:szEditorCommand = EditorQueue.szValue
ReturnCode = Level:Benign
POST(EVENT:CloseWindow)
[END]
[END]
WHEN '?cmdCancel'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
POST(EVENT:CloseWindow)
[END]
[END]
WHEN '?EditorList'
[INSTANCES]
WHEN 'AlertKey'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
 CASE KEYCODE()
   OF MouseLeft2
      MouseDownRow = ?EditorList{PROPLIST:MouseDownRow}
      GET(EditorQueue,MouseDownRow)
      glo:szEditorCommand = EditorQueue.szValue
      ReturnCode = Level:Benign
      POST(EVENT:CloseWindow)
 END
[END]
[END]
[END]
EMBED %WindowManagerMethodCodeSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8040
PROPERTY:END
GET(EditorQueue,1)
?EditorList{PROP:Selected} = 1
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8400
PROPERTY:END
CorrectForOffscreen(Window)
[END]
[END]
[END]
EMBED %WindowManagerMethodDataSection
[INSTANCES]
WHEN 'TakeFieldEvent'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
MouseDownRow      LONG
[END]
[END]
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[CALLS]
CorrectForOffScreen
[WINDOW]
Window  WINDOW('Send To'),AT(,,210,103),FONT('Segoe UI',10),GRAY,HLP('SelectSendToCommand.htm'), |
          SYSTEM
          LIST,AT(5,5,200,72),USE(?EditorList),VSCROLL,ALRT(MouseLeft2),FORMAT('1020L(2)|M@s255@'), |
            FROM(EditorQueue),#ORDINAL(1)
          BUTTON('&Select'),AT(110,84,45),USE(?cmdSelect),#ORDINAL(2)
          BUTTON('Cancel'),AT(160,84,45),USE(?cmdCancel),#ORDINAL(3)
        END

[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2011/12/06' '14:30:31'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME MatchWithoutComment
PROTOTYPE '(*CSTRING szText, *CSTRING szPattern, BYTE bMatchMode, * CSTRING szExtension),LONG'
PARAMETERS '(*CSTRING szText, *CSTRING szPattern, BYTE bMatchMode, * CSTRING szExtension)'
[COMMON]
FROM ABC Source
MODIFIED '2012/03/01' ' 7:38:38'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
CommentStyle         LONG
bInstring            BOOL(FALSE)
pCommentMarker       LONG
pMatch               LONG
szMatchText          CSTRING(1025)
CommentMarker        CSTRING(3)
StatementQueue       QUEUE
statement               &CSTRING
                     END
clText               &CSTRING
i                    LONG
j                    LONG
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
      CommentStyle = GetCommentStyle(szExtension)
      clText &= NEW CSTRING(SIZE(szText)+1)
      clText = szText
      j = LEN(clText)
      LOOP i = 1 TO j
         !replace tab characters with space
         IF clText[i] = '<9>'
            clText[i] = ' '
         END
      END
      clText = CLIP(LEFT(clText))
      IF CommentStyle = CommentStyleCpp
           IF clText[1 : 2] = '//'
              pMatch = 0
           ELSE
              DO ProcessText
           END
      ELSIF CommentStyle = CommentStyleClarion
           IF clText[1] = '!'
              pMatch = 0
           ELSE
              DO ProcessText
           END
      ELSIF CommentStyle = CommentStyleVB
           IF clText[1] = ''''
              pMatch = 0
           ELSE
              DO ProcessText
           END
      ELSIF CommentStyle = CommentStylePython
           IF clText[1] = '#'
              pMatch = 0
           ELSE
              DO ProcessText
           END
      ELSIF CommentStyle = CommentStyleSQL
           IF clText[1 : 2] = '--'
              pMatch = 0
           ELSE
              DO ProcessText
           END
      ELSE
         pMatch = TRUE
      END
      DISPOSE(clText)
      RETURN pMatch

ProcessText   ROUTINE
   DATA
indx                LONG

   CODE
      !break text into multiple statements
      DO SplitTextIntoStatements
      !now loop through the queue and examine each statement on the line
      LOOP indx = 1 TO RECORDS(StatementQueue)
         GET(StatementQueue,indx)

         !find comment marker not in a string
         IF CommentStyle = CommentStyleCpp
              CommentMarker = '//'
              DO LookForCommentMarker
         ELSIF CommentStyle = CommentStyleVB
              CommentMarker = ''''
              DO LookForCommentMarker
         ELSIF CommentStyle = CommentStylePython
              CommentMarker = '#'
              DO LookForCommentMarker
         ELSIF CommentStyle = CommentStyleSQL
              CommentMarker = '--'
              DO LookForCommentMarker
         ELSE
              CommentMarker = '|'
              DO LookForCommentMarker
              IF NOT pCommentMarker
                 CommentMarker = '!'
                 DO LookForCommentMarker
              END
         END

         DO LookForMatch
         IF pMatch
            BREAK
         END
      END

      !clean up newed strings
      LOOP indx = 1 TO RECORDS(StatementQueue)
         GET(StatementQueue,indx)
         DISPOSE(StatementQueue.statement)
         ASSERT(0,eqDBG & 'DISPOSE statement [' & ADDRESS(StatementQueue.statement) & ']')
         StatementQueue.statement &= NULL
         PUT(StatementQueue)
      END
      FREE(StatementQueue)
[END]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
SplitTextIntoStatements ROUTINE
   DATA
i           LONG
j           LONG
chString    CSTRING(2)
chSeparator CSTRING(2)

   CODE
      CASE CommentStyle
        OF CommentStyleClarion
           chString = ''''
           chSeparator = ';'
        OF CommentStyleCpp
           chString = ''''
           chSeparator = ';'
        OF CommentStyleVB
           chString = '"'
           chSeparator = ':'
        OF CommentStylePython
           chString = '"'
           chSeparator = ';'
        OF CommentStyleSQL
           chString = '"'
           chSeparator = ';'
      END
      j = 1
      LOOP i = 1 TO LEN(szText)
        IF szText[i] = chString
           IF bInstring = TRUE
              IF i < LEN(szText)
                 IF szText[i+1] = chString
                    i += 1
                    !escaped quote so still in string
                 ELSE
                    bInstring = 1 - bInstring
                 END
              ELSE
                 bInString = FALSE
              END
           ELSE
              bInstring = TRUE
           END
        ! szRetVal      = CLIP(xFolder) !~Mar/16/09 added CLIP                        !; ASSERT(0,eqDBG&'szRetVal['& szRetVal &']')
        ELSIF ((CommentStyle = CommentStyleClarion) AND (szText[i] = '!' OR szText[i] = '|'))   OR |
              ((CommentStyle = CommentStyleCpp)     AND (szText[i : i+1] = '//'))               OR |
              ((CommentStyle = CommentStyleVB)      AND (szText[i] = ''''))                     OR |
              ((CommentStyle = CommentStylePython)  AND (szText[i] = '#'))                      OR |
              ((CommentStyle = CommentStyleSQL)     AND (szText[i : i+1] = '--'))
           IF bInstring = FALSE
              !rest of line is a comment
              StatementQueue.statement &= NEW CSTRING((i-j)+1)
              StatementQueue.statement = szText[j : i-1]
              ADD(StatementQueue)
              i = LEN(szText)
              j = i + 1
           END
        ELSIF szText[i] = chSeparator
           IF bInstring = FALSE
              StatementQueue.statement &= NEW CSTRING((i-j)+1)
              ASSERT(0,eqDBG & 'NEW statement [' & ADDRESS(StatementQueue.statement) & ']')
              StatementQueue.statement = szText[j : i-1]
              ADD(StatementQueue)
              j = i + 1
           END
        ELSE
        END
      END
      IF i > j
         StatementQueue.statement &= NEW CSTRING((i-j)+1)
         ASSERT(0,eqDBG & 'NEW statement [' & ADDRESS(StatementQueue.statement) & ']')
         StatementQueue.statement = szText[j : i-1]
         ADD(StatementQueue)
      END
   EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
LookForCommentMarker    ROUTINE
   DATA
pStringEnd          LONG
pStringStart        LONG

   CODE
      LOOP pCommentMarker = 1 TO LEN(StatementQueue.statement)
         IF StatementQueue.statement[pCommentMarker : pCommentMarker+(LEN(CommentMarker)-1)] = CommentMarker
            BREAK
         END
      END
      IF pCommentMarker > LEN(StatementQueue.statement)
         pCommentMarker = 0
      END
      pStringStart = 0
      LOOP WHILE pCommentMarker
         LOOP pStringStart = 1 TO LEN(StatementQueue.statement)
            IF StatementQueue.statement[pStringStart] = ''''
               BREAK
            END
         END
         IF pStringStart < pCommentMarker
            LOOP pStringEnd = (pStringStart+1) TO LEN(StatementQueue.statement)
               IF StatementQueue.statement[pStringEnd] = ''''
                  BREAK
               END
            END
            IF pStringEnd > LEN(StatementQueue.statement)
               pStringEnd = 0
            END
            IF pStringEnd
               IF INRANGE(pCommentMarker,pStringStart,pStringEnd)
                  LOOP pCommentMarker = (pStringEnd+1) TO LEN(StatementQueue.statement)
                     IF StatementQueue.statement[pCommentMarker : pCommentMarker+(LEN(CommentMarker)-1)] = CommentMarker
                        BREAK
                     END
                  END
               ELSE
                  BREAK
               END
            ELSE
               BREAK
            END
         ELSE
            BREAK
         END
      END
   EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
LookForMatch   ROUTINE
      IF pCommentMarker
         szMatchText = StatementQueue.statement[1 : pCommentMarker-1]
      ELSE
         szMatchText = StatementQueue.statement
      END

      IF BAND(bMatchMode,Match:Regular)   !regular expression
         pMatch = MATCH(szMatchText,szPattern,bMatchMode)
      ELSE
         IF BAND(bMatchMode,Match:NoCase)
            pMatch = INSTRING(UPPER(szPattern),UPPER(szMatchText),1)
         ELSE
            pMatch = INSTRING(szPattern,szMatchText,1)
         END
      END
   EXIT
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[CALLS]
GetCommentStyle
[PROCEDURE]
NAME GetCommentStyle
PROTOTYPE '(*CSTRING szExtension),LONG'
PARAMETERS '(*CSTRING szExtension)'
[COMMON]
FROM ABC Source
MODIFIED '2012/03/02' '11:19:22'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
ReturnValue   LONG
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
      FileExtensionQueue.Extension = '*' & UPPER(szExtension)
      GET(FileExtensionQueue,FileExtensionQueue.Extension)
      IF ERRORCODE()
         ReturnValue = -1
      ELSE
         CASE FileExtensionQueue.nLexer
           OF SCLEX_CLWNOCASE OROF SCLEX_CLARION
              ReturnValue = CommentStyleClarion
           OF SCLEX_CPP OROF SCLEX_CPPNOCASE
              ReturnValue = CommentStyleCpp
           OF SCLEX_VB OROF SCLEX_VBSCRIPT
              ReturnValue = CommentStyleVB
           OF SCLEX_PYTHON
              ReturnValue = CommentStylePython
           OF SCLEX_SQL OROF SCLEX_MSSQL OROF SCLEX_MYSQL
              ReturnValue = CommentStyleSQL
         ELSE
              ReturnValue = -1
         END
      END
      RETURN ReturnValue
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2011/12/07' '11:58:29'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME SaveResults
PROTOTYPE '(FindStrOptionsGroupType FindStrOptions, *CSTRING szSendToFilename),BOOL'
PARAMETERS '(FindStrOptionsGroupType FindStrOptions, *CSTRING szSendToFilename)'
[COMMON]
FROM ABC Window
MODIFIED '2017/08/07' '16:34:38'
[DATA]
[SCREENCONTROLS]
! PROMPT('Save To:'),USE(?SaveTo:Prompt)
! ENTRY(@n3),USE(SaveTo)
[REPORTCONTROLS]
! STRING(@n3),USE(SaveTo)
SaveTo                   BYTE
!!> GUID('f2631631-f39e-4ba1-a865-967a9fe32604'),PROMPT('Save To:'),HEADER('Save To'),PICTURE(@n3),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('b Ret Val:'),USE(?bRetVal:Prompt)
! ENTRY(@s20),USE(bRetVal)
[REPORTCONTROLS]
! STRING(@s20),USE(bRetVal)
bRetVal                  BOOL
!!> GUID('0f1e4573-afa3-41ad-a344-582116b69190'),PROMPT('b Ret Val:'),HEADER('b Ret Val'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('sz Text Filename:'),USE(?szTextFilename:Prompt)
! ENTRY(@s255),USE(szTextFilename)
[REPORTCONTROLS]
! STRING(@s255),USE(szTextFilename)
szTextFilename           CSTRING(261)
!!> GUID('c6da64f1-09e0-4da9-a5d8-2a1d01896211'),PROMPT('sz Text Filename:'),HEADER('sz Text Filename'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('Column Delimiter:'),USE(?ColumnDelimiter:Prompt)
! ENTRY(@n3),USE(ColumnDelimiter)
[REPORTCONTROLS]
! STRING(@n3),USE(ColumnDelimiter)
ColumnDelimiter          BYTE
!!> GUID('1df90194-776f-4751-b4cf-f4a94f05d0d0'),PROMPT('Column Delimiter:'),HEADER('Column Delimiter'),PICTURE(@n3),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('Format Option:'),USE(?FormatOption:Prompt)
! ENTRY(@n3),USE(FormatOption)
[REPORTCONTROLS]
! STRING(@n3),USE(FormatOption)
FormatOption             BYTE
!!> GUID('017fab41-96d0-4d1a-a259-2881dd91e0e6'),PROMPT('Format Option:'),HEADER('Format Option'),PICTURE(@n3),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('b Quote Strings:'),USE(?bQuoteStrings:Prompt)
! ENTRY(@n3),USE(bQuoteStrings)
[REPORTCONTROLS]
! STRING(@n3),USE(bQuoteStrings)
bQuoteStrings            BYTE
!!> GUID('30be9c1e-70f6-4a4b-9e4e-b653e7cf21a6'),PROMPT('b Quote Strings:'),HEADER('b Quote Strings'),PICTURE(@n3),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('b Send To After Save:'),USE(?bSendToAfterSave:Prompt)
! ENTRY(@s20),USE(bSendToAfterSave)
[REPORTCONTROLS]
! STRING(@s20),USE(bSendToAfterSave)
bSendToAfterSave         BOOL
!!> GUID('39df835c-4dfe-4bd8-bc71-b5f95b4ef809'),INITIAL('FALSE'),PROMPT('b Send To After Save:'),HEADER('b Send To After Save'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! CHECK(' Save Filename'),USE(bSaveFilename)
[REPORTCONTROLS]
! CHECK(' Save Filename'),USE(bSaveFilename)
bSaveFilename            BYTE
!!> GUID('b0ce0e9b-3d7a-45f9-9d1b-c29a2bcda805'),VALID(BOOLEAN),PROMPT(' Save Filename'),HEADER('b Save Filename'),PICTURE(@n3),TYPEMODE(INS)
[SCREENCONTROLS]
! CHECK(' Save Line Number'),USE(bSaveLineNumber)
[REPORTCONTROLS]
! CHECK(' Save Line Number'),USE(bSaveLineNumber)
bSaveLineNumber          BYTE
!!> GUID('b4a44b7f-d9e4-4eef-9891-345538c8b5b5'),VALID(BOOLEAN),PROMPT(' Save Line Number'),HEADER('b Save Line Number'),PICTURE(@n3),TYPEMODE(INS)
[SCREENCONTROLS]
! CHECK(' Save Location'),USE(bSaveLocation)
[REPORTCONTROLS]
! CHECK(' Save Location'),USE(bSaveLocation)
bSaveLocation            BYTE
!!> GUID('9327a604-624b-4843-8dcb-a5550a2b4592'),VALID(BOOLEAN),PROMPT(' Save Location'),HEADER('b Save Location'),PICTURE(@n3),TYPEMODE(INS)
[SCREENCONTROLS]
! CHECK(' Save Text'),USE(bSaveText)
[REPORTCONTROLS]
! CHECK(' Save Text'),USE(bSaveText)
bSaveText                BYTE
!!> GUID('6aac8a1b-cfe6-4a14-945d-a935bb3d3667'),VALID(BOOLEAN),PROMPT(' Save Text'),HEADER('b Save Text'),PICTURE(@n3),TYPEMODE(INS)
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default', 'WindowToolbar')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('WindowManager')
WHEN  ('WindowToolbar') ('ToolbarClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(),BYTE,PROC,DERIVED', 'Kill {19}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeAccepted {11}PROCEDURE(),BYTE,PROC,DERIVED')

%ReturnValue FIELD  (bRetVal)
%WindowOperationMode DEFAULT  ('Use WINDOW setting')
%INISaveWindow LONG  (1)
%ProcedureDisableEnhanceFocus LONG  (0)
%ProcedureUseEnterInsteadTabOverride LONG  (0)
%WindowUseEnterInsteadTab LONG  (1)
%ProcedureUseEnterInsteadTabExcludeListCombo LONG  (0)
%ProcedureUseEnterInsteadTabEnableNextTabStop LONG  (0)
%ProcedureUseEnterInsteadTabExcludeG LONG  (1)
%WindowUseEnterInsteadTabExclude MULTI DEFAULT  ()
%GlobalObject DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('NO')
WHEN  ('WindowToolbar') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ThisWindow')
WHEN  ('WindowToolbar') ('Toolbar')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ADOBlob')
WHEN  ('WindowToolbar') ('ADOBlob')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (0)
WHEN  ('WindowToolbar') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%WindowStyles MULTI LONG  ()
%WindowStyleFontName DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontSize DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontStyle DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontColor DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontCharSet DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStylePicture DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleOtherListboxes MULTI DEFAULT  ()
%ProcedureAutoBindFields MULTI LONG  ()
%ProcedureAutoBindField DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindFieldTPL DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindProcedures MULTI LONG  ()
%ProcedureAutoBindProcedure DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindProcedureTPL DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindFieldsIgnored MULTI LONG  ()
%ProcedureAutoBindFieldIgnored DEPEND %ProcedureAutoBindFieldsIgnored DEFAULT TIMES 0

%ProcedureAutoBindProceduresIgnored MULTI LONG  ()
%ProcedureAutoBindProcedureIgnored DEPEND %ProcedureAutoBindProceduresIgnored DEFAULT TIMES 0

%ProcedureAutoBindValidToAddField LONG  (0)
%ProcedureUserBindFields MULTI LONG  ()
%ProcedureUserBindField DEPEND %ProcedureUserBindFields FIELD TIMES 0

%ProcedureAutoBindFieldIgnore DEPEND %ProcedureAutoBindFields LONG TIMES 0

%ProcedureUserBindProcedures MULTI LONG  ()
%ProcedureUserBindProcedure DEPEND %ProcedureUserBindProcedures PROCEDURE TIMES 0

%ProcedureAutoBindProcedureIgnore DEPEND %ProcedureAutoBindProcedures LONG TIMES 0

%ProcedureUserBindExpressions MULTI LONG  ()
%ProcedureUserBindExpressionName DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ProcedureUserBindExpression DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ExtUITabIcon DEPEND %Control DEFAULT TIMES 0

%ExtUITabStyleOverrideGlobal DEPEND %Control LONG TIMES 0

%ExtUITabStyle DEPEND %Control DEFAULT TIMES 3
WHEN  ('') ('Default')
WHEN  ('?LookupFile:2') ('Default')
WHEN  ('?cmdCancel') ('Default')

%ButtonAction DEPEND %Control DEFAULT TIMES 4
WHEN  ('') ('No Special Action')
WHEN  ('?LookupFile:2') ('No Special Action')
WHEN  ('?cmdCancel') ('No Special Action')
WHEN  ('?cmdSave') ('No Special Action')

%ButtonRunName DEPEND %Control DEFAULT TIMES 1
WHEN  ('?LookupFile:2') ('')

%ButtonRunParameters DEPEND %Control DEFAULT TIMES 1
WHEN  ('?LookupFile:2') ('')

%ButtonProcedure DEPEND %Control PROCEDURE TIMES 1
WHEN  ('?LookupFile:2') ()

%ButtonThread DEPEND %Control LONG TIMES 1
WHEN  ('?LookupFile:2') (0)

%ButtonThreadStack DEPEND %Control DEFAULT TIMES 4
WHEN  ('') ('25000')
WHEN  ('?LookupFile:2') ('25000')
WHEN  ('?cmdCancel') ('25000')
WHEN  ('?cmdSave') ('25000')

%ButtonParameters DEPEND %Control DEFAULT TIMES 1
WHEN  ('?LookupFile:2') ('')

%ButtonReturnValueAssignment DEPEND %Control FIELD TIMES 1
WHEN  ('?LookupFile:2') ()

%ButtonReturnValueReferenceAssign DEPEND %Control LONG TIMES 1
WHEN  ('?LookupFile:2') (0)

%ButtonRequest DEPEND %Control DEFAULT TIMES 4
WHEN  ('') ('None')
WHEN  ('?LookupFile:2') ('None')
WHEN  ('?cmdCancel') ('None')
WHEN  ('?cmdSave') ('None')

%ButtonThreadParameters DEPEND %Control DEFAULT TIMES 1
WHEN  ('?LookupFile:2') ('')

%ButtonThreadReturnValueAssignment DEPEND %Control FIELD TIMES 1
WHEN  ('?LookupFile:2') ()

%PreLookupKey DEPEND %Control KEY TIMES 0

%PreLookupField DEPEND %Control COMPONENT TIMES 0

%PreLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PreLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupKey DEPEND %Control KEY TIMES 0

%PostLookupField DEPEND %Control COMPONENT TIMES 0

%PostLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupDuringValidate DEPEND %Control LONG TIMES 4
WHEN  ('') (1)
WHEN  ('?LookupFile:2') (1)
WHEN  ('?cmdCancel') (1)
WHEN  ('?szTextFilename') (1)

%LookupAssign DEPEND %Control MULTI LONG TIMES 0

%MoreTarget DEPEND %LookupAssign FIELD TIMES 0

%MoreField DEPEND %LookupAssign DEFAULT TIMES 0

%ForceWindowRefresh DEPEND %Control LONG TIMES 0

%CheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%CheckedAssignVariable DEPEND %CheckedAssigns FIELD TIMES 0

%CheckedAssignValue DEPEND %CheckedAssigns DEFAULT TIMES 0

%CheckedHides DEPEND %Control MULTI LONG TIMES 0

%CheckedControl DEPEND %CheckedHides DEFAULT TIMES 0

%CheckedControlAction DEPEND %CheckedHides DEFAULT TIMES 3
WHEN  ('')TIMES 0
WHEN  ('?LookupFile:2')TIMES 0
WHEN  ('?cmdCancel')TIMES 0

%CheckedEnables DEPEND %Control MULTI LONG TIMES 0

%CheckedControl1 DEPEND %CheckedEnables DEFAULT TIMES 0

%CheckedControl1Action DEPEND %CheckedEnables DEFAULT TIMES 3
WHEN  ('')TIMES 0
WHEN  ('?LookupFile:2')TIMES 0
WHEN  ('?cmdCancel')TIMES 0

%UncheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%UncheckedAssignVariable DEPEND %UncheckedAssigns FIELD TIMES 0

%UncheckedAssignValue DEPEND %UncheckedAssigns DEFAULT TIMES 0

%UnCheckedHides DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl DEPEND %UnCheckedHides DEFAULT TIMES 0

%UnCheckedControlAction DEPEND %UnCheckedHides DEFAULT TIMES 3
WHEN  ('')TIMES 0
WHEN  ('?LookupFile:2')TIMES 0
WHEN  ('?cmdCancel')TIMES 0

%UnCheckedEnables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl1 DEPEND %UnCheckedEnables DEFAULT TIMES 0

%UnCheckedControl1Action DEPEND %UnCheckedEnables DEFAULT TIMES 3
WHEN  ('')TIMES 0
WHEN  ('?LookupFile:2')TIMES 0
WHEN  ('?cmdCancel')TIMES 0

%CheckedDisables DEPEND %Control MULTI LONG TIMES 0

%CheckedDisableControl DEPEND %CheckedDisables DEFAULT TIMES 0

%CheckedDisableControlAction DEPEND %CheckedDisables DEFAULT TIMES 3
WHEN  ('')TIMES 0
WHEN  ('?LookupFile:2')TIMES 0
WHEN  ('?cmdCancel')TIMES 0

%UnCheckedDisables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedDisableControl DEPEND %UnCheckedDisables DEFAULT TIMES 0

%UnCheckedDisableControlAction DEPEND %UnCheckedDisables DEFAULT TIMES 3
WHEN  ('')TIMES 0
WHEN  ('?LookupFile:2')TIMES 0
WHEN  ('?cmdCancel')TIMES 0

%ProcedureOneInstance LONG  (0)
%FieldGradientColorType DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('Off')
WHEN  ('?PANEL1') ('Off')

%FieldGradientColorTypeVariable DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('')
WHEN  ('?PANEL1') ('')

%FieldGradientColorTypeIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?PANEL1') (0)

%FieldGradientColorFrom DEPEND %Control LONG TIMES 2
WHEN  ('') (-1)
WHEN  ('?PANEL1') (-1)

%FieldGradientColorFromVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorFromIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?PANEL1') (0)

%FieldGradientColorTo DEPEND %Control LONG TIMES 2
WHEN  ('') (-1)
WHEN  ('?PANEL1') (-1)

%FieldGradientColorToVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorToIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?PANEL1') (0)

%PreserveVarsLoc MULTI LONG  ()
%PreserveVarLoc DEPEND %PreserveVarsLoc DEFAULT TIMES 0

%ActiveImageEnable DEPEND %Control LONG TIMES 0

%AIObjectName DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('AIBtn0')

%AIEnableMimicControl DEPEND %Control LONG TIMES 1
WHEN  ('') (1)

%AIMimicControl DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('?PANEL1')

%AIImgRound DEPEND %Control LONG TIMES 0

%AIOverrideImg DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgVariable DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIDisableImg DEPEND %Control DEFAULT TIMES 0

%AIDisableImgVariable DEPEND %Control DEFAULT TIMES 0

%AIDisableImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIHotImg DEPEND %Control DEFAULT TIMES 0

%AIHotImgVariable DEPEND %Control DEFAULT TIMES 0

%AIHotImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIPressedImg DEPEND %Control DEFAULT TIMES 0

%AIPressedImgVariable DEPEND %Control DEFAULT TIMES 0

%AIPressedImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

[EMBED]
EMBED %ControlEventHandling
[INSTANCES]
WHEN '?cmdSave'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
INIMgr.Update('SaveResults','SaveTo',SaveTo)
INIMgr.Update('SaveResults','szTextFilename',szTextFilename)
INIMgr.Update('SaveResults','ColumnDelimiter',ColumnDelimiter)
INIMgr.Update('SaveResults','FormatOption',FormatOption)
INIMgr.Update('SaveResults','bQuoteStrings',bQuoteStrings)
INIMgr.Update('SaveResults','bSendToAfterSave',bSendToAfterSave)
INIMgr.Update('SaveResults','bSaveFilename',bSaveFilename)
INIMgr.Update('SaveResults','bSaveLineNumber',bSaveLineNumber)
INIMgr.Update('SaveResults','bSaveLocation',bSaveLocation)
INIMgr.Update('SaveResults','bSaveText',bSaveText)
IF SaveTo = SaveToClipboard
   DO HandleSave
   POST(EVENT:CloseWindow)
ELSIF szTextFilename = ''
   SELECT(?szTextFilename)
ELSE
   IF SaveTo = SaveToRestorePoint
      cc = kcr_fnSplit(szTextFilename, szDrive, szDir, szName, szExtension)
      IF UPPER(szExtension) <> '.RRL'
         szTextFilename = szTextFilename & '.rrl'
      END
   END
   DO HandleSave
   POST(EVENT:CloseWindow)
END
[END]
[END]
WHEN '?cmdCancel'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
bRetVal = FALSE
POST(EVENT:CloseWindow)
[END]
[END]
WHEN '?LookupFile:2'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
CASE SaveTo
  OF SaveToRestorePoint
     FileLookup2.SetMask('Re-loadable Result List Files','*.RRL')                   ! Set the file mask
     IF szTextFilename = ''
        szTextFilename = svSpecialFolder.GetDir(SV:CSIDL_APPDATA, 'Devuna' & '\' & 'KSS') & '\KSS_Results.rrl'
     END
     FileLookup2.DefaultFile = szTextFilename
ELSE
     FileLookup2.SetMask('All Files','*.*')                   ! Set the file mask
     IF szTextFilename = ''
        szTextFilename = svSpecialFolder.GetDir(SV:CSIDL_PERSONAL) & '\KSS_Results.txt'
     END
     FileLookup2.DefaultFile = szTextFilename
END
[END]
[END]
WHEN '?SaveTo'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2500
PROPERTY:END
CASE SaveTo
  OF SaveToClipboard
     bSendToAfterSave = FALSE
     DISPLAY(?bSendToAfterSave)
     szTextFilename = ''
     DISPLAY(?szTextFilename)
     DISABLE(?Filename:Prompt,?LookupFile:2)
     ENABLE(?ColumnDelimiter:Prompt,?bSaveText)
     IF bSaveFilename = FALSE
        DISABLE(?FileNameFormat:Prompt,?FormatOption)
     END
     DISABLE(?bSendToAfterSave)

  OF SaveToTextFile
     ENABLE(?ColumnDelimiter:Prompt,?bSendToAfterSave)
     IF bSaveFilename = FALSE
        DISABLE(?FileNameFormat:Prompt,?FormatOption)
     END
     IF szTextFilename = ''
        INIMgr.Fetch('SaveResults','szTextFilename',szTextFilename)
     END
     IF szTextFilename <> ''
        IF UPPER(szTextFilename[LEN(szTextFilename)-3 : LEN(szTextFilename)]) = '.RRL'
           szTextFilename = szTextFilename[1 : LEN(szTextFilename)-3] & 'txt'
           DISPLAY(?szTextFilename)
        END
     END
     ENABLE(?Filename:Prompt,?LookupFile:2)

  OF SaveToRestorePoint
     bSaveFilename = TRUE
     bSaveLineNumber = TRUE
     bSaveLocation = TRUE
     bSaveText = TRUE
     bSendToAfterSave = FALSE
     FormatOption = FolderBasenameExtensionFormat
     DISPLAY(?bSaveFilename,?bSendToAfterSave)
     DISABLE(?ColumnDelimiter:Prompt,?bSendToAfterSave)
     IF szTextFilename = ''
        INIMgr.Fetch('SaveResults','szTextFilename',szTextFilename)
     END
     IF szTextFilename <> ''
        IF UPPER(szTextFilename[LEN(szTextFilename)-3 : LEN(szTextFilename)]) = '.TXT'
           szTextFilename = szTextFilename[1 : LEN(szTextFilename)-3] & 'rrl'
           DISPLAY(?szTextFilename)
        END
     END
     ENABLE(?Filename:Prompt,?LookupFile:2)
END
[END]
[END]
WHEN '?bSaveFilename'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
IF bSaveFilename = TRUE
   ENABLE(?FileNameFormat:Prompt,?FormatOption)
ELSE
   DISABLE(?FileNameFormat:Prompt,?FormatOption)
END
[END]
[END]
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
SaveToClipboard               EQUATE(0)
SaveToTextFile                EQUATE(1)
SaveToRestorePoint            EQUATE(2)

CommaDelimited                EQUATE(0)
TabDelimited                  EQUATE(1)
ColumnDelimited               EQUATE(2)

FullPathFormat                EQUATE(0)
FolderFilenameFormat          EQUATE(1)
FolderBasenameExtensionFormat EQUATE(2)
FilenameFormat                EQUATE(3)
BasenameExtensionFormat       EQUATE(4)

crlf                          EQUATE('<13,10>')

DosBufferSize        EQUATE(512000)
DosFilename          CSTRING(261),STATIC
DosFile              FILE,DRIVER('DOS'),NAME(DosFilename),CREATE,PRE(DOS)
                        RECORD
Buffer                     STRING(DosBufferSize)
                        END
                     END
ResultQueue          &ResultQueueType
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3000
PROPERTY:END
FormattedFilename    CSTRING(MAXPATH)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7300
PROPERTY:END
arMaxWidth          LONG,DIM(7)
NumberOfColumns     BYTE
[END]
EMBED %WindowManagerMethodCodeSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6500
PROPERTY:END
ResultQueue &= FindStrOptions.ResultQueue
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8400
PROPERTY:END
CorrectForOffscreen(Window)

INIMgr.Fetch('SaveResults','SaveTo',SaveTo)
INIMgr.Fetch('SaveResults','szTextFilename',szTextFilename)
INIMgr.Fetch('SaveResults','ColumnDelimiter',ColumnDelimiter)
INIMgr.Fetch('SaveResults','FormatOption',FormatOption)
INIMgr.Fetch('SaveResults','bQuoteStrings',bQuoteStrings)
INIMgr.Fetch('SaveResults','bSendToAfterSave',bSendToAfterSave)

bSaveFilename = TRUE
bSaveLineNumber = TRUE
bSaveLocation = TRUE
bSaveText = TRUE

INIMgr.Fetch('SaveResults','bSaveFilename',bSaveFilename)
INIMgr.Fetch('SaveResults','bSaveLineNumber',bSaveLineNumber)
INIMgr.Fetch('SaveResults','bSaveLocation',bSaveLocation)
INIMgr.Fetch('SaveResults','bSaveText',bSaveText)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8800
PROPERTY:END
FileLookup2.Flags=BOR(FileLookup2.Flags,FILE:KeepDir)    ! Return to current folder
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9700
PROPERTY:END
POST(EVENT:Accepted,?SaveTo)
[END]
[END]
[END]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 500
PROPERTY:END
HandleSave  ROUTINE
   DATA
i                 LONG
j                 LONG
nTextLength       LONG
Quote             CSTRING('"')
Delimiter         CSTRING(',')
szClipboardText   &CSTRING
ExtaCharacters    BYTE
TotalColumnWidth  LONG
szLineNo          CSTRING(11)
pBuffer           LONG
buffSizeNeeded    LONG
quotedText        &CSTRING

   CODE

      IF SaveTo <> SaveToRestorePoint
         IF bQuoteStrings = TRUE
            Quote = '"'
         ELSE
            Quote = ''
         END

         NumberOfColumns = 0
         IF bSaveFilename = TRUE
            CASE FormatOption
              OF FullPathFormat
                 NumberOfColumns += 1  ! = 4
              OF FolderFilenameFormat
                 NumberOfColumns += 2  ! = 5
              OF FolderBasenameExtensionFormat
                 NumberOfColumns += 3  ! = 6
              OF FilenameFormat
                 NumberOfColumns += 1  ! = 4
              OF BasenameExtensionFormat
                 NumberOfColumns += 2  ! = 5
            END
         END
         IF bSaveLineNumber = TRUE
            NumberOfColumns += 1
         END
         IF bSaveLocation = TRUE
            NumberOfColumns += 1
         END
         IF bSaveText = TRUE
            NumberOfColumns += 1
         END

         CASE ColumnDelimiter
           OF CommaDelimited
              Delimiter = ','
              ExtaCharacters = (((LEN(Quote) * 2) * NumberOfColumns) + (NumberOfColumns - 1)) + 2
              j = RECORDS(ResultQueue)
              nTextLength = (j * (SIZE(ResultQueue)+ExtaCharacters)) + 1

           OF TabDelimited
              Delimiter = '<9>'
              ExtaCharacters = (((LEN(Quote) * 2) * NumberOfColumns) + (NumberOfColumns - 1)) + 2
              j = RECORDS(ResultQueue)
              nTextLength = (j * (SIZE(ResultQueue)+ExtaCharacters)) + 1

           OF ColumnDelimited
              Delimiter = ' '

              DO DetermineMaxColumnWidths

              TotalColumnWidth = 0
              IF bSaveFilename = TRUE
                 CASE FormatOption
                   OF FullPathFormat
                      TotalColumnWidth += arMaxWidth[1]  !Formatted Filename
                   OF FolderFilenameFormat
                      TotalColumnWidth += arMaxWidth[2]  !Path
                      TotalColumnWidth += arMaxWidth[1]  !Formatted Filename
                   OF FolderBasenameExtensionFormat
                      TotalColumnWidth += arMaxWidth[2]  !Path
                      TotalColumnWidth += arMaxWidth[3]  !Filename
                      TotalColumnWidth += arMaxWidth[4]  !Extension
                   OF FilenameFormat
                      TotalColumnWidth += arMaxWidth[1]  !Formatted Filename
                   OF BasenameExtensionFormat
                      TotalColumnWidth += arMaxWidth[3]  !Filename
                      TotalColumnWidth += arMaxWidth[4]  !Extension
                 END
              END
              IF bSaveLineNumber = TRUE
                 TotalColumnWidth += arMaxWidth[5]
              END
              IF bSaveLocation = TRUE
                 TotalColumnWidth += arMaxWidth[6]
              END
              IF bSaveText = TRUE
                 TotalColumnWidth += arMaxWidth[7]
              END

              !LOOP j = 1 TO NumberOfColumns
              !   TotalColumnWidth += arMaxWidth[j]
              !END
              TotalColumnWidth += ((LEN(Quote) * 2) * NumberOfColumns) + 2
              j = RECORDS(ResultQueue)
              nTextLength = (j * TotalColumnWidth) + 1
         END

         ASSERT(0,eqDBG & 'NEW szClipboardText [' & ADDRESS(szClipboardText) & ']')
         szClipboardText &= NEW CSTRING(nTextLength)

         LOOP i = 1 TO j
            GET(ResultQueue,i)
            DO FormatFilename
            szLineNo = CLIP(LEFT(FORMAT(ResultQueue.LineNo,@N_10B)))

            buffSizeNeeded = DoubleQuote(ResultQueue.Text,quotedText,0,quote)
            ASSERT(0,eqDBG & 'NEW quotedText [' & ADDRESS(quotedText) & ']')
            quotedText &= NEW CSTRING(buffSizeNeeded+1)
            DoubleQuote(ResultQueue.Text,quotedText,SIZE(quotedText),quote)

            IF bSaveFilename = TRUE
               CASE FormatOption
                 OF FullPathFormat
                    szClipboardText = szClipboardText & |
                                      Quote & FormattedFilename & |
                                      CHOOSE(ColumnDelimiter = ColumnDelimited, ALL(' ',arMaxWidth[1] - LEN(FormattedFilename)),'') & |
                                      Quote
                 OF FolderFilenameFormat
                    szClipboardText = szClipboardText & |
                                      Quote & ResultQueue.Path & |
                                      CHOOSE(ColumnDelimiter = ColumnDelimited, ALL(' ',arMaxWidth[2] - LEN(ResultQueue.Path)),'') & |
                                      Quote & Delimiter & |
                                      Quote & FormattedFilename & |
                                      CHOOSE(ColumnDelimiter = ColumnDelimited, ALL(' ',arMaxWidth[1] - LEN(FormattedFilename)),'') & |
                                      Quote
                 OF FolderBasenameExtensionFormat
                    szClipboardText = szClipboardText & |
                                      Quote & ResultQueue.Path & |
                                      CHOOSE(ColumnDelimiter = ColumnDelimited, ALL(' ',arMaxWidth[2] - LEN(ResultQueue.Path)),'') & |
                                      Quote & Delimiter & |
                                      Quote & ResultQueue.Filename & |
                                      CHOOSE(ColumnDelimiter = ColumnDelimited, ALL(' ',arMaxWidth[3] - LEN(ResultQueue.Filename)),'') & |
                                      Quote & Delimiter & |
                                      Quote & ResultQueue.szExtension & |
                                      CHOOSE(ColumnDelimiter = ColumnDelimited, ALL(' ',arMaxWidth[4] - LEN(ResultQueue.szExtension)),'') & |
                                      Quote
                 OF FilenameFormat
                    szClipboardText = szClipboardText & |
                                      Quote & FormattedFilename & |
                                      CHOOSE(ColumnDelimiter = ColumnDelimited, ALL(' ',arMaxWidth[1] - LEN(FormattedFilename)),'') & |
                                      Quote
                 OF BasenameExtensionFormat
                    szClipboardText = szClipboardText & |
                                      Quote & ResultQueue.Filename & |
                                      CHOOSE(ColumnDelimiter = ColumnDelimited, ALL(' ',arMaxWidth[3] - LEN(ResultQueue.Filename)),'') & |
                                      Quote & Delimiter & |
                                      Quote & ResultQueue.szExtension & |
                                      CHOOSE(ColumnDelimiter = ColumnDelimited, ALL(' ',arMaxWidth[4] - LEN(ResultQueue.szExtension)),'') & |
                                      Quote
               END
            END

            IF bSaveLineNumber = TRUE
               IF szClipboardText
                  szClipboardText = szClipboardText & Delimiter
               END
               szClipboardText = szClipboardText & |
                                 Quote & |
                                 CHOOSE(ColumnDelimiter = ColumnDelimited, ALL(' ',arMaxWidth[5] - LEN(szLineNo)),'') & |
                                 szLineNo & Quote
            END

            IF bSaveLocation = TRUE
               IF szClipboardText
                  szClipboardText = szClipboardText & Delimiter
               END
               szClipboardText = szClipboardText & |
                                 Quote & |
                                 CHOOSE(ColumnDelimiter = ColumnDelimited, ALL(' ',arMaxWidth[6] - LEN(ResultQueue.ProcedureName)),'') & |
                                 ResultQueue.ProcedureName & Quote
            END

            IF bSaveText = TRUE
               IF szClipboardText
                  szClipboardText = szClipboardText & Delimiter
               END
               szClipboardText = szClipboardText & |
                                 Quote & quotedText & Quote
            END
            szClipboardText = szClipboardText & crlf

            !!!Region Omitted Code
      OMIT('***OLD_CODE***')
            CASE FormatOption
              OF FullPathFormat
                 szClipboardText = szClipboardText & |
                                   Quote & FormattedFilename & |
                                   CHOOSE(ColumnDelimiter = ColumnDelimited, ALL(' ',arMaxWidth[1] - LEN(FormattedFilename)),'') & |
                                   Quote & Delimiter & |
                                   Quote & |
                                   CHOOSE(ColumnDelimiter = ColumnDelimited, ALL(' ',arMaxWidth[2] - LEN(szLineNo)),'') & |
                                   szLineNo & Quote & Delimiter & |
                                   Quote & ResultQueue.ProcedureName & |
                                   CHOOSE(ColumnDelimiter = ColumnDelimited, ALL(' ',arMaxWidth[3] - LEN(ResultQueue.ProcedureName)),'') & |
                                   Quote & Delimiter & |
                                   Quote & quotedText & Quote & crlf

              OF FolderFilenameFormat
                 szClipboardText = szClipboardText & |
                                   Quote & ResultQueue.Path & |
                                   CHOOSE(ColumnDelimiter = ColumnDelimited, ALL(' ',arMaxWidth[1] - LEN(ResultQueue.Path)),'') & |
                                   Quote & Delimiter & |
                                   Quote & FormattedFilename & |
                                   CHOOSE(ColumnDelimiter = ColumnDelimited, ALL(' ',arMaxWidth[2] - LEN(FormattedFilename)),'') & |
                                   Quote & Delimiter & |
                                   Quote & |
                                   CHOOSE(ColumnDelimiter = ColumnDelimited, ALL(' ',arMaxWidth[3] - LEN(szLineNo)),'') & |
                                   szLineNo & Quote & Delimiter & |
                                   Quote & ResultQueue.ProcedureName & |
                                   CHOOSE(ColumnDelimiter = ColumnDelimited, ALL(' ',arMaxWidth[4] - LEN(ResultQueue.ProcedureName)),'') & |
                                   Quote & Delimiter & |
                                   Quote & quotedText & Quote & crlf

              OF FolderBasenameExtensionFormat
                 szClipboardText = szClipboardText & |
                                   Quote & ResultQueue.Path & |
                                   CHOOSE(ColumnDelimiter = ColumnDelimited, ALL(' ',arMaxWidth[1] - LEN(ResultQueue.Path)),'') & |
                                   Quote & Delimiter & |
                                   Quote & ResultQueue.Filename & |
                                   CHOOSE(ColumnDelimiter = ColumnDelimited, ALL(' ',arMaxWidth[2] - LEN(ResultQueue.Filename)),'') & |
                                   Quote & Delimiter & |
                                   Quote & ResultQueue.szExtension & |
                                   CHOOSE(ColumnDelimiter = ColumnDelimited, ALL(' ',arMaxWidth[3] - LEN(ResultQueue.szExtension)),'') & |
                                   Quote & Delimiter & |
                                   Quote & |
                                   CHOOSE(ColumnDelimiter = ColumnDelimited, ALL(' ',arMaxWidth[4] - LEN(szLineNo)),'') & |
                                   szLineNo & Quote & Delimiter & |
                                   Quote & ResultQueue.ProcedureName & |
                                   CHOOSE(ColumnDelimiter = ColumnDelimited, ALL(' ',arMaxWidth[5] - LEN(ResultQueue.ProcedureName)),'') & |
                                   Quote & Delimiter & |
                                   Quote & quotedText & Quote & crlf

              OF FilenameFormat
                 szClipboardText = szClipboardText & |
                                   Quote & FormattedFilename & |
                                   CHOOSE(ColumnDelimiter = ColumnDelimited, ALL(' ',arMaxWidth[1] - LEN(FormattedFilename)),'') & |
                                   Quote & Delimiter & |
                                   Quote & |
                                   CHOOSE(ColumnDelimiter = ColumnDelimited, ALL(' ',arMaxWidth[2] - LEN(szLineNo)),'') & |
                                   szLineNo & Quote & Delimiter & |
                                   Quote & ResultQueue.ProcedureName & |
                                   CHOOSE(ColumnDelimiter = ColumnDelimited, ALL(' ',arMaxWidth[3] - LEN(ResultQueue.ProcedureName)),'') & |
                                   Quote & Delimiter & |
                                   Quote & quotedText & Quote & crlf

              OF BasenameExtensionFormat
                 szClipboardText = szClipboardText & |
                                   Quote & ResultQueue.Filename & |
                                   CHOOSE(ColumnDelimiter = ColumnDelimited, ALL(' ',arMaxWidth[1] - LEN(ResultQueue.Filename)),'') & |
                                   Quote & Delimiter & |
                                   Quote & ResultQueue.szExtension & |
                                   CHOOSE(ColumnDelimiter = ColumnDelimited, ALL(' ',arMaxWidth[2] - LEN(ResultQueue.szExtension)),'') & |
                                   Quote & Delimiter & |
                                   Quote & |
                                   CHOOSE(ColumnDelimiter = ColumnDelimited, ALL(' ',arMaxWidth[3] - LEN(szLineNo)),'') & |
                                   szLineNo & Quote & Delimiter & |
                                   Quote & ResultQueue.ProcedureName & |
                                   CHOOSE(ColumnDelimiter = ColumnDelimited, ALL(' ',arMaxWidth[4] - LEN(ResultQueue.ProcedureName)),'') & |
                                   Quote & Delimiter & |
                                   Quote & quotedText & Quote & crlf
            END
      !***OLD_CODE***
            !!!EndRegion

            ASSERT(0,eqDBG & 'DISPOSE quotedText [' & ADDRESS(quotedText) & ']')
            DISPOSE(quotedText)
            quotedText &= NULL

         END
      END

      CASE SaveTo
        OF SaveToClipboard
           SETCLIPBOARD(szClipboardText)
        OF SaveToTextFile
           DosFilename = szTextFilename
           CREATE(DosFile)
           IF NOT ERRORCODE()
              !SEND(DosFile,'FILEBUFFERS=' & nTextLength)
              nTextLength = LEN(szClipboardText)
              OPEN(DosFile)
              IF NOT ERRORCODE()
                 IF nTextLength <= DosBufferSize
                    DosFile.Record = szClipboardText
                    ADD(DosFile,nTextLength)
                 ELSE
                    LOOP WHILE ((nTextLength - pBuffer) + 1) > DosBufferSize
                       pBuffer = 1
                       DosFile.Record = szClipboardText[pBuffer : DosBufferSize-1]
                       ADD(DosFile)
                       pBuffer += DosBufferSize
                    END
                    IF pBuffer < nTextLength
                       DosFile.Record = szClipboardText[pBuffer : nTextLength]
                       ADD(DosFile)
                    END
                 END
                 CLOSE(DosFile)
                 IF bSendToAfterSave = TRUE
                    szSendToFilename = szTextFilename
                    bRetVal = TRUE
                 ELSE
                    bRetVal = FALSE
                 END
              ELSE
              END
           ELSE
           END
        OF SaveToRestorePoint
           CreateRestorePoint(FindStrOptions,szTextFilename)
      END

      ASSERT(0,eqDBG & 'DISPOSE szClipboardText [' & ADDRESS(szClipboardText) & ']')
      DISPOSE(szClipboardText)
      szClipboardText &= NULL
[SOURCE]
PROPERTY:BEGIN
PRIORITY 500
PROPERTY:END
FormatFilename ROUTINE
      CASE FormatOption
        OF FullPathFormat
           FormattedFilename = ResultQueue.Path & ResultQueue.Filename & ResultQueue.szExtension
        OF FolderFilenameFormat
           FormattedFilename = ResultQueue.Filename & ResultQueue.szExtension
        OF FolderBasenameExtensionFormat
           FormattedFilename = ''
        OF FilenameFormat
           FormattedFilename = ResultQueue.Filename & ResultQueue.szExtension
        OF BasenameExtensionFormat
           FormattedFilename = ''
      END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 500
PROPERTY:END
DetermineMaxColumnWidths   ROUTINE
   DATA
RowIndx     LONG
LastRow     LONG
ColumnIndx  LONG
LastColumn  LONG(7)
MaxWidth    &LONG
thisColumn  ANY
szLineNo    CSTRING(12)
nullString  CSTRING('')

   CODE

      LastRow = RECORDS(ResultQueue)
      LOOP RowIndx = 1 TO LastRow
         GET(ResultQueue,RowIndx)
         DO FormatFilename
         szLineNo = CLIP(LEFT(FORMAT(ResultQueue.LineNo,@N_10B)))


         LOOP ColumnIndx = 1 TO LastColumn
            MaxWidth &= arMaxWidth[ColumnIndx]
            EXECUTE ColumnIndx
               thisColumn &= FormattedFilename
               thisColumn &= ResultQueue.Path
               thisColumn &= ResultQueue.Filename
               thisColumn &= ResultQueue.szExtension
               thisColumn &= szLineNo
               thisColumn &= ResultQueue.ProcedureName
               thisColumn &= ResultQueue.Text
            END
            IF LEN(thisColumn) > MaxWidth
               MaxWidth = LEN(thisColumn)
            END
         END

         !!!Region Omitted Code
      OMIT('***OLD_CODE***')
         LOOP ColumnIndx = 1 TO NumberOfColumns
            MaxWidth &= arMaxWidth[ColumnIndx]
            CASE ColumnIndx
              OF 1
                 CASE FormatOption
                   OF FullPathFormat
                      thisColumn &= FormattedFilename
                   OF FolderFilenameFormat
                      thisColumn &= ResultQueue.Path
                   OF FolderBasenameExtensionFormat
                      thisColumn &= ResultQueue.Path
                   OF FilenameFormat
                      thisColumn &= FormattedFilename
                   OF BasenameExtensionFormat
                      thisColumn &= ResultQueue.Filename
                 END
              OF 2
                 CASE FormatOption
                   OF FullPathFormat
                      thisColumn &= szLineNo
                   OF FolderFilenameFormat
                      thisColumn &= FormattedFilename
                   OF FolderBasenameExtensionFormat
                      thisColumn &= ResultQueue.Filename
                   OF FilenameFormat
                      thisColumn &= szLineNo
                   OF BasenameExtensionFormat
                      thisColumn &= ResultQueue.szExtension
                 END
              OF 3
                 CASE FormatOption
                   OF FullPathFormat
                      thisColumn &= ResultQueue.ProcedureName
                   OF FolderFilenameFormat
                      thisColumn &= szLineNo
                   OF FolderBasenameExtensionFormat
                      thisColumn &= ResultQueue.szExtension
                   OF FilenameFormat
                      thisColumn &= ResultQueue.ProcedureName
                   OF BasenameExtensionFormat
                      thisColumn &= szLineNo
                 END
              OF 4
                 CASE FormatOption
                   OF FullPathFormat
                      thisColumn &= ResultQueue.Text
                   OF FolderFilenameFormat
                      thisColumn &= ResultQueue.ProcedureName
                   OF FolderBasenameExtensionFormat
                      thisColumn &= szLineNo
                   OF FilenameFormat
                      thisColumn &= ResultQueue.Text
                   OF BasenameExtensionFormat
                      thisColumn &= ResultQueue.ProcedureName
                 END
              OF 5
                 CASE FormatOption
                   OF FullPathFormat
                      thisColumn &= nullString
                   OF FolderFilenameFormat
                      thisColumn &= ResultQueue.Text
                   OF FolderBasenameExtensionFormat
                      thisColumn &= ResultQueue.ProcedureName
                   OF FilenameFormat
                      thisColumn &= nullString
                   OF BasenameExtensionFormat
                      thisColumn &= ResultQueue.Text
                 END
              OF 6
                 CASE FormatOption
                   OF FullPathFormat
                      thisColumn &= nullString
                   OF FolderFilenameFormat
                      thisColumn &= nullString
                   OF FolderBasenameExtensionFormat
                      thisColumn &= ResultQueue.Text
                   OF FilenameFormat
                      thisColumn &= nullString
                   OF BasenameExtensionFormat
                      thisColumn &= nullString
                 END
            END
            IF LEN(thisColumn) > MaxWidth
               MaxWidth = LEN(thisColumn)
            END
         END
      !***OLD_CODE***
         !!!EndRegion

      END
[END]
EMBED %WindowManagerMethodDataSection
[INSTANCES]
WHEN 'TakeAccepted'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
szDrive              CSTRING(MAXDRIVE+1)
szDir                CSTRING(MAXDIR+1)
szName               CSTRING(MAXFILE+1)
szExtension          CSTRING(MAXEXT+1)
cc                   LONG
[END]
[END]
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME ABC DOSFileLookup
[INSTANCE]
INSTANCE 2
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('SelectFileClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 0

%DOSFileDialogHeader DEFAULT  ('Save as ...')
%DOSFileField FIELD  (szTextFilename)
%DOSInitialDirectory DEFAULT  ('')
%DOSInitialFilename DEFAULT  ('KSS_Results.txt')
%ReturnToOriginalDir LONG  (1)
%AllowLongFilenames LONG  (1)
%DOSFileDialogType DEFAULT  ('Save')
%AllowNoError LONG  (0)
%DefaultOnCancel LONG  (0)
%AllowMultiSelect LONG  (0)
%ActionsToTake DEFAULT  ('')
%AssignToImageControl LONG  (0)
%ImageControl DEFAULT  ('')
%ImageResize LONG  (1)
%DOSVariableMask LONG  (0)
%DOSMaskVariable DEFAULT  ('')
%DOSMaskDesc DEFAULT  ('All Files')
%DOSMask DEFAULT  ('*.*')
%DOSMoreMasks MULTI LONG  ()
%DOSMoreMaskDesc DEPEND %DOSMoreMasks DEFAULT TIMES 0

%DOSMoreMask DEPEND %DOSMoreMasks DEFAULT TIMES 0

%RedisplayWindow LONG  (1)
%UpdateFields MULTI LONG  ()
%UpdateFeq DEPEND %UpdateFields DEFAULT TIMES 0

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('FileLookup2')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('ADOBlob')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

[CALLS]
CorrectForOffScreen
CreateRestorePoint
DoubleQuote
[WINDOW]
Window  WINDOW('Save Results'),AT(,,470,168),FONT('Segoe UI',10),CENTER,GRAY,HLP('SaveResults.htm'), |
          SYSTEM
          PANEL,AT(5,5,460,140),USE(?PANEL1),BEVEL(1),#ORDINAL(1)
          PROMPT('Save to'),AT(10,10),USE(?SaveTo:Prompt),#ORDINAL(2)
          OPTION('Save To'),AT(72,10,223,10),USE(SaveTo),#ORDINAL(3)
            RADIO(' &Clipboard'),AT(75,10),USE(?SaveToClipboard),TRN,VALUE('0'),#ORDINAL(4)
            RADIO(' &Text File'),AT(131,10),USE(?SaveToTextFile),TRN,VALUE('1'),#ORDINAL(5)
            RADIO(' &Re-loadable Result List'),AT(182,10),USE(?SaveToRestorePoint),TRN,VALUE('2'), |
              #ORDINAL(6)
          END
          PROMPT('&Filename'),AT(10,25),USE(?Filename:Prompt),#ORDINAL(8)
          ENTRY(@s255),AT(72,22,354,10),USE(szTextFilename),#ORDINAL(9)
          BUTTON('...'),AT(431,21,14,11),USE(?LookupFile:2),#ORIG(?LookupFile),#SEQ(2),#ORDINAL(10)
          PROMPT('Column Delimiter'),AT(10,40),USE(?ColumnDelimiter:Prompt),#ORDINAL(11)
          OPTION('Delimiter'),AT(72,40,142,10),USE(ColumnDelimiter),#ORDINAL(12)
            RADIO(' Co&mma'),AT(75,40),USE(?CommaFormat),TIP('Comma delimited columns'),TRN, |
              VALUE('0'),#ORDINAL(13)
            RADIO(' T&ab'),AT(130,40),USE(?TabFormat),TIP('Tab delimited columns'),TRN,VALUE('1'), |
              #ORDINAL(14)
            RADIO('Co&lumn'),AT(169,40),USE(?ColumnFormat),TIP('fixed width columns'),TRN, |
              VALUE('2'),#ORDINAL(15)
          END
          CHECK(' &Quote Strings'),AT(10,55),USE(bQuoteStrings),TIP('Places double quot' & |
            'ation marks around strings when checked'),#ORDINAL(16)
          CHECK(' Save Filename'),AT(10,70),USE(bSaveFilename),#ORDINAL(17)
          PROMPT('Show File as'),AT(10,85),USE(?FileNameFormat:Prompt),DISABLE,#ORDINAL(18)
          OPTION('Formatting'),AT(72,85,388,10),USE(FormatOption),DISABLE,#ORDINAL(19)
            RADIO(' F&ullpath'),AT(75,85),USE(?FullPathFormat),TRN,VALUE('0'),#ORDINAL(20)
            RADIO(' Fol&der|Filename'),AT(126,85),USE(?FolderFilenameFormat),TRN,VALUE('1'), |
              #ORDINAL(21)
            RADIO(' Fold&er|Basename|Extension'),AT(201,85),USE(?BasenameExtensionFormat), |
              TRN,VALUE('2'),#ORDINAL(22)
            RADIO(' File&name'),AT(315,85),USE(?FilenameFormat),TRN,VALUE('3'),#ORDINAL(23)
            RADIO(' &Basename|Extension'),AT(369,85),USE(?BasenameExtensionFormat:2),TRN,VALUE('4'), |
              #ORDINAL(24)
          END
          CHECK(' Save Line Number'),AT(10,100),USE(bSaveLineNumber),#ORDINAL(25)
          CHECK(' Save Location'),AT(10,115),USE(bSaveLocation),#ORDINAL(26)
          CHECK(' Save Text'),AT(10,130),USE(bSaveText),#ORDINAL(27)
          CHECK(' Send To command after save'),AT(246,152),USE(bSendToAfterSave),#ORDINAL(7)
          BUTTON('&Save'),AT(370,150,45,14),USE(?cmdSave),#ORDINAL(28)
          BUTTON('&Cancel'),AT(419,150,45,14),USE(?cmdCancel),#ORDINAL(29)
        END

[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2011/12/16' ' 7:20:06'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME CheckRegistration
PROTOTYPE '(*CSTRING szRegistrant, *LONG ExpiryDate),LONG'
PARAMETERS '(*CSTRING szRegistrant,*LONG ExpiryDate)'
[COMMON]
FROM ABC Source
MODIFIED '2019/02/18' '14:52:38'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
RetVal        LONG
szSubKey      CSTRING(256)
szValueName   CSTRING('License')
hDevuna       ULONG
hKeystone     ULONG
BinaryLicense STRING(36)
bLicense      BYTE,DIM(36),OVER(BinaryLicense)
pType         ULONG
pData         ULONG
sMask         STRING('<048h,0DCh,09Ch,060h,026h,08Ah,011h,0E1h,03Dh,06Ch,005h,0B1h,09Bh,071h,04Ah,0E1h,048h,0DCh,09Ch,060h,026h,08Ah,011h,0E1h,03Dh,06Ch,005h,0B1h,09Bh,071h,04Ah,0E1h,048h,0DCh,09Ch,060h>')
bMask         BYTE,DIM(36),OVER(sMask)
i             LONG
lDate         LONG
sDate         STRING(4),OVER(lDate)
crc           LONG
sCrc          STRING(4),OVER(crc)
cc            LONG
szError       CSTRING(256)
szErrorFunc   CSTRING(64)
pBuffer       LONG
cbBuffer      LONG         !size of username buffer
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
      szSubKey = 'Software\Devuna\KSS'
      RetVal = kcr_RegOpenKeyEx(HKEY_CURRENT_USER,szSubKey,0,KEY_QUERY_VALUE,hDevuna)
      IF RetVal = ERROR_SUCCESS
         pType = REG_BINARY
         pData = SIZE(BinaryLicense)
         RetVal = kcr_RegQueryValueEx(hDevuna,szValueName,0,pType,ADDRESS(BinaryLicense),pData)
         IF RetVal = ERROR_SUCCESS
            LOOP i = 1 TO 36
               bLicense[i] = BXOR(bLicense[i],bMask[i])
            END
            sCrc = BinaryLicense[33 : 36]
            cc   = kcr_crc32(ADDRESS(BinaryLicense),32,0)
            IF crc = cc
               sDate = BinaryLicense[1 : 4]
               szRegistrant = BinaryLicense[5 : 32]
               ExpiryDate   = lDate
            ELSE
               MESSAGE('License is corrupted','Bad License',ICON:HAND)
               szRegistrant = UNREGISTERED_COPY
               ExpiryDate = TODAY()-1
               RetVal = Level:Fatal
            END
         ELSE
            szErrorFunc = 'RegQueryValueEx'
            DO HandleError
         END
         RetVal = kcr_RegCloseKey(hDevuna)

      ELSIF RetVal = ERROR_FILE_NOT_FOUND
         RetVal = kcr_RegCreateKeyEx(HKEY_CURRENT_USER,szSubKey,0,0,REG_OPTION_NON_VOLATILE,KEY_ALL_ACCESS,0,hDevuna,0)
         IF RetVal = ERROR_SUCCESS

            !see if registered under keystone computer resources
            szSubKey = 'Software\Keystone Computer Resources\KSS'
            RetVal = kcr_RegOpenKeyEx(HKEY_CURRENT_USER,szSubKey,0,KEY_QUERY_VALUE,hKeystone)
            IF RetVal = ERROR_SUCCESS
               pType = REG_BINARY
               pData = SIZE(BinaryLicense)
               RetVal = kcr_RegQueryValueEx(hKeystone,szValueName,0,pType,ADDRESS(BinaryLicense),pData)
               IF RetVal = ERROR_SUCCESS
                  RetVal = kcr_RegSetValueEx(hDevuna,szValueName,0,REG_BINARY,ADDRESS(BinaryLicense),SIZE(BinaryLicense))
                  IF RetVal = ERROR_SUCCESS
                     LOOP i = 1 TO 36
                        bLicense[i] = BXOR(bLicense[i],bMask[i])
                     END
                     sCrc = BinaryLicense[33 : 36]
                     cc   = kcr_crc32(ADDRESS(BinaryLicense),32,0)
                     IF crc = cc
                        sDate = BinaryLicense[1 : 4]
                        szRegistrant = BinaryLicense[5 : 32]
                        ExpiryDate   = lDate
                     ELSE
                        MESSAGE('License is corrupted','Bad License',ICON:HAND)
                        szRegistrant = UNREGISTERED_COPY
                        ExpiryDate = TODAY()-1
                        RetVal = Level:Fatal
                     END
                  ELSE
                     szErrorFunc = 'RegSetValueEx'
                     DO HandleError
                  END
               ELSE
                  szErrorFunc = 'RegQueryValueEx'
                  DO HandleError
               END
               RetVal = kcr_RegCloseKey(hKeystone)

            ELSE  !not registered
               lDate = TODAY() + 30
               BinaryLicense = sDate & UNREGISTERED_COPY
               crc = kcr_crc32(ADDRESS(BinaryLicense),32,0)
               BinaryLicense = sDate & UNREGISTERED_COPY & sCrc
               LOOP i = 1 TO 36
                  bLicense[i] = BXOR(bLicense[i],bMask[i])
               END
               RetVal = kcr_RegSetValueEx(hDevuna,szValueName,0,REG_BINARY,ADDRESS(BinaryLicense),SIZE(BinaryLicense))
               IF RetVal = ERROR_SUCCESS
                  szRegistrant = UNREGISTERED_COPY
                  ExpiryDate   = lDate
               ELSE
                  szErrorFunc = 'RegSetValueEx'
                  DO HandleError
               END
            END
            RetVal = kcr_RegCloseKey(hDevuna)
         ELSE
            szErrorFunc = 'RegCreateKeyEx'
            DO HandleError
            RetVal = Level:Fatal
         END
      ELSE
         szErrorFunc = 'RegOpenKeyEx'
         DO HandleError
         RetVal = Level:Fatal
      END
      RETURN RetVal
[END]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
HandleError    ROUTINE
   cc = kcr_FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM,0,RetVal,LANG_USER_DEFAULT,szError,SIZE(szError),0)
   MESSAGE(szErrorFunc & ' returned the following error:|' & szError,'Unexpected Error',ICON:HAND)
   EXIT
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[PROCEDURE]
NAME RegisterProduct
PROTOTYPE '(),LONG'
[COMMON]
FROM ABC Window
MODIFIED '2014/03/04' '10:20:23'
[DATA]
[SCREENCONTROLS]
! PROMPT('Registration Key:'),USE(?RegistrationKey:Prompt)
! ENTRY(@s72),USE(RegistrationKey)
[REPORTCONTROLS]
! STRING(@s72),USE(RegistrationKey)
RegistrationKey          STRING(72)
!!> GUID('d1560c2e-2cce-4641-9b87-471b28091c9a'),PROMPT('Registration Key:'),HEADER('Registration Key'),PICTURE(@s72),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('Return Code:'),USE(?ReturnCode:Prompt)
! ENTRY(@n-14),USE(ReturnCode),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(ReturnCode),RIGHT(1)
ReturnCode               LONG
!!> GUID('bbcef2d9-760d-471d-82e5-4f59ee57bea2'),INITIAL('Level:Cancel'),PROMPT('Return Code:'),HEADER('Return Code'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default', 'WindowToolbar')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('WindowManager')
WHEN  ('WindowToolbar') ('ToolbarClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(),BYTE,PROC,DERIVED', 'Kill {19}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeAccepted {11}PROCEDURE(),BYTE,PROC,DERIVED')

%ReturnValue FIELD  (ReturnCode)
%WindowOperationMode DEFAULT  ('Use WINDOW setting')
%INISaveWindow LONG  (1)
%ProcedureDisableEnhanceFocus LONG  (0)
%ProcedureUseEnterInsteadTabOverride LONG  (0)
%WindowUseEnterInsteadTab LONG  (1)
%ProcedureUseEnterInsteadTabExcludeListCombo LONG  (0)
%ProcedureUseEnterInsteadTabEnableNextTabStop LONG  (0)
%ProcedureUseEnterInsteadTabExcludeG LONG  (1)
%WindowUseEnterInsteadTabExclude MULTI DEFAULT  ()
%GlobalObject DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('NO')
WHEN  ('WindowToolbar') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ThisWindow')
WHEN  ('WindowToolbar') ('Toolbar')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (0)
WHEN  ('WindowToolbar') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%WindowStyles MULTI LONG  ()
%WindowStyleFontName DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontSize DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontStyle DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontColor DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontCharSet DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStylePicture DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleOtherListboxes MULTI DEFAULT  ()
%ProcedureAutoBindFields MULTI LONG  ()
%ProcedureAutoBindField DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindFieldTPL DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindProcedures MULTI LONG  ()
%ProcedureAutoBindProcedure DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindProcedureTPL DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindFieldsIgnored MULTI LONG  ()
%ProcedureAutoBindFieldIgnored DEPEND %ProcedureAutoBindFieldsIgnored DEFAULT TIMES 0

%ProcedureAutoBindProceduresIgnored MULTI LONG  ()
%ProcedureAutoBindProcedureIgnored DEPEND %ProcedureAutoBindProceduresIgnored DEFAULT TIMES 0

%ProcedureAutoBindValidToAddField LONG  (0)
%ProcedureUserBindFields MULTI LONG  ()
%ProcedureUserBindField DEPEND %ProcedureUserBindFields FIELD TIMES 0

%ProcedureAutoBindFieldIgnore DEPEND %ProcedureAutoBindFields LONG TIMES 0

%ProcedureUserBindProcedures MULTI LONG  ()
%ProcedureUserBindProcedure DEPEND %ProcedureUserBindProcedures PROCEDURE TIMES 0

%ProcedureAutoBindProcedureIgnore DEPEND %ProcedureAutoBindProcedures LONG TIMES 0

%ProcedureUserBindExpressions MULTI LONG  ()
%ProcedureUserBindExpressionName DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ProcedureUserBindExpression DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ExtUITabIcon DEPEND %Control DEFAULT TIMES 0

%ExtUITabStyleOverrideGlobal DEPEND %Control LONG TIMES 0

%ExtUITabStyle DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('Default')
WHEN  ('?RegistrationKey') ('Default')

%ButtonAction DEPEND %Control DEFAULT TIMES 4
WHEN  ('') ('No Special Action')
WHEN  ('?CancelButton') ('No Special Action')
WHEN  ('?RegistrationKey') ('No Special Action')
WHEN  ('?cmdRegister') ('No Special Action')

%ButtonRunName DEPEND %Control DEFAULT TIMES 0

%ButtonRunParameters DEPEND %Control DEFAULT TIMES 0

%ButtonProcedure DEPEND %Control PROCEDURE TIMES 0

%ButtonThread DEPEND %Control LONG TIMES 0

%ButtonThreadStack DEPEND %Control DEFAULT TIMES 4
WHEN  ('') ('25000')
WHEN  ('?CancelButton') ('25000')
WHEN  ('?RegistrationKey') ('25000')
WHEN  ('?cmdRegister') ('25000')

%ButtonParameters DEPEND %Control DEFAULT TIMES 0

%ButtonReturnValueAssignment DEPEND %Control FIELD TIMES 0

%ButtonReturnValueReferenceAssign DEPEND %Control LONG TIMES 0

%ButtonRequest DEPEND %Control DEFAULT TIMES 4
WHEN  ('') ('None')
WHEN  ('?CancelButton') ('None')
WHEN  ('?RegistrationKey') ('None')
WHEN  ('?cmdRegister') ('None')

%ButtonThreadParameters DEPEND %Control DEFAULT TIMES 0

%ButtonThreadReturnValueAssignment DEPEND %Control FIELD TIMES 0

%PreLookupKey DEPEND %Control KEY TIMES 0

%PreLookupField DEPEND %Control COMPONENT TIMES 0

%PreLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PreLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupKey DEPEND %Control KEY TIMES 0

%PostLookupField DEPEND %Control COMPONENT TIMES 0

%PostLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupDuringValidate DEPEND %Control LONG TIMES 2
WHEN  ('') (1)
WHEN  ('?RegistrationKey') (1)

%LookupAssign DEPEND %Control MULTI LONG TIMES 0

%MoreTarget DEPEND %LookupAssign FIELD TIMES 0

%MoreField DEPEND %LookupAssign DEFAULT TIMES 0

%ForceWindowRefresh DEPEND %Control LONG TIMES 0

%CheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%CheckedAssignVariable DEPEND %CheckedAssigns FIELD TIMES 0

%CheckedAssignValue DEPEND %CheckedAssigns DEFAULT TIMES 0

%CheckedHides DEPEND %Control MULTI LONG TIMES 0

%CheckedControl DEPEND %CheckedHides DEFAULT TIMES 0

%CheckedControlAction DEPEND %CheckedHides DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?RegistrationKey')TIMES 0

%CheckedEnables DEPEND %Control MULTI LONG TIMES 0

%CheckedControl1 DEPEND %CheckedEnables DEFAULT TIMES 0

%CheckedControl1Action DEPEND %CheckedEnables DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?RegistrationKey')TIMES 0

%UncheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%UncheckedAssignVariable DEPEND %UncheckedAssigns FIELD TIMES 0

%UncheckedAssignValue DEPEND %UncheckedAssigns DEFAULT TIMES 0

%UnCheckedHides DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl DEPEND %UnCheckedHides DEFAULT TIMES 0

%UnCheckedControlAction DEPEND %UnCheckedHides DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?RegistrationKey')TIMES 0

%UnCheckedEnables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl1 DEPEND %UnCheckedEnables DEFAULT TIMES 0

%UnCheckedControl1Action DEPEND %UnCheckedEnables DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?RegistrationKey')TIMES 0

%CheckedDisables DEPEND %Control MULTI LONG TIMES 0

%CheckedDisableControl DEPEND %CheckedDisables DEFAULT TIMES 0

%CheckedDisableControlAction DEPEND %CheckedDisables DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?RegistrationKey')TIMES 0

%UnCheckedDisables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedDisableControl DEPEND %UnCheckedDisables DEFAULT TIMES 0

%UnCheckedDisableControlAction DEPEND %UnCheckedDisables DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?RegistrationKey')TIMES 0

%ProcedureOneInstance LONG  (0)
%FieldGradientColorType DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('Off')
WHEN  ('?PANEL1') ('Off')

%FieldGradientColorTypeVariable DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('')
WHEN  ('?PANEL1') ('')

%FieldGradientColorTypeIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?PANEL1') (0)

%FieldGradientColorFrom DEPEND %Control LONG TIMES 2
WHEN  ('') (-1)
WHEN  ('?PANEL1') (-1)

%FieldGradientColorFromVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorFromIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?PANEL1') (0)

%FieldGradientColorTo DEPEND %Control LONG TIMES 2
WHEN  ('') (-1)
WHEN  ('?PANEL1') (-1)

%FieldGradientColorToVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorToIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?PANEL1') (0)

%PreserveVarsLoc MULTI LONG  ()
%PreserveVarLoc DEPEND %PreserveVarsLoc DEFAULT TIMES 0

%ActiveImageEnable DEPEND %Control LONG TIMES 0

%AIObjectName DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('AIBtn0')

%AIEnableMimicControl DEPEND %Control LONG TIMES 1
WHEN  ('') (1)

%AIMimicControl DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('?cmdRegister')

%AIImgRound DEPEND %Control LONG TIMES 0

%AIOverrideImg DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgVariable DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIDisableImg DEPEND %Control DEFAULT TIMES 0

%AIDisableImgVariable DEPEND %Control DEFAULT TIMES 0

%AIDisableImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIHotImg DEPEND %Control DEFAULT TIMES 0

%AIHotImgVariable DEPEND %Control DEFAULT TIMES 0

%AIHotImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIPressedImg DEPEND %Control DEFAULT TIMES 0

%AIPressedImgVariable DEPEND %Control DEFAULT TIMES 0

%AIPressedImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

[EMBED]
EMBED %WindowManagerMethodDataSection
[INSTANCES]
WHEN 'TakeAccepted'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
i              BYTE
j              BYTE
hiNibble       BYTE
loNibble       BYTE
szSubKey       CSTRING('SOFTWARE\Devuna\KSS')
szValueName    CSTRING('License')
hDevuna        ULONG
BinaryLicense  STRING(36)
bLicense       BYTE,DIM(36),OVER(BinaryLicense)
pType          ULONG
pData          ULONG
sMask          STRING('<048h,0DCh,09Ch,060h,026h,08Ah,011h,0E1h,03Dh,06Ch,005h,0B1h,09Bh,071h,04Ah,0E1h,048h,0DCh,09Ch,060h,026h,08Ah,011h,0E1h,03Dh,06Ch,005h,0B1h,09Bh,071h,04Ah,0E1h,048h,0DCh,09Ch,060h>')
bMask          BYTE,DIM(36),OVER(sMask)
[END]
[END]
[END]
EMBED %ControlEventHandling
[INSTANCES]
WHEN '?cmdRegister'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
IF LEN(CLIP(RegistrationKey)) = 72
   LOOP i = 1 TO 36
      j = ((i-1) * 2) + 1
      CASE RegistrationKey[j]
        OF '0'
           hiNibble = 0
        OF '1'
           hiNibble = 1
        OF '2'
           hiNibble = 2
        OF '3'
           hiNibble = 3
        OF '4'
           hiNibble = 4
        OF '5'
           hiNibble = 5
        OF '6'
           hiNibble = 6
        OF '7'
           hiNibble = 7
        OF '8'
           hiNibble = 8
        OF '9'
           hiNibble = 9
        OF 'A'
           hiNibble = 10
        OF 'B'
           hiNibble = 11
        OF 'C'
           hiNibble = 12
        OF 'D'
           hiNibble = 13
        OF 'E'
           hiNibble = 14
        OF 'F'
           hiNibble = 15
      END
      CASE RegistrationKey[j+1]
        OF '0'
           loNibble = 0
        OF '1'
           loNibble = 1
        OF '2'
           loNibble = 2
        OF '3'
           loNibble = 3
        OF '4'
           loNibble = 4
        OF '5'
           loNibble = 5
        OF '6'
           loNibble = 6
        OF '7'
           loNibble = 7
        OF '8'
           loNibble = 8
        OF '9'
           loNibble = 9
        OF 'A'
           loNibble = 10
        OF 'B'
           loNibble = 11
        OF 'C'
           loNibble = 12
        OF 'D'
           loNibble = 13
        OF 'E'
           loNibble = 14
        OF 'F'
           loNibble = 15
      END
      bLicense[i] = BOR(BSHIFT(hiNibble,4),loNibble)
   END

   RetVal = kcr_RegOpenKeyEx(HKEY_CURRENT_USER,szSubKey,0,KEY_SET_VALUE,hDevuna)
   IF RetVal = ERROR_SUCCESS
      RetVal = kcr_RegSetValueEx(hDevuna,szValueName,0,REG_BINARY,ADDRESS(BinaryLicense),SIZE(BinaryLicense))
      IF RetVal = ERROR_SUCCESS
         ReturnCode = Level:Benign
      ELSE
         szErrorFunc = 'RegSetValueEx'
         DO HandleError
      END
      RetVal = kcr_RegCloseKey(hDevuna)
   ELSE
      szErrorFunc = 'RegOpenKeyEx'
      DO HandleError
   END

ELSE
END
POST(EVENT:CloseWindow)
[END]
[END]
WHEN '?CancelButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
POST(EVENT:CloseWindow)
[END]
[END]
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
RetVal               LONG
szErrorFunc          CSTRING(64)
[END]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4000
PROPERTY:END
HandleError    ROUTINE
   DATA
szError       CSTRING(256)
cc            LONG

   CODE
      cc = kcr_FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM,0,RetVal,LANG_USER_DEFAULT,szError,SIZE(szError),0)
      MESSAGE(szErrorFunc & ' returned the following error:|' & szError,'Unexpected Error',ICON:HAND)
   EXIT
[END]
EMBED %WindowManagerMethodCodeSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8400
PROPERTY:END
CorrectForOffscreen(Window)
[END]
[END]
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[CALLS]
CorrectForOffScreen
[WINDOW]
Window  WINDOW('Product Registration'),AT(,,177,94),FONT('Segoe UI',10),CENTER,GRAY,SYSTEM
          BUTTON('&Register'),AT(77,75,45,14),USE(?cmdRegister),DEFAULT,#ORDINAL(1)
          BUTTON('&Cancel'),AT(127,75,45,14),USE(?CancelButton),#ORDINAL(2)
          PROMPT('Paste your Registration Key into the box below'),AT(10,10),USE(?RegistrationKey:Prompt), |
            #ORDINAL(3)
          TEXT,AT(24,25,128,34),USE(RegistrationKey),UPR,#ORDINAL(4)
          PANEL,AT(5,5,167,65),USE(?PANEL1),BEVEL(1),#ORDINAL(10000)
        END

[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2011/12/20' '13:34:14'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME MRUContextMenu
PROTOTYPE '( MRUQueueType MRUQueue, LONG feqControl, STRING strDefault)'
PARAMETERS '( MRUQueueType MRUQueue, LONG feqControl, STRING strDefault)'
[COMMON]
FROM ABC Source
MODIFIED '2011/12/24' ' 7:07:53'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
      UPDATE()
      GET(MRUQueue,CHOICE(feqControl))
      IF strDefault <> '' AND UPPER(MRUQueue.szValue) = UPPER(strDefault)
         !no popup for default value
      ELSE
         szPopUpMenu = 'Cut|Copy|Paste|Delete'
         EXECUTE POPUP(szPopUpMenu)
            BEGIN
               SETCLIPBOARD(MRUQueue.szValue)
               DELETE(MRUQueue)
               feqControl{PROP:From} = MRUQueue
               GET(MRUQueue,1)
               IF ERRORCODE()
                  CHANGE(feqControl,'')
               ELSE
                  CHANGE(feqControl,MRUQueue.szValue)
                  (feqControl{PROP:ListFeq}){PROP:Selected} = POINTER(MRUQueue)
               END
               DISPLAY(feqControl)
            END
            BEGIN
               SETCLIPBOARD(MRUQueue.szValue)
            END
            BEGIN
               szClipboard = CLIPBOARD()
               CHANGE(feqControl,szClipboard)
               DISPLAY(feqControl)
               IF szClipboard <> ''
                  DO AddCommand
               END
            END
            BEGIN
               DELETE(MRUQueue)
               feqControl{PROP:From} = MRUQueue
               GET(MRUQueue,1)
               IF ERRORCODE()
                  CHANGE(feqControl,'')
               ELSE
                  CHANGE(feqControl,MRUQueue.szValue)
                  (feqControl{PROP:ListFeq}){PROP:Selected} = POINTER(MRUQueue)
               END
               DISPLAY(feqControl)
            END
         END
      END

[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
szClipboard   LIKE(MRUQueueType.szValue)
szPopUpMenu   CSTRING(22)
[END]
EMBED %LocalProcedures
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
AddCommand    ROUTINE
   DATA
i     LONG
j     LONG

   CODE
      j = RECORDS(MRUQueue)
      LOOP i = 1 TO j
         GET(MRUQueue,i)
         IF MRUQueue.szValue = szClipboard
            BREAK
         END
      END
      IF i > j
         IF j = MAXMRU
            GET(MRUQueue,j)
            DELETE(MRUQueue)
         END
         MRUQueue.szValue = szClipboard
         ADD(MRUQueue,1)
      ELSE
         DELETE(MRUQueue)
         MRUQueue.szValue = szClipboard
         ADD(MRUQueue,1)
      END
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2011/12/23' ' 8:07:55'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME GetRunningCopyCount
PROTOTYPE '(),LONG'
PARAMETERS '()'
[COMMON]
FROM ABC Source
MODIFIED '2014/03/04' '10:20:50'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
aProcesses        DWORD,DIM(1024)
cbNeeded          DWORD
cProcesses        DWORD
i                 UNSIGNED
lCopyCount        LONG
szProcessName     CSTRING(MAX_PATH)
hProcess          HANDLE
hMod              HMODULE
thisProcessId     DWORD
hwnd              HWND
dwPID             DWORD
szWindowCaption   CSTRING('Kwik Source Search')
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  thisProcessId = kcr_GetCurrentProcessId()
  lCopyCount = 0
  IF kcr_EnumProcesses( aProcesses[1], SIZE(aProcesses), cbNeeded )
     cProcesses = cbNeeded / 4
     LOOP i = 1 TO cProcesses
       IF aProcesses[i] <> 0
          szProcessName = '<<unknown>'
          hProcess = kcr_OpenProcess(BOR(PROCESS_QUERY_INFORMATION,PROCESS_VM_READ),FALSE,aProcesses[i])
          ! Get the process name.
          IF hProcess <> 0
             IF kcr_EnumProcessModules( hProcess, hMod, SIZE(hMod), cbNeeded)
                kcr_GetModuleBaseName( hProcess, hMod, szProcessName, SIZE(szProcessName))
                IF UPPER(szProcessName) = 'KSS.EXE'
                   IF aProcesses[i] <> thisProcessId
                      hwnd = kcr_FindWindowEx(0, 0, 0, szWindowCaption)
                      IF hwnd = 0
                         !Kaspersky Anti-Virus may be running
                      ELSE
                         kcr_GetWindowThreadProcessId(hwnd, dwPID)
                         IF dwPID <> thisProcessId
                            kcr_ShowWindowAsync(hwnd, SW_RESTORE)
                            kcr_SetForegroundWindow(hwnd)
                         ELSE
                         END
                         lCopyCount += 1
                      END
                   END
!                   lCopyCount += 1
                END
             END
             kcr_CloseHandle(hProcess)
          END
       END
     END
  ELSE
  END
  RETURN lCopyCount
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[PROCEDURE]
NAME ApplicationIsRunning
PROTOTYPE '(),LONG'
PARAMETERS '()'
GLOBAL
[COMMON]
FROM ABC Source
MODIFIED '2015/05/15' '20:24:05'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
aProcesses              DWORD,DIM(1024)
cbNeeded                DWORD
cProcesses              DWORD
i                       UNSIGNED
lCopyCount              LONG
szProcessName           CSTRING(MAX_PATH)
hProcess                HANDLE
hMod                    HMODULE
thisProcessId           DWORD
hwnd                    HWND
dwPID                   DWORD
szWindowCaption         CSTRING('Kwik Source Search')
AlreadyRunning          BOOL(FALSE)
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  thisProcessId = kcr_GetCurrentProcessId()
  IF kcr_EnumProcesses( aProcesses[1], SIZE(aProcesses), cbNeeded )
     cProcesses = cbNeeded / 4
     LOOP i = 1 TO cProcesses
       IF aProcesses[i] <> 0
          szProcessName = '<<unknown>'
          hProcess = kcr_OpenProcess(BOR(PROCESS_QUERY_INFORMATION,PROCESS_VM_READ),FALSE,aProcesses[i])
          ! Get the process name.
          IF hProcess <> 0
             IF kcr_EnumProcessModules( hProcess, hMod, SIZE(hMod), cbNeeded)
                kcr_GetModuleBaseName( hProcess, hMod, szProcessName, SIZE(szProcessName))
                IF UPPER(szProcessName) = 'KSS.EXE'
                   IF aProcesses[i] <> thisProcessId
                      hwnd = kcr_FindWindowEx(0, 0, 0, szWindowCaption)
                      IF hwnd = 0
                         !maybe Kaspersky anti-virus is running so keep looking
                      ELSE
                         kcr_GetWindowThreadProcessId(hwnd, dwPID)
                         IF dwPID <> thisProcessId
                            kcr_ShowWindowAsync(hwnd, SW_RESTORE)
                            kcr_SetForegroundWindow(hwnd)
                            AlreadyRunning = TRUE
                         END
                      END
                   END
                END
             END
             kcr_CloseHandle(hProcess)
             IF AlreadyRunning = TRUE
                BREAK
             END
          END
       END
     END
  ELSE
  END
  RETURN AlreadyRunning
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2011/12/28' ' 8:43:17'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME LoadLexerProperties
PROTOTYPE '(csciControl sciControl, STRING lexer),LONG,PROC'
PARAMETERS '(csciControl sciControl, STRING lexer)'
[COMMON]
FROM ABC Source
MODIFIED '2014/03/04' '10:22:11'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
returnCode           LONG(Level:Fatal)

szAAFileName         CSTRING(260),STATIC
A_A                  FILE,DRIVER('ASCII'),NAME(szAAFileName),PRE(AA)
Record                  RECORD
Buffer                     STRING(1024)
                        END
                     END
szBuffer             CSTRING(1025)

keywordQueue         QUEUE,PRE(kwq)
keywords                CSTRING(1025)
                     END
szKeywords           &CSTRING

styleNumber          LONG
thisToken            CSTRING(33)
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  szAAFilename = svSpecialFolder.GetDir(SV:CSIDL_APPDATA, 'Devuna' & '\' & 'KSS') & '\' & lexer & '.properties'
  OPEN(A_A,ReadOnly+DenyWrite)
  IF ERRORCODE()
     szAAFilename = lexer & '.properties'
     OPEN(A_A,ReadOnly+DenyWrite)
  END
  IF ~ERRORCODE()
     SET(A_A)
     NEXT(A_A)
     LOOP UNTIL ERRORCODE()
        szBuffer = CLIP(LEFT(A_A.Buffer))
        IF szBuffer <> '' AND szBuffer[1] = '['
           CASE UPPER(szBuffer[1 : 7])
             OF '[FILEPA'
                DO ProcessFilePatterns
             OF '[OPTION'
                DO ProcessOptions
             OF '[KEYWOR'
                DO ProcessKeywords
             OF '[STYLES'
                DO ProcessStyles
           ELSE
                NEXT(A_A)
           END
        ELSE
           NEXT(A_A)
        END
     END
     CLOSE(A_A)
     returnCode = Level:Benign
  ELSE
     MESSAGE('Unexpected error opening ' & szAAFilename & '|' & ERROR(),'Load Lexer Properties',ICON:HAND)
  END
  RETURN returnCode
[END]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
ProcessFilePatterns  ROUTINE
   NEXT(A_A)
   LOOP UNTIL ERRORCODE()
        szBuffer = CLIP(LEFT(A_A.Buffer))
        IF szBuffer <> '' AND szBuffer[1] <> '!'
           IF szBuffer[1] = '['
              BREAK
           ELSE
              !pick out the file extensions for this lexer
           END
        END
        NEXT(A_A)
   END
   EXIT

ProcessOptions ROUTINE
   DATA
szOption       CSTRING(256)
szOptionValue  CSTRING(256)
p              LONG
n              LONG

   CODE
      NEXT(A_A)
      LOOP UNTIL ERRORCODE()
           szBuffer = CLIP(LEFT(A_A.Buffer))
           IF szBuffer <> '' AND szBuffer[1] <> '!'
              IF szBuffer[1] = '['
                 BREAK
              ELSE
                 n = INSTRING(';',szBuffer)
                 IF n = 0
                    n = LEN(szBuffer)
                 ELSE
                    n -= 1
                 END
                 p = INSTRING('=',szBuffer)
                 IF p
                    !set properties for this lexer
                    szOption = LOWER(CLIP(szBuffer[1 : p-1]))
                    szOptionValue = szBuffer[p+1 : n]
                    CASE szOption
                    OF 'word.characters'
                       sciControl.SetWordChars(szOptionValue)
                    ELSE
                       sciControl.SetProperty(szOption,szOptionValue)
                    END
                 END
              END
           END
           NEXT(A_A)
      END
   EXIT

ProcessKeywords      ROUTINE
   DATA
i              LONG
j              LONG
bytesNeeded    LONG
setNumber      LONG

   CODE
   !pick out set number
   setNumber = szBuffer[10 : LEN(szBuffer)-1]
   NEXT(A_A)
   FREE(keywordQueue)
   LOOP UNTIL ERRORCODE()
        szBuffer = CLIP(LEFT(A_A.Buffer))
        IF szBuffer <> '' AND szBuffer[1] <> '!'
           IF szBuffer[1] = '['
              BREAK
           ELSE
              !add to queue
              keywordQueue.keywords = szBuffer
              ADD(keywordQueue)
           END
        END
        NEXT(A_A)
   END
   !determine length needed for cstring
   bytesNeeded = 0
   j = RECORDS(keywordQueue)
   IF j > 0
      LOOP i = 1 TO j
         GET(keywordQueue,i)
         bytesNeeded += LEN(keywordQueue.keywords)
      END
      bytesNeeded += j+1

      !allocate cstring
      szKeywords &= NEW CSTRING(bytesNeeded)
      LOOP i = 1 TO j
         GET(keywordQueue,i)
         szKeywords = szKeywords & keywordQueue.keywords & ' '
      END
      szKeywords[LEN(szKeywords)] = '<0>'

      !assign to keyword list
      sciControl.SetKeyWords(setNumber,szKeywords)
      DISPOSE(szKeywords)
      szKeywords &= NULL
   END
   EXIT

ProcessStyles        ROUTINE
   DATA
pDelimiter     LONG
pStart         LONG
firstStyle     BOOL(TRUE)

   CODE
   NEXT(A_A)
   LOOP UNTIL ERRORCODE()
        szBuffer = CLIP(LEFT(A_A.Buffer))
        IF szBuffer <> '' AND szBuffer[1] <> '!'
           IF szBuffer[1] = '['
              BREAK
           ELSE
              pDelimiter = INSTRING('=',szBuffer)
              IF pDelimiter
                 styleNumber = szBuffer[6 : pDelimiter-1]
                 LOOP WHILE pDelimiter < LEN(szBuffer)
                      pStart = pDelimiter+1
                      pDelimiter = INSTRING(',',szBuffer,,pStart)
                      IF pDelimiter
                         thisToken = szBuffer[pStart : pDelimiter-1]
                         DO ProcessToken
                      ELSE
                         thisToken = szBuffer[pStart : LEN(szBuffer)]
                         DO ProcessToken
                         BREAK
                      END
                 END
                 IF firstStyle
                    IF styleNumber = 32
                       SciControl.StyleClearAll()
                    END
                    firstStyle = FALSE
                 END
              ELSE
                 BREAK
              END
              !style0=font:Times New Roman,fontsize:11,fore:#000000
              !process the style
           END
        END
        NEXT(A_A)
   END
   EXIT

ProcessToken   ROUTINE
   DATA
nSize    LONG
szFont   CSTRING(33)
lRed     LONG
lGreen   LONG
lBlue    LONG
lColor   LONG
caseOpt  LONG

   CODE
!font:,size:,bold,italic,underline,fore:,back:,eolfilled,case:,hide,hotSpot
   CASE UPPER(thisToken[1 : 4])
     OF 'FONT'
        szFont = thisToken[6 : LEN(thisToken)]
        sciControl.StyleSetFont(styleNumber,szFont)
     OF 'SIZE'
        nSize = thisToken[6 : LEN(thisToken)]
        sciControl.StyleSetSize(styleNumber,nSize)
     OF 'BOLD'
        sciControl.StyleSetBold(styleNumber,TRUE)
     OF 'ITAL'
        sciControl.StyleSetItalic(styleNumber,TRUE)
     OF 'FORE'
        lRed   = EVALUATE('0' & thisToken[7  :  8] & 'h')
        lGreen = EVALUATE('0' & thisToken[9  : 10] & 'h')
        lblue  = EVALUATE('0' & thisToken[11 : 12] & 'h')
        sciControl.StyleSetFore(styleNumber,colourRGB(lRed,lGreen,lBlue))
     OF 'BACK'
        lRed   = EVALUATE('0' & thisToken[7  :  8] & 'h')
        lGreen = EVALUATE('0' & thisToken[9  : 10] & 'h')
        lblue  = EVALUATE('0' & thisToken[11 : 12] & 'h')
        sciControl.StyleSetBack(styleNumber,colourRGB(lRed,lGreen,lBlue))
     OF 'EOLF'
        sciControl.StyleSetEOLFilled(styleNumber,TRUE)
     OF 'CASE'
        caseOpt = thisToken[6 : LEN(thisToken)]
        IF INRANGE(caseOpt,0,2)
           sciControl.StyleSetCase(styleNumber,caseOpt)
        END
     OF 'HIDE'
        sciControl.StyleSetVisible(styleNumber,FALSE)
     OF 'HOTS'
        !sciControl.StyleSetHotSpot(styleNumber,TRUE)
        sciControl.StyleSetHotSpot(styleNumber,glo:bHotSpotsEnabled)
   END
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[CALLS]
ColourRGB
[PROCEDURE]
NAME GetPropertyFileLexer
PROTOTYPE '(*CSTRING szPropertyFile),STRING'
PARAMETERS '(*CSTRING szPropertyFile) !,STRING'
[COMMON]
FROM ABC Source
MODIFIED '2014/03/04' '10:21:56'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
szAAFileName         CSTRING(260),STATIC
A_A                  FILE,DRIVER('ASCII'),NAME(szAAFileName),PRE(AA)
Record                  RECORD
Buffer                     STRING(1024)
                        END
                     END
szBuffer             CSTRING(1025)
szLexer              CSTRING(65)
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  szLexer = 'text'
  szAAFilename = svSpecialFolder.GetDir(SV:CSIDL_APPDATA, 'Devuna' & '\' & 'KSS') & '\' & szPropertyFile & '.properties'
  OPEN(A_A,ReadOnly+DenyWrite)
  IF ERRORCODE()
     szAAFilename = szPropertyFile & '.properties'
     OPEN(A_A,ReadOnly+DenyWrite)
  END
  IF ~ERRORCODE()
     SET(A_A)
     NEXT(A_A)
     LOOP UNTIL ERRORCODE()
        szBuffer = CLIP(LEFT(A_A.Buffer))
        IF UPPER(szBuffer[1 : 6]) = 'LEXER='
           szLexer = szBuffer[7 : LEN(szBuffer)]
           BREAK
        ELSE
           NEXT(A_A)
        END
     END
     CLOSE(A_A)
  ELSE
     CASE ERRORCODE()
       OF NoFileErr
          glo:szDefaultPropertyFile = 'text'
     ELSE
          MESSAGE('Unexpected error opening ' & szAAFilename & '|' & ERROR(),'Load Lexer Properties',ICON:HAND)
     END
  END
  RETURN szLexer
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[CALLS]
ColourRGB
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2011/12/30' ' 6:28:31'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME LoadFileExtensionQueue
PROTOTYPE '(FileModeQueueType FileModeQueue),STRING'
PARAMETERS '(FileModeQueueType FileModeQueue)'
[COMMON]
FROM ABC Source
MODIFIED '2017/08/07' '16:35:09'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
FileModes      QUEUE(FILE:queue),PRE(fm)
               END
bClarionFound  BOOL(FALSE)
bTextFound     BOOL(FALSE)
szSearchFolder CSTRING(260)
FileModeMenu   CSTRING(1025)
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
      FREE(FileExtensionQueue)

      !get user properties
      szSearchFolder = svSpecialFolder.GetDir(SV:CSIDL_APPDATA, 'Devuna' & '\' & 'KSS\')
      DO GetFileExtensions

      !get system properties
      szSearchFolder = LONGPATH() & '\'
      DO GetFileExtensions

      !if clarion properties file not found
      !add the default file extensions
      !clw cln equ inc int prj tpl tpw trn txa txd txr
      IF bClarionFound = FALSE
         DO AddClarionDefault
      END

      !if text properties file not found
      !add the default file extensions
      IF bTextFound = FALSE
         DO AddTextDefault
      END

      !setup the file mode menu
      DO SetupFileModeMenu

      RETURN FileModeMenu
[END]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
GetFileExtensions    ROUTINE
   DATA
i              LONG
j              LONG
cc             LONG
pStart         LONG
pSpace         LONG
szPath         CSTRING(MAXPATH+1)
szDrive        CSTRING(MAXDRIVE+1)
szDir          CSTRING(MAXDIR+1)
szName         CSTRING(MAXFILE+1)
szExtension    CSTRING(MAXEXT+1)
szProperties   CSTRING(MAXPATH)
szBuffer       CSTRING(SIZE(AsciiFile.Buffer)+1)
szLexer        LIKE(FileExtensionQueue.Lexer)
nLexer         LONG

   CODE
      szLexer = 'text'
      FREE(FileModes)
      !IF szSearchFolder[LEN(szSearchFolder)] <> '\'
      !   szSearchFolder = szSearchFolder & '\'
      !END
      DIRECTORY(FileModes,szSearchFolder & '*.properties',0)
      j = RECORDS(FileModes)
      IF j > 0
         LOOP i = 1 TO j
            GET(FileModes,i)
            szPath = CLIP(FileModes.Name)
            cc = kcr_fnSplit(szPath, szDrive, szDir, szName, szExtension)
            CASE LOWER(szName)
              OF 'clarion'
                 bClarionFound = TRUE
              OF 'text'
                 bTextFound = TRUE
            END
            AsciiFilename = szSearchFolder & szPath
            OPEN(AsciiFile,ReadOnly+DenyNone)
            IF NOT ERRORCODE()
               SET(AsciiFile)
               NEXT(AsciiFile)
               LOOP UNTIL ERRORCODE()
                  szBuffer = CLIP(LEFT(AsciiFile.Buffer))
                  IF UPPER(szBuffer[1 : 6]) = 'LEXER='
                     szLexer = LOWER(CLIP(LEFT(szBuffer[7 : LEN(szBuffer)])))
                     CASE szLexer
                       OF 'clarion'
                          nLexer = SCLEX_CLWNOCASE
                       OF 'cpp'
                          nLexer = SCLEX_CPP
                       OF 'html'
                          nLexer = SCLEX_HTML
                       OF 'text'
                          nLexer = SCLEX_NULL
                     ELSE
                        IF NUMERIC(szLexer)
                           nLexer = szLexer
                        ELSIF szLexer[1 : 6] = 'sclex_'
                           nLexer = GetLexerNumber(szLexer)
                        ELSE
                           nLexer = SCLEX_NULL
                        END
                        szLexer = 'text'
                     END
                  ELSIF UPPER(AsciiFile.Buffer[1 : 7]) = '[FILEPA'   !File Patterns
                     !pStart = 1
                     NEXT(AsciiFile)
                     LOOP UNTIL ERRORCODE()
                        pStart = 1
                        szBuffer = CLIP(LEFT(AsciiFile.Buffer))
                        IF szBuffer[1] = '['
                           BREAK
                        ELSIF szBuffer <> '' AND szBuffer[1] <> '!'
                           !clw cln equ inc int prj tpl tpw trn txa txd txr
                           pSpace = INSTRING(' ',szBuffer,,pStart)
                           LOOP WHILE pSpace > 0
                              FileExtensionQueue.Extension = UPPER(szBuffer[pStart : pSpace-1])
                              GET(FileExtensionQueue,FileExtensionQueue.Extension)
                              !IF ERRORCODE() !not found
                                 FileExtensionQueue.Extension = UPPER(szBuffer[pStart : pSpace-1])
                                 FileExtensionQueue.FileMode = LOWER(szName)
                                 FileExtensionQueue.Lexer = szLexer
                                 FileExtensionQueue.nLexer = nLexer
                                 ADD(FileExtensionQueue,+FileExtensionQueue.Extension)
                              !END
                              pStart = pSpace+1
                              pSpace = INSTRING(' ',szBuffer,,pStart)
                           END
                           FileExtensionQueue.Extension = UPPER(szBuffer[pStart : LEN(szBuffer)])
                           GET(FileExtensionQueue,FileExtensionQueue.Extension)
                           !IF ERRORCODE() !not found
                              FileExtensionQueue.Extension = UPPER(szBuffer[pStart : LEN(szBuffer)])
                              FileExtensionQueue.FileMode = LOWER(szName)
                              FileExtensionQueue.Lexer = szLexer
                              FileExtensionQueue.nLexer = nLexer
                              ADD(FileExtensionQueue,+FileExtensionQueue.Extension)
                           !END
                        END
                        NEXT(AsciiFile)
                     END
                     BREAK
                  END
                  NEXT(AsciiFile)
               END
               CLOSE(AsciiFile)
            ELSE
               MESSAGE('Unexpected error opening ' & AsciiFilename & '|' & ERROR(),'Load File Extension Queue',ICON:HAND)
            END
         END
      END

AddClarionDefault    ROUTINE
   DATA
i              LONG
j              LONG

   CODE
      FileModes.Name = LONGPATH() & '\clarion.properties'
      ADD(FileModes,+FileModes.Name)
      LOOP i = 1 TO 13
         EXECUTE i
            FileExtensionQueue.Extension = '*.CLA'
            FileExtensionQueue.Extension = '*.CLW'
            FileExtensionQueue.Extension = '*.CLN'
            FileExtensionQueue.Extension = '*.EQU'
            FileExtensionQueue.Extension = '*.INC'
            FileExtensionQueue.Extension = '*.INT'
            FileExtensionQueue.Extension = '*.PRJ'
            FileExtensionQueue.Extension = '*.TPL'
            FileExtensionQueue.Extension = '*.TPW'
            FileExtensionQueue.Extension = '*.TRN'
            FileExtensionQueue.Extension = '*.TXA'
            FileExtensionQueue.Extension = '*.TXD'
            FileExtensionQueue.Extension = '*.TXR'
         END
         GET(FileExtensionQueue,FileExtensionQueue.Extension)
         IF ERRORCODE() !not found
            EXECUTE i
               FileExtensionQueue.Extension = '*.CLA'
               FileExtensionQueue.Extension = '*.CLW'
               FileExtensionQueue.Extension = '*.CLN'
               FileExtensionQueue.Extension = '*.EQU'
               FileExtensionQueue.Extension = '*.INC'
               FileExtensionQueue.Extension = '*.INT'
               FileExtensionQueue.Extension = '*.PRJ'
               FileExtensionQueue.Extension = '*.TPL'
               FileExtensionQueue.Extension = '*.TPW'
               FileExtensionQueue.Extension = '*.TRN'
               FileExtensionQueue.Extension = '*.TXA'
               FileExtensionQueue.Extension = '*.TXD'
               FileExtensionQueue.Extension = '*.TXR'
            END
            FileExtensionQueue.FileMode = 'clarion'
            FileExtensionQueue.Lexer = 'clarion'
            FileExtensionQueue.nLexer = SCLEX_CLWNOCASE
            ADD(FileExtensionQueue,+FileExtensionQueue.Extension)
         END
      END
   EXIT

AddTextDefault    ROUTINE
   DATA
i              LONG
j              LONG

   CODE
      FileModes.Name = LONGPATH() & '\text.properties'
      ADD(FileModes,+FileModes.Name)
      LOOP i = 1 TO 3
         EXECUTE i
            FileExtensionQueue.Extension = '*.ASC'
            FileExtensionQueue.Extension = '*.CSV'
            FileExtensionQueue.Extension = '*.TXT'
         END
         GET(FileExtensionQueue,FileExtensionQueue.Extension)
         IF ERRORCODE() !not found
            EXECUTE i
               FileExtensionQueue.Extension = '*.ASC'
               FileExtensionQueue.Extension = '*.CSV'
               FileExtensionQueue.Extension = '*.TXT'
            END
            FileExtensionQueue.FileMode = 'text'
            FileExtensionQueue.Lexer = 'text'
            FileExtensionQueue.nLexer = SCLEX_NULL
            ADD(FileExtensionQueue,+FileExtensionQueue.Extension)
         END
      END
   EXIT

SetupFileModeMenu    ROUTINE
   DATA
i              LONG
j              LONG
cc             LONG
szPath         CSTRING(MAXPATH+1)
szDrive        CSTRING(MAXDRIVE+1)
szDir          CSTRING(MAXDIR+1)
szName         CSTRING(MAXFILE+1)
szExtension    CSTRING(MAXEXT+1)

   CODE
      j = RECORDS(FileExtensionQueue)
      FREE(FileModeQueue)
      FileModeQueue.FileMode = ''
      LOOP i = 1 TO j
         GET(FileExtensionQueue,i)
         IF FileModeQueue.FileMode <> FileExtensionQueue.FileMode
            FileModeQueue.FileMode = FileExtensionQueue.FileMode
            GET(FileModeQueue,+FileModeQueue.FileMode)
            IF ERRORCODE()
               FileModeQueue.FileMode = FileExtensionQueue.FileMode
               FileModeQueue.Lexer = FileExtensionQueue.Lexer
               FileModeQueue.nLexer = FileExtensionQueue.nLexer
               ADD(FileModeQueue,+FileModeQueue.FileMode)
            END
         END
      END

      FileModeMenu = 'File Mode{{'
      j = RECORDS(FileModeQueue)
      LOOP i = 1 TO j
         GET(FileModeQueue,i)
         FileModeMenu = FileModeMenu & FileModeQueue.FileMode & '|'
      END
      FileModeMenu[LEN(FileModeMenu)] = '}'
   EXIT
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[CALLS]
GetLexerNumber
[PROCEDURE]
NAME GetLexerNumber
PROTOTYPE '(*CSTRING szLexer),LONG'
PARAMETERS '(*CSTRING szLexer)'
[COMMON]
FROM ABC Source
MODIFIED '2012/02/28' ' 8:55:48'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
nLexer        LONG
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
      CASE UPPER(szLexer)
      OF 'SCLEX_NULL'
          nLexer = SCLEX_NULL
      OF 'SCLEX_PYTHON'
          nLexer = SCLEX_PYTHON
      OF 'SCLEX_CPP'
          nLexer = SCLEX_CPP
      OF 'SCLEX_HTML'
          nLexer = SCLEX_HTML
      OF 'SCLEX_XML'
          nLexer = SCLEX_XML
      OF 'SCLEX_PERL'
          nLexer = SCLEX_PERL
      OF 'SCLEX_SQL'
          nLexer = SCLEX_SQL
      OF 'SCLEX_VB'
          nLexer = SCLEX_VB
      OF 'SCLEX_PROPERTIES'
          nLexer = SCLEX_PROPERTIES
      OF 'SCLEX_ERRORLIST'
          nLexer = SCLEX_ERRORLIST
      OF 'SCLEX_MAKEFILE'
          nLexer = SCLEX_MAKEFILE
      OF 'SCLEX_BATCH'
          nLexer = SCLEX_BATCH
      OF 'SCLEX_XCODE'
          nLexer = SCLEX_XCODE
      OF 'SCLEX_LATEX'
          nLexer = SCLEX_LATEX
      OF 'SCLEX_LUA'
          nLexer = SCLEX_LUA
      OF 'SCLEX_DIFF'
          nLexer = SCLEX_DIFF
      OF 'SCLEX_CONF'
          nLexer = SCLEX_CONF
      OF 'SCLEX_PASCAL'
          nLexer = SCLEX_PASCAL
      OF 'SCLEX_AVE'
          nLexer = SCLEX_AVE
      OF 'SCLEX_ADA'
          nLexer = SCLEX_ADA
      OF 'SCLEX_LISP'
          nLexer = SCLEX_LISP
      OF 'SCLEX_RUBY'
          nLexer = SCLEX_RUBY
      OF 'SCLEX_EIFFEL'
          nLexer = SCLEX_EIFFEL
      OF 'SCLEX_EIFFELKW'
          nLexer = SCLEX_EIFFELKW
      OF 'SCLEX_TCL'
          nLexer = SCLEX_TCL
      OF 'SCLEX_NNCRONTAB'
          nLexer = SCLEX_NNCRONTAB
      OF 'SCLEX_BULLANT'
          nLexer = SCLEX_BULLANT
      OF 'SCLEX_VBSCRIPT'
          nLexer = SCLEX_VBSCRIPT
      OF 'SCLEX_ASP'
          nLexer = SCLEX_ASP
      OF 'SCLEX_PHP'
          nLexer = SCLEX_PHP
      OF 'SCLEX_BAAN'
          nLexer = SCLEX_BAAN
      OF 'SCLEX_MATLAB'
          nLexer = SCLEX_MATLAB
      OF 'SCLEX_SCRIPTOL'
          nLexer = SCLEX_SCRIPTOL
      OF 'SCLEX_ASM'
          nLexer = SCLEX_ASM
      OF 'SCLEX_CPPNOCASE'
          nLexer = SCLEX_CPPNOCASE
      OF 'SCLEX_FORTRAN'
          nLexer = SCLEX_FORTRAN
      OF 'SCLEX_F77'
          nLexer = SCLEX_F77
      OF 'SCLEX_CSS'
          nLexer = SCLEX_CSS
      OF 'SCLEX_POV'
          nLexer = SCLEX_POV
      OF 'SCLEX_LOUT'
          nLexer = SCLEX_LOUT
      OF 'SCLEX_ESCRIPT'
          nLexer = SCLEX_ESCRIPT
      OF 'SCLEX_PS'
          nLexer = SCLEX_PS
      OF 'SCLEX_NSIS'
          nLexer = SCLEX_NSIS
      OF 'SCLEX_MMIXAL'
          nLexer = SCLEX_MMIXAL
      OF 'SCLEX_CLARION'
          nLexer = SCLEX_CLARION
      OF 'SCLEX_CLWNOCASE'
          nLexer = SCLEX_CLWNOCASE
      OF 'SCLEX_LOT'
          nLexer = SCLEX_LOT
      OF 'SCLEX_YAML'
          nLexer = SCLEX_YAML
      OF 'SCLEX_TEX'
          nLexer = SCLEX_TEX
      OF 'SCLEX_METAPOST'
          nLexer = SCLEX_METAPOST
      OF 'SCLEX_POWERBASIC'
          nLexer = SCLEX_POWERBASIC
      OF 'SCLEX_FORTH'
          nLexer = SCLEX_FORTH
      OF 'SCLEX_ERLANG'
          nLexer = SCLEX_ERLANG
      OF 'SCLEX_OCTAVE'
          nLexer = SCLEX_OCTAVE
      OF 'SCLEX_MSSQL'
          nLexer = SCLEX_MSSQL
      OF 'SCLEX_VERILOG'
          nLexer = SCLEX_VERILOG
      OF 'SCLEX_KIX'
          nLexer = SCLEX_KIX
      OF 'SCLEX_GUI4CLI'
          nLexer = SCLEX_GUI4CLI
      OF 'SCLEX_SPECMAN'
          nLexer = SCLEX_SPECMAN
      OF 'SCLEX_AU3'
          nLexer = SCLEX_AU3
      OF 'SCLEX_APDL'
          nLexer = SCLEX_APDL
      OF 'SCLEX_BASH'
          nLexer = SCLEX_BASH
      OF 'SCLEX_ASN1'
          nLexer = SCLEX_ASN1
      OF 'SCLEX_VHDL'
          nLexer = SCLEX_VHDL
      OF 'SCLEX_CAML'
          nLexer = SCLEX_CAML
      OF 'SCLEX_BLITZBASIC'
          nLexer = SCLEX_BLITZBASIC
      OF 'SCLEX_PUREBASIC'
          nLexer = SCLEX_PUREBASIC
      OF 'SCLEX_HASKELL'
          nLexer = SCLEX_HASKELL
      OF 'SCLEX_PHPSCRIPT'
          nLexer = SCLEX_PHPSCRIPT
      OF 'SCLEX_TADS3'
          nLexer = SCLEX_TADS3
      OF 'SCLEX_REBOL'
          nLexer = SCLEX_REBOL
      OF 'SCLEX_SMALLTALK'
          nLexer = SCLEX_SMALLTALK
      OF 'SCLEX_FLAGSHIP'
          nLexer = SCLEX_FLAGSHIP
      OF 'SCLEX_CSOUND'
          nLexer = SCLEX_CSOUND
      OF 'SCLEX_FREEBASIC'
          nLexer = SCLEX_FREEBASIC
      OF 'SCLEX_INNOSETUP'
          nLexer = SCLEX_INNOSETUP
      OF 'SCLEX_OPAL'
          nLexer = SCLEX_OPAL
      OF 'SCLEX_SPICE'
          nLexer = SCLEX_SPICE
      OF 'SCLEX_D'
          nLexer = SCLEX_D
      OF 'SCLEX_CMAKE'
          nLexer = SCLEX_CMAKE
      OF 'SCLEX_GAP'
          nLexer = SCLEX_GAP
      OF 'SCLEX_PLM'
          nLexer = SCLEX_PLM
      OF 'SCLEX_PROGRESS'
          nLexer = SCLEX_PROGRESS
      OF 'SCLEX_ABAQUS'
          nLexer = SCLEX_ABAQUS
      OF 'SCLEX_ASYMPTOTE'
          nLexer = SCLEX_ASYMPTOTE
      OF 'SCLEX_R'
          nLexer = SCLEX_R
      OF 'SCLEX_MAGIK'
          nLexer = SCLEX_MAGIK
      OF 'SCLEX_POWERSHELL'
          nLexer = SCLEX_POWERSHELL
      OF 'SCLEX_MYSQL'
          nLexer = SCLEX_MYSQL
      OF 'SCLEX_PO'
          nLexer = SCLEX_PO
      OF 'SCLEX_TAL'
          nLexer = SCLEX_TAL
      OF 'SCLEX_COBOL'
          nLexer = SCLEX_COBOL
      OF 'SCLEX_TACL'
          nLexer = SCLEX_TACL
      OF 'SCLEX_SORCUS'
          nLexer = SCLEX_SORCUS
      OF 'SCLEX_POWERPRO'
          nLexer = SCLEX_POWERPRO
      OF 'SCLEX_NIMROD'
          nLexer = SCLEX_NIMROD
      OF 'SCLEX_SML'
          nLexer = SCLEX_SML
      OF 'SCLEX_MARKDOWN'
          nLexer = SCLEX_MARKDOWN
      OF 'SCLEX_TXT2TAGS'
          nLexer = SCLEX_TXT2TAGS
      OF 'SCLEX_A68K'
          nLexer = SCLEX_A68K
      OF 'SCLEX_MODULA'
          nLexer = SCLEX_MODULA
      OF 'SCLEX_AUTOMATIC'
          nLexer = SCLEX_AUTOMATIC
    ELSE
          nLexer = SCLEX_NULL
    END
    RETURN nLexer
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2012/01/09' '16:04:23'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME PropertyEditor
PROTOTYPE '(*CSTRING szPropertyFile, LONG MaxStyleIndex),BOOL,PROC'
PARAMETERS '(*CSTRING szPropertyFile, LONG MaxStyleIndex)'
[COMMON]
DESCRIPTION 'Edit special properties files'
FROM ABC Window
MODIFIED '2017/08/07' '16:35:22'
[DATA]
[SCREENCONTROLS]
! PROMPT('b Properties Changed:'),USE(?bPropertiesChanged:Prompt)
! ENTRY(@s20),USE(bPropertiesChanged)
[REPORTCONTROLS]
! STRING(@s20),USE(bPropertiesChanged)
bPropertiesChanged       BOOL
!!> GUID('c7f0f302-ecda-43eb-8304-bc91df0c4dcd'),INITIAL('FALSE'),PROMPT('b Properties Changed:'),HEADER('b Properties Changed'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('sz Description:'),USE(?szDescription:Prompt)
! ENTRY(@s255),USE(szDescription)
[REPORTCONTROLS]
! STRING(@s255),USE(szDescription)
szDescription            CSTRING(256)
!!> GUID('d3c9bb89-e247-4934-97fa-60f6f0d00c57'),PROMPT('sz Description:'),HEADER('sz Description'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('sz Lexer:'),USE(?szLexer:Prompt)
! ENTRY(@s31),USE(szLexer)
[REPORTCONTROLS]
! STRING(@s31),USE(szLexer)
szLexer                  CSTRING(32)
!!> GUID('fe098c4a-0778-44bd-bc57-68a2fc5dcc63'),PROMPT('sz Lexer:'),HEADER('sz Lexer'),PICTURE(@s31),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('sz File Patterns:'),USE(?szFilePatterns:Prompt)
! ENTRY(@s255),USE(szFilePatterns)
[REPORTCONTROLS]
! STRING(@s255),USE(szFilePatterns)
szFilePatterns           CSTRING(2048)
!!> GUID('f7518589-001b-4c04-b8f1-365f98464a51'),PROMPT('sz File Patterns:'),HEADER('sz File Patterns'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('File Pattern Queue:'),USE(?FilePatternQueue:Prompt)
! ENTRY(@s20),USE(FilePatternQueue)
[REPORTCONTROLS]
! STRING(@s20),USE(FilePatternQueue)
FilePatternQueue         QUEUE,PRE(fpq)
!!> GUID('3af582d3-56a9-4566-8958-f2d6d7983ed3'),PROMPT('File Pattern Queue:'),HEADER('File Pattern Queue'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('Pattern:'),USE(?fpq:Pattern:Prompt)
! ENTRY(@s20),USE(fpq:Pattern)
[REPORTCONTROLS]
! STRING(@s20),USE(fpq:Pattern)
Pattern                    CSTRING(21)
!!> GUID('72bd324b-40f9-4cc6-a060-cfbcfd3a3f99'),PROMPT('Pattern:'),HEADER('Pattern'),PICTURE(@s20),TYPEMODE(INS)
                         END
!!> GUID('52269800-4052-4a3c-8c58-f8e5e79ede65')
[SCREENCONTROLS]
! PROMPT('List Box Queue:'),USE(?ListBoxQueue:Prompt)
! ENTRY(@s20),USE(ListBoxQueue)
[REPORTCONTROLS]
! STRING(@s20),USE(ListBoxQueue)
ListBoxQueue             QUEUE,PRE(lbq)
!!> GUID('1ab6a3c1-6185-4616-b811-0f4a9f661c56'),PROMPT('List Box Queue:'),HEADER('List Box Queue'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('Value:'),USE(?lbq:Value:Prompt)
! ENTRY(@s32),USE(lbq:Value)
[REPORTCONTROLS]
! STRING(@s32),USE(lbq:Value)
Value                      CSTRING(33)
!!> GUID('685be423-9cb8-4912-ac0f-670ae0a1f495'),PROMPT('Value:'),HEADER('Value'),PICTURE(@s32),TYPEMODE(INS)
                         END
!!> GUID('1a193bb2-f530-404a-9bc9-52f29a8d259a')
[SCREENCONTROLS]
! PROMPT('q Options:'),USE(?qOptions:Prompt)
! ENTRY(@s20),USE(qOptions)
[REPORTCONTROLS]
! STRING(@s20),USE(qOptions)
qOptions                 QUEUE,PRE(opt)
!!> GUID('4b06b273-de1d-4fed-896b-9c6fc55c0b4f'),PROMPT('q Options:'),HEADER('q Options'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('sz Option:'),USE(?opt:szOption:Prompt)
! ENTRY(@s255),USE(opt:szOption)
[REPORTCONTROLS]
! STRING(@s255),USE(opt:szOption)
szOption                   CSTRING(256)
!!> GUID('0f85cc83-26f8-4a78-b54d-590d8cac426e'),PROMPT('sz Option:'),HEADER('sz Option'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('sz Option Tip:'),USE(?opt:szOptionTip:Prompt)
! ENTRY(@s255),USE(opt:szOptionTip)
[REPORTCONTROLS]
! STRING(@s255),USE(opt:szOptionTip)
szOptionTip                CSTRING(256)
!!> GUID('9bf20e80-485e-47c4-9600-1e7e64a4155e'),PROMPT('sz Option Tip:'),HEADER('sz Option Tip'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('sz Value:'),USE(?opt:szValue:Prompt)
! ENTRY(@s255),USE(opt:szValue)
[REPORTCONTROLS]
! STRING(@s255),USE(opt:szValue)
szValue                    CSTRING(256)
!!> GUID('a70eaa7c-3b8b-47a2-9e3a-b481e710d461'),PROMPT('sz Value:'),HEADER('sz Value'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('Is Bool:'),USE(?opt:IsBool:Prompt)
! ENTRY(@s20),USE(opt:IsBool)
[REPORTCONTROLS]
! STRING(@s20),USE(opt:IsBool)
IsBool                     BOOL
!!> GUID('45f96732-c301-4c9c-91cf-c0c50d85133e'),PROMPT('Is Bool:'),HEADER('Is Bool'),PICTURE(@s20),TYPEMODE(INS)
                         END
!!> GUID('0c32d229-2e86-448c-b5b8-bd3ed0998699')
[SCREENCONTROLS]
! PROMPT('q Keywords:'),USE(?qKeywords:Prompt)
! ENTRY(@s20),USE(qKeywords)
[REPORTCONTROLS]
! STRING(@s20),USE(qKeywords)
qKeywords                QUEUE,PRE(kwd)
!!> GUID('fe33b47b-6cb6-4377-81f7-91b536ec3390'),PROMPT('q Keywords:'),HEADER('q Keywords'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('sz Description:'),USE(?kwd:szDescription:Prompt)
! ENTRY(@s255),USE(kwd:szDescription)
[REPORTCONTROLS]
! STRING(@s255),USE(kwd:szDescription)
szDescription              CSTRING(256)
!!> GUID('d4f84667-fada-474f-a500-77f5346f5b2d'),PROMPT('sz Description:'),HEADER('sz Description'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('sz Keyword Number:'),USE(?kwd:szKeywordNumber:Prompt)
! ENTRY(@s15),USE(kwd:szKeywordNumber)
[REPORTCONTROLS]
! STRING(@s15),USE(kwd:szKeywordNumber)
szKeywordNumber            CSTRING(16)
!!> GUID('73d5198d-d1db-480a-a780-ff8d19e3c21d'),PROMPT('sz Keyword Number:'),HEADER('sz Keyword Number'),PICTURE(@s15),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('sz Keywords:'),USE(?kwd:szKeywords:Prompt)
! ENTRY(@s255),USE(kwd:szKeywords)
[REPORTCONTROLS]
! STRING(@s255),USE(kwd:szKeywords)
szKeywords                 CSTRING(2048)
!!> GUID('124407a2-aaaf-4b5a-81f3-9010c51f35d1'),PROMPT('sz Keywords:'),HEADER('sz Keywords'),PICTURE(@s255),TYPEMODE(INS)
                         END
!!> GUID('8d6ca946-8cd1-480c-868a-fc4f44c0e7da')
[SCREENCONTROLS]
! PROMPT('q Styles:'),USE(?qStyles:Prompt)
! ENTRY(@s20),USE(qStyles)
[REPORTCONTROLS]
! STRING(@s20),USE(qStyles)
qStyles                  QUEUE,PRE(sty)
!!> GUID('a80f826e-3e14-4966-9114-f61fd5ba2f22'),PROMPT('q Styles:'),HEADER('q Styles'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('sz Description:'),USE(?sty:szDescription:Prompt)
! ENTRY(@s255),USE(sty:szDescription)
[REPORTCONTROLS]
! STRING(@s255),USE(sty:szDescription)
szDescription              CSTRING(256)
!!> GUID('b9595658-d5cb-4aec-a145-bcdfa8d79689'),PROMPT('sz Description:'),HEADER('sz Description'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('sz Style Number:'),USE(?sty:szStyleNumber:Prompt)
! ENTRY(@s15),USE(sty:szStyleNumber)
[REPORTCONTROLS]
! STRING(@s15),USE(sty:szStyleNumber)
szStyleNumber              CSTRING(16)
!!> GUID('266f5207-6168-4b37-9c7f-6052de89d472'),PROMPT('sz Style Number:'),HEADER('sz Style Number'),PICTURE(@s15),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('sz Font Name:'),USE(?sty:szFontName:Prompt)
! ENTRY(@s31),USE(sty:szFontName)
[REPORTCONTROLS]
! STRING(@s31),USE(sty:szFontName)
szFontName                 CSTRING(32)
!!> GUID('f20339ad-5bf8-4d8d-91d6-8735cd0dbad0'),PROMPT('sz Font Name:'),HEADER('sz Font Name'),PICTURE(@s31),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('n Font Size:'),USE(?sty:nFontSize:Prompt)
! ENTRY(@n3),USE(sty:nFontSize)
[REPORTCONTROLS]
! STRING(@n3),USE(sty:nFontSize)
nFontSize                  BYTE
!!> GUID('f1991aca-eab2-455f-b9a1-70ed7cb01f82'),PROMPT('n Font Size:'),HEADER('n Font Size'),PICTURE(@n3),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('n Font Style:'),USE(?sty:nFontStyle:Prompt)
! ENTRY(@n-14),USE(sty:nFontStyle),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(sty:nFontStyle),RIGHT(1)
nFontStyle                 LONG
!!> GUID('d3f6912c-33d2-47ed-b5de-4ffed76eca21'),PROMPT('n Font Style:'),HEADER('n Font Style'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('b Bold:'),USE(?sty:bBold:Prompt)
! ENTRY(@s20),USE(sty:bBold)
[REPORTCONTROLS]
! STRING(@s20),USE(sty:bBold)
bBold                      BOOL
!!> GUID('f2deb028-5b37-4516-bd29-ac1092e18837'),PROMPT('b Bold:'),HEADER('b Bold'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('b Eol Filled:'),USE(?sty:bEolFilled:Prompt)
! ENTRY(@s20),USE(sty:bEolFilled)
[REPORTCONTROLS]
! STRING(@s20),USE(sty:bEolFilled)
bEolFilled                 BOOL
!!> GUID('f923be4e-bfad-4e62-8c78-d0f8d9e880f5'),PROMPT('b Eol Filled:'),HEADER('b Eol Filled'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('b Hide:'),USE(?sty:bHide:Prompt)
! ENTRY(@s20),USE(sty:bHide)
[REPORTCONTROLS]
! STRING(@s20),USE(sty:bHide)
bHide                      BOOL
!!> GUID('679306ad-a269-4570-a083-0dfba9415eda'),PROMPT('b Hide:'),HEADER('b Hide'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('b Hot Spot:'),USE(?sty:bHotSpot:Prompt)
! ENTRY(@s20),USE(sty:bHotSpot)
[REPORTCONTROLS]
! STRING(@s20),USE(sty:bHotSpot)
bHotSpot                   BOOL
!!> GUID('81010d30-7619-418e-88fe-62603b92c6c4'),PROMPT('b Hot Spot:'),HEADER('b Hot Spot'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('b Italic:'),USE(?sty:bItalic:Prompt)
! ENTRY(@s20),USE(sty:bItalic)
[REPORTCONTROLS]
! STRING(@s20),USE(sty:bItalic)
bItalic                    BOOL
!!> GUID('bfab6008-0dd9-4856-abeb-f4919b4d1eec'),PROMPT('b Italic:'),HEADER('b Italic'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('b Underline:'),USE(?sty:bUnderline:Prompt)
! ENTRY(@s20),USE(sty:bUnderline)
[REPORTCONTROLS]
! STRING(@s20),USE(sty:bUnderline)
bUnderline                 BOOL
!!> GUID('314a41dc-d9b1-40a1-9549-0d4058cb86de'),PROMPT('b Underline:'),HEADER('b Underline'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('n Case Opt:'),USE(?sty:nCaseOpt:Prompt)
! ENTRY(@n3),USE(sty:nCaseOpt)
[REPORTCONTROLS]
! STRING(@n3),USE(sty:nCaseOpt)
nCaseOpt                   BYTE
!!> GUID('2fe3ab98-2947-4a83-b17a-57e35d11e8c5'),PROMPT('n Case Opt:'),HEADER('n Case Opt'),PICTURE(@n3),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('l Fore Color:'),USE(?sty:lForeColor:Prompt)
! ENTRY(@n-14),USE(sty:lForeColor),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(sty:lForeColor),RIGHT(1)
lForeColor                 LONG
!!> GUID('f9dc763a-7d4f-4af7-a2f7-1d790f787eed'),PROMPT('l Fore Color:'),HEADER('l Fore Color'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('l Back Color:'),USE(?sty:lBackColor:Prompt)
! ENTRY(@n-14),USE(sty:lBackColor),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(sty:lBackColor),RIGHT(1)
lBackColor                 LONG
!!> GUID('761c88bd-9cb6-4257-886d-4d6be75b88b3'),PROMPT('l Back Color:'),HEADER('l Back Color'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('sz Style Number:'),USE(?sty:szSort:Prompt)
! ENTRY(@s15),USE(sty:szSort)
[REPORTCONTROLS]
! STRING(@s15),USE(sty:szSort)
szSort                     CSTRING(16)
!!> GUID('273c73f4-8869-4c3c-b936-9f3e4cd0f871'),PROMPT('sz Style Number:'),HEADER('sz Style Number'),PICTURE(@s15),TYPEMODE(INS)
                         END
!!> GUID('83da5ec6-2ab5-4214-b5e9-452fc6a645d9')
[SCREENCONTROLS]
! PROMPT('sz Font Description:'),USE(?szFontDescription:Prompt)
! ENTRY(@s63),USE(szFontDescription)
[REPORTCONTROLS]
! STRING(@s63),USE(szFontDescription)
szFontDescription        CSTRING(64)
!!> GUID('c29066d6-9a61-48e0-b2e1-70aa79b057cd'),PROMPT('sz Font Description:'),HEADER('sz Font Description'),PICTURE(@s63),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('sz Fore Color:'),USE(?szForeColor:Prompt)
! ENTRY(@s30),USE(szForeColor)
[REPORTCONTROLS]
! STRING(@s30),USE(szForeColor)
szForeColor              CSTRING(31)
!!> GUID('d2c17931-eb03-4bb9-b703-32d1a7030c64'),PROMPT('sz Fore Color:'),HEADER('sz Fore Color'),PICTURE(@s30),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('sz Fore Color:'),USE(?szBackColor:Prompt)
! ENTRY(@s30),USE(szBackColor)
[REPORTCONTROLS]
! STRING(@s30),USE(szBackColor)
szBackColor              CSTRING(31)
!!> GUID('07886e16-4eec-464b-84a9-d81a9259d600'),PROMPT('sz Fore Color:'),HEADER('sz Fore Color'),PICTURE(@s30),TYPEMODE(INS)
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default', 'WindowToolbar')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('WindowManager')
WHEN  ('WindowToolbar') ('ToolbarClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(),BYTE,PROC,DERIVED', 'Kill {19}PROCEDURE(),BYTE,PROC,DERIVED', |
  'Reset {18}PROCEDURE(BYTE Force=0),DERIVED', 'TakeAccepted {11}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeEvent {14}PROCEDURE(),BYTE,PROC,DERIVED', 'TakeFieldEvent {9}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeNewSelection       PROCEDURE(),BYTE,PROC,DERIVED', 'TakeSelected {11}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeWindowEvent        PROCEDURE(),BYTE,PROC,DERIVED')

%ReturnValue FIELD  (bPropertiesChanged)
%WindowOperationMode DEFAULT  ('Use WINDOW setting')
%INISaveWindow LONG  (1)
%ProcedureDisableEnhanceFocus LONG  (0)
%ProcedureUseEnterInsteadTabOverride LONG  (0)
%WindowUseEnterInsteadTab LONG  (1)
%ProcedureUseEnterInsteadTabExcludeListCombo LONG  (0)
%ProcedureUseEnterInsteadTabEnableNextTabStop LONG  (0)
%ProcedureUseEnterInsteadTabExcludeG LONG  (1)
%WindowUseEnterInsteadTabExclude MULTI DEFAULT  ()
%GlobalObject DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('NO')
WHEN  ('WindowToolbar') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ThisWindow')
WHEN  ('WindowToolbar') ('Toolbar')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (0)
WHEN  ('WindowToolbar') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%WindowStyles MULTI LONG  ()
%WindowStyleFontName DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontSize DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontStyle DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontColor DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontCharSet DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStylePicture DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleOtherListboxes MULTI DEFAULT  ()
%ProcedureAutoBindFields MULTI LONG  ()
%ProcedureAutoBindField DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindFieldTPL DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindProcedures MULTI LONG  ()
%ProcedureAutoBindProcedure DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindProcedureTPL DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindFieldsIgnored MULTI LONG  ()
%ProcedureAutoBindFieldIgnored DEPEND %ProcedureAutoBindFieldsIgnored DEFAULT TIMES 0

%ProcedureAutoBindProceduresIgnored MULTI LONG  ()
%ProcedureAutoBindProcedureIgnored DEPEND %ProcedureAutoBindProceduresIgnored DEFAULT TIMES 0

%ProcedureAutoBindValidToAddField LONG  (0)
%ProcedureUserBindFields MULTI LONG  ()
%ProcedureUserBindField DEPEND %ProcedureUserBindFields FIELD TIMES 0

%ProcedureAutoBindFieldIgnore DEPEND %ProcedureAutoBindFields LONG TIMES 0

%ProcedureUserBindProcedures MULTI LONG  ()
%ProcedureUserBindProcedure DEPEND %ProcedureUserBindProcedures PROCEDURE TIMES 0

%ProcedureAutoBindProcedureIgnore DEPEND %ProcedureAutoBindProcedures LONG TIMES 0

%ProcedureUserBindExpressions MULTI LONG  ()
%ProcedureUserBindExpressionName DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ProcedureUserBindExpression DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ExtUITabIcon DEPEND %Control DEFAULT TIMES 0

%ExtUITabStyleOverrideGlobal DEPEND %Control LONG TIMES 0

%ExtUITabStyle DEPEND %Control DEFAULT TIMES 6
WHEN  ('') ('Default')
WHEN  ('?DeleteKeyword') ('Default')
WHEN  ('?InsertKeyword') ('Default')
WHEN  ('?Sheet') ('Default')
WHEN  ('?cmdCancel') ('Default')
WHEN  ('?lbKeywordValues') ('Default')

%ButtonAction DEPEND %Control DEFAULT TIMES 15
WHEN  ('') ('No Special Action')
WHEN  ('?ChangeFilePattern') ('No Special Action')
WHEN  ('?ChangeKeyword') ('No Special Action')
WHEN  ('?ChangeOption') ('No Special Action')
WHEN  ('?DeleteFilePattern') ('No Special Action')
WHEN  ('?DeleteKeyword') ('No Special Action')
WHEN  ('?InsertFilePattern') ('No Special Action')
WHEN  ('?InsertKeyword') ('No Special Action')
WHEN  ('?cmdCancel') ('No Special Action')
WHEN  ('?cmdFontDialog') ('No Special Action')
WHEN  ('?cmdSave') ('No Special Action')
WHEN  ('?cmdSelectBackColor') ('No Special Action')
WHEN  ('?cmdSelectCase') ('No Special Action')
WHEN  ('?cmdSelectForeColor') ('No Special Action')
WHEN  ('?lbKeywordValues') ('No Special Action')

%ButtonRunName DEPEND %Control DEFAULT TIMES 0

%ButtonRunParameters DEPEND %Control DEFAULT TIMES 0

%ButtonProcedure DEPEND %Control PROCEDURE TIMES 0

%ButtonThread DEPEND %Control LONG TIMES 0

%ButtonThreadStack DEPEND %Control DEFAULT TIMES 15
WHEN  ('') ('25000')
WHEN  ('?ChangeFilePattern') ('25000')
WHEN  ('?ChangeKeyword') ('25000')
WHEN  ('?ChangeOption') ('25000')
WHEN  ('?DeleteFilePattern') ('25000')
WHEN  ('?DeleteKeyword') ('25000')
WHEN  ('?InsertFilePattern') ('25000')
WHEN  ('?InsertKeyword') ('25000')
WHEN  ('?cmdCancel') ('25000')
WHEN  ('?cmdFontDialog') ('25000')
WHEN  ('?cmdSave') ('25000')
WHEN  ('?cmdSelectBackColor') ('25000')
WHEN  ('?cmdSelectCase') ('25000')
WHEN  ('?cmdSelectForeColor') ('25000')
WHEN  ('?lbKeywordValues') ('25000')

%ButtonParameters DEPEND %Control DEFAULT TIMES 0

%ButtonReturnValueAssignment DEPEND %Control FIELD TIMES 0

%ButtonReturnValueReferenceAssign DEPEND %Control LONG TIMES 0

%ButtonRequest DEPEND %Control DEFAULT TIMES 15
WHEN  ('') ('None')
WHEN  ('?ChangeFilePattern') ('None')
WHEN  ('?ChangeKeyword') ('None')
WHEN  ('?ChangeOption') ('None')
WHEN  ('?DeleteFilePattern') ('None')
WHEN  ('?DeleteKeyword') ('None')
WHEN  ('?InsertFilePattern') ('None')
WHEN  ('?InsertKeyword') ('None')
WHEN  ('?cmdCancel') ('None')
WHEN  ('?cmdFontDialog') ('None')
WHEN  ('?cmdSave') ('None')
WHEN  ('?cmdSelectBackColor') ('None')
WHEN  ('?cmdSelectCase') ('None')
WHEN  ('?cmdSelectForeColor') ('None')
WHEN  ('?lbKeywordValues') ('None')

%ButtonThreadParameters DEPEND %Control DEFAULT TIMES 0

%ButtonThreadReturnValueAssignment DEPEND %Control FIELD TIMES 0

%PreLookupKey DEPEND %Control KEY TIMES 0

%PreLookupField DEPEND %Control COMPONENT TIMES 0

%PreLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PreLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupKey DEPEND %Control KEY TIMES 0

%PostLookupField DEPEND %Control COMPONENT TIMES 0

%PostLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupDuringValidate DEPEND %Control LONG TIMES 9
WHEN  ('') (1)
WHEN  ('?DeleteKeyword') (1)
WHEN  ('?InsertKeyword') (1)
WHEN  ('?cmdCancel') (1)
WHEN  ('?lbKeywordValues') (1)
WHEN  ('?szBackColor') (1)
WHEN  ('?szDescription') (1)
WHEN  ('?szFontDescription') (1)
WHEN  ('?szForeColor') (1)

%LookupAssign DEPEND %Control MULTI LONG TIMES 0

%MoreTarget DEPEND %LookupAssign FIELD TIMES 0

%MoreField DEPEND %LookupAssign DEFAULT TIMES 0

%ForceWindowRefresh DEPEND %Control LONG TIMES 0

%CheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%CheckedAssignVariable DEPEND %CheckedAssigns FIELD TIMES 0

%CheckedAssignValue DEPEND %CheckedAssigns DEFAULT TIMES 0

%CheckedHides DEPEND %Control MULTI LONG TIMES 0

%CheckedControl DEPEND %CheckedHides DEFAULT TIMES 0

%CheckedControlAction DEPEND %CheckedHides DEFAULT TIMES 5
WHEN  ('')TIMES 0
WHEN  ('?DeleteKeyword')TIMES 0
WHEN  ('?InsertKeyword')TIMES 0
WHEN  ('?cmdCancel')TIMES 0
WHEN  ('?lbKeywordValues')TIMES 0

%CheckedEnables DEPEND %Control MULTI LONG TIMES 0

%CheckedControl1 DEPEND %CheckedEnables DEFAULT TIMES 0

%CheckedControl1Action DEPEND %CheckedEnables DEFAULT TIMES 5
WHEN  ('')TIMES 0
WHEN  ('?DeleteKeyword')TIMES 0
WHEN  ('?InsertKeyword')TIMES 0
WHEN  ('?cmdCancel')TIMES 0
WHEN  ('?lbKeywordValues')TIMES 0

%UncheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%UncheckedAssignVariable DEPEND %UncheckedAssigns FIELD TIMES 0

%UncheckedAssignValue DEPEND %UncheckedAssigns DEFAULT TIMES 0

%UnCheckedHides DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl DEPEND %UnCheckedHides DEFAULT TIMES 0

%UnCheckedControlAction DEPEND %UnCheckedHides DEFAULT TIMES 5
WHEN  ('')TIMES 0
WHEN  ('?DeleteKeyword')TIMES 0
WHEN  ('?InsertKeyword')TIMES 0
WHEN  ('?cmdCancel')TIMES 0
WHEN  ('?lbKeywordValues')TIMES 0

%UnCheckedEnables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl1 DEPEND %UnCheckedEnables DEFAULT TIMES 0

%UnCheckedControl1Action DEPEND %UnCheckedEnables DEFAULT TIMES 5
WHEN  ('')TIMES 0
WHEN  ('?DeleteKeyword')TIMES 0
WHEN  ('?InsertKeyword')TIMES 0
WHEN  ('?cmdCancel')TIMES 0
WHEN  ('?lbKeywordValues')TIMES 0

%CheckedDisables DEPEND %Control MULTI LONG TIMES 0

%CheckedDisableControl DEPEND %CheckedDisables DEFAULT TIMES 0

%CheckedDisableControlAction DEPEND %CheckedDisables DEFAULT TIMES 5
WHEN  ('')TIMES 0
WHEN  ('?DeleteKeyword')TIMES 0
WHEN  ('?InsertKeyword')TIMES 0
WHEN  ('?cmdCancel')TIMES 0
WHEN  ('?lbKeywordValues')TIMES 0

%UnCheckedDisables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedDisableControl DEPEND %UnCheckedDisables DEFAULT TIMES 0

%UnCheckedDisableControlAction DEPEND %UnCheckedDisables DEFAULT TIMES 5
WHEN  ('')TIMES 0
WHEN  ('?DeleteKeyword')TIMES 0
WHEN  ('?InsertKeyword')TIMES 0
WHEN  ('?cmdCancel')TIMES 0
WHEN  ('?lbKeywordValues')TIMES 0

%ProcedureOneInstance LONG  (0)
%FieldGradientColorType DEPEND %Control DEFAULT TIMES 4
WHEN  ('') ('Off')
WHEN  ('?BackColorBox') ('Off')
WHEN  ('?ForeColorBox') ('Off')
WHEN  ('?StyleGroup') ('Off')

%FieldGradientColorTypeVariable DEPEND %Control DEFAULT TIMES 4
WHEN  ('') ('')
WHEN  ('?BackColorBox') ('')
WHEN  ('?ForeColorBox') ('')
WHEN  ('?StyleGroup') ('')

%FieldGradientColorTypeIsVariable DEPEND %Control LONG TIMES 4
WHEN  ('') (0)
WHEN  ('?BackColorBox') (0)
WHEN  ('?ForeColorBox') (0)
WHEN  ('?StyleGroup') (0)

%FieldGradientColorFrom DEPEND %Control LONG TIMES 4
WHEN  ('') (-1)
WHEN  ('?BackColorBox') (-1)
WHEN  ('?ForeColorBox') (-1)
WHEN  ('?StyleGroup') (-1)

%FieldGradientColorFromVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorFromIsVariable DEPEND %Control LONG TIMES 4
WHEN  ('') (0)
WHEN  ('?BackColorBox') (0)
WHEN  ('?ForeColorBox') (0)
WHEN  ('?StyleGroup') (0)

%FieldGradientColorTo DEPEND %Control LONG TIMES 4
WHEN  ('') (-1)
WHEN  ('?BackColorBox') (-1)
WHEN  ('?ForeColorBox') (-1)
WHEN  ('?StyleGroup') (-1)

%FieldGradientColorToVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorToIsVariable DEPEND %Control LONG TIMES 4
WHEN  ('') (0)
WHEN  ('?BackColorBox') (0)
WHEN  ('?ForeColorBox') (0)
WHEN  ('?StyleGroup') (0)

%PreserveVarsLoc MULTI LONG  ()
%PreserveVarLoc DEPEND %PreserveVarsLoc DEFAULT TIMES 0

%ActiveImageEnable DEPEND %Control LONG TIMES 0

%AIObjectName DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('AIBtn0')

%AIEnableMimicControl DEPEND %Control LONG TIMES 1
WHEN  ('') (1)

%AIMimicControl DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('?Sheet')

%AIImgRound DEPEND %Control LONG TIMES 0

%AIOverrideImg DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgVariable DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIDisableImg DEPEND %Control DEFAULT TIMES 0

%AIDisableImgVariable DEPEND %Control DEFAULT TIMES 0

%AIDisableImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIHotImg DEPEND %Control DEFAULT TIMES 0

%AIHotImgVariable DEPEND %Control DEFAULT TIMES 0

%AIHotImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIPressedImg DEPEND %Control DEFAULT TIMES 0

%AIPressedImgVariable DEPEND %Control DEFAULT TIMES 0

%AIPressedImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
RECORDSIZE     EQUATE(80)

filequeueIndx  LONG
filequeueMax   LONG
filequeue      QUEUE
record            CSTRING(SIZE(AsciiFile.Buffer))
               END
szBuffer       CSTRING(SIZE(AsciiFile.Buffer)+1)

DefaultErrors  GROUP
Number            USHORT(1)
                  USHORT(Msg:InsertIllegal)
                  BYTE(Level:Notify)
                  PSTRING('Invalid Request')
                  PSTRING('%message already exists')
               END

szDrive        CSTRING(MAXDRIVE+1)
szDir          CSTRING(MAXDIR+1)
szName         CSTRING(MAXFILE+1)
szExtension    CSTRING(MAXEXT+1)
cc             LONG

popupMenu      PopupClass
thisReq        BYTE
bDirty         BOOL(FALSE)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3000
PROPERTY:END
defaultFont    CSTRING(32)
defaultSize    BYTE
defaultStyle   LONG
defaultFore    LONG
defaultBack    LONG
defaultCase    BYTE
defaultHide    BOOL
defaultHot     BOOL
defaultEOLF    BOOL
nCurrentStyle  BYTE
lastComment    CSTRING(256)

saveFilePatterns  LIKE(szFilePatterns)
saveKeywordSet    GROUP,PRE(savkwd)
szDescription        CSTRING(256)                          !
szKeywordNumber      CSTRING(16)                           !
szKeywords           CSTRING(2048)                         !
                  END
saveStyle         GROUP,PRE(savsty)
szDescription        CSTRING(256)                          !
szStyleNumber        CSTRING(16)                           !
szFontName           CSTRING(32)                           !
nFontSize            BYTE                                  !
nFontStyle           LONG                                  !
bBold                BOOL                                  !
bEolFilled           BOOL                                  !
bHide                BOOL                                  !
bHotSpot             BOOL                                  !
bItalic              BOOL                                  !
bUnderline           BOOL                                  !
nCaseOpt             BYTE                                  !
lForeColor           LONG                                  !
lBackColor           LONG                                  !
szSort               CSTRING(16)                           !
                  END
[END]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
LoadPropertyFile     ROUTINE
   cc = kcr_fnSplit(szPropertyFile, szDrive, szDir, szName, szExtension)

   AsciiFilename = szPropertyFile
   OPEN(AsciiFile,ReadOnly+DenyNone)
   IF ERRORCODE()
      !error opening file
   ELSE
      SET(AsciiFile)
      NEXT(AsciiFile)
      LOOP UNTIL ERRORCODE()

         filequeue.record = CLIP(AsciiFile.Buffer)
         ADD(filequeue)

         szBuffer = CLIP(LEFT(AsciiFile.Buffer))
         IF szBuffer = ''
            !skip
         ELSIF szBuffer[1] = '!'
            szBuffer[1] = ' '
            IF szDescription = ''
               szDescription = CLIP(LEFT(szBuffer))
            END
            LastComment = CLIP(LEFT(szBuffer))
         ELSE
            !process
            IF UPPER(szBuffer[1 : 6]) = 'LEXER='
               szLexer = LOWER(szBuffer[7 : LEN(szBuffer)])
            ELSIF UPPER(szBuffer[1 : 14]) = '[FILEPATTERNS]'
               DO LoadFilePatterns
               CYCLE
            ELSIF UPPER(szBuffer[1 : 9]) = '[OPTIONS]'
               DO LoadOptions
               CYCLE
            ELSIF UPPER(szBuffer[1 : 9])  = '[KEYWORDS'
               DO LoadKeywords
               CYCLE
            ELSIF UPPER(szBuffer[1 : 8])  = '[STYLES]'
               DO LoadStyles
               CYCLE
            END
         END
         NEXT(AsciiFile)
      END
      CLOSE(AsciiFile)
   END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
LoadFilePatterns     ROUTINE
   NEXT(AsciiFile)
   LOOP UNTIL ERRORCODE()
      szBuffer = CLIP(LEFT(AsciiFile.Buffer))
      IF szBuffer = ''
         !skip
      ELSIF szBuffer[1] = '!'
         szBuffer[1] = ' '
         LastComment = CLIP(LEFT(szBuffer))
      ELSIF szBuffer[1] = '['
         szFilePatterns = CLIP(LEFT(szFilePatterns))
         BREAK
      ELSE
         szFilePatterns = szFilePatterns & ' ' & szBuffer
      END
      filequeue.record = CLIP(AsciiFile.Buffer)
      ADD(filequeue)
      NEXT(AsciiFile)
   END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
LoadOptions    ROUTINE
   DATA
i     LONG
j     LONG
p     LONG

   CODE
      NEXT(AsciiFile)
      LOOP UNTIL ERRORCODE()
         szBuffer = CLIP(LEFT(AsciiFile.Buffer))
         IF szBuffer = ''
            !skip
         ELSIF szBuffer[1] = '!'
            lastComment = CLIP(LEFT(szBuffer[2 : LEN(szBuffer)]))
            !skip
         ELSIF szBuffer[1] = '['
            BREAK
         ELSE
            j = INSTRING(';',szBuffer)
            IF j = 0
               j = LEN(szBuffer)
            ELSE
               j -= 1
            END
            i = INSTRING('=',szBuffer)
            IF i
               qOptions.szOption = szBuffer[1 : i-1]
               qOptions.szOptionTip = ''
               IF j < LEN(szBuffer)
                  qOptions.szOptionTip = szBuffer[j+2 : LEN(szBuffer)]
                  p = INSTRING('||',qOptions.szOptionTip,1,1)
                  LOOP WHILE p > 0
                     qOptions.szOptionTip[p] = '<13>'
                     qOptions.szOptionTip[p+1] = '<10>'
                     p = INSTRING('||',qOptions.szOptionTip,1,p+2)
                  END
               END
               qOptions.szValue = szBuffer[i+1 : j]
               IF qOptions.szOption = 'asp.default.language'
                  CASE qOptions.szValue
                    OF '1'
                       qOptions.szValue = 'JavaScript'
                    OF '2'
                       qOptions.szValue = 'VBScript'
                    OF '3'
                       qOptions.szValue = 'Python'
                  END
                  qOptions.IsBool = FALSE
               ELSE
                  CASE qOptions.szValue
                    OF '0'
                       qOptions.szValue = 'false'
                       qOptions.IsBool = TRUE
                    OF '1'
                       qOptions.szValue = 'true'
                       qOptions.IsBool = TRUE
                  ELSE
                       qOptions.IsBool = FALSE
                  END
               END
               ADD(qOptions)
            END
         END
         filequeue.record = CLIP(AsciiFile.Buffer)
         ADD(filequeue)
         NEXT(AsciiFile)
      END
   EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
LoadKeywords         ROUTINE
   szBuffer = CLIP(LEFT(AsciiFile.Buffer))
   qKeywords.szKeywordNumber = UPPER(szBuffer[2 : LEN(szBuffer)-1])
   GET(qKeywords,+qKeywords.szKeywordNumber)
   IF ERRORCODE()
      qKeywords.szKeywordNumber = UPPER(szBuffer[2 : LEN(szBuffer)-1])
      qKeywords.szDescription = lastComment
      qKeywords.szKeywords = ''
      ADD(qKeywords,+qKeywords.szDescription)
      !ADD(qKeywords,+qKeywords.szKeywordNumber)
   END
   NEXT(AsciiFile)
   LOOP UNTIL ERRORCODE()
      szBuffer = CLIP(LEFT(AsciiFile.Buffer))
      IF szBuffer = ''
         !skip
      ELSIF szBuffer[1] = '!'
         szBuffer[1] = ' '
         LastComment = CLIP(LEFT(szBuffer))
      ELSIF szBuffer[1] = '['
         qKeywords.szKeywords = CLIP(LEFT(qKeywords.szKeywords))
         PUT(qKeywords)
         BREAK
      ELSE
         qKeywords.szKeywords = qKeywords.szKeywords & ' ' & szBuffer
      END
      filequeue.record = CLIP(AsciiFile.Buffer)
      ADD(filequeue)
      NEXT(AsciiFile)
   END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
LoadStyles           ROUTINE
   DATA
i           LONG
j           LONG
r           BYTE
g           BYTE
b           BYTE
qAttribute  QUEUE,PRE(att)
attribute      CSTRING(32)
            END
bDefault    BOOL

   CODE
      NEXT(AsciiFile)
      LOOP UNTIL ERRORCODE()
         szBuffer = CLIP(LEFT(AsciiFile.Buffer))
         IF szBuffer = ''
            !skip
         ELSIF szBuffer[1] = '!'
            szBuffer[1] = ' '
            LastComment = CLIP(LEFT(szBuffer))
         ELSIF szBuffer[1] = '['
            BREAK
         ELSE
            !Style#=font:,size:,bold,italic,underline,fore:,back:,eolfilled,case:,hide,hotSpot
            IF UPPER(szBuffer[1 : 5]) = 'STYLE'
               qStyles.szSort = UPPER(lastComment)
               j = INSTRING('=',szBuffer)
               IF qStyles.szSort = ''
                  IF j < 9
                     qStyles.szSort = 'STYLE' & ALL('0',9-j) & UPPER(szBuffer[6 : j-1])
                  ELSE
                     qStyles.szSort = UPPER(szBuffer[1 : j-1])
                  END
               END
               GET(qStyles,+qStyles.szSort)

               CLEAR(qStyles)
               IF j < 9
                  qStyles.szStyleNumber = 'STYLE' & ALL('0',9-j) & UPPER(szBuffer[6 : j-1])
               ELSE
                  qStyles.szStyleNumber = UPPER(szBuffer[1 : j-1])

               END
               qStyles.szDescription = lastComment
               qStyles.szFontName = ''
               qStyles.nFontStyle = FONT:regular
               qStyles.lForeColor = COLOR:NONE
               qStyles.lBackColor = COLOR:NONE
               qStyles.szSort = UPPER(lastComment)
               IF qStyles.szSort = ''
                  j = INSTRING('=',szBuffer)
                  IF j < 9
                     qStyles.szSort = 'STYLE' & ALL('0',9-j) & UPPER(szBuffer[6 : j-1])
                  ELSE
                     qStyles.szSort = UPPER(szBuffer[1 : j-1])
                  END
               END
               ADD(qStyles,+qStyles.szSort,qStyles.szStyleNumber)

               IF qStyles.szStyleNumber = 'STYLE032'
                  bDefault = TRUE
                  qStyles.nCaseOpt = 1
               ELSE
                  bDefault = FALSE
               END

               FREE(qAttribute)
               j += 1
               i = INSTRING(',',szBuffer,,j)
               LOOP WHILE i > 0
                  qAttribute.attribute = szBuffer[j : i-1]
                  ADD(qAttribute)
                  j = i+1
                  i = INSTRING(',',szBuffer,,j)
               END
               qAttribute.attribute = szBuffer[j : LEN(szBuffer)]
               ADD(qAttribute)

               j = RECORDS(qAttribute)
               LOOP i = 1 TO j
                  GET(qAttribute,i)
                  CASE UPPER(qAttribute.attribute[1 : 4])
                    OF 'FONT'
                       qStyles.szFontName = qAttribute.attribute[6 : LEN(qAttribute.attribute)]
                    OF 'SIZE'
                       qStyles.nFontSize = qAttribute.attribute[6 : LEN(qAttribute.attribute)]
                    OF 'BOLD'
                       qStyles.bBold = TRUE
                       qStyles.nFontStyle = BXOR(qStyles.nFontStyle,FONT:regular)
                       qStyles.nFontStyle = BOR(qStyles.nFontStyle,FONT:bold)
                    OF 'ITAL'
                       qStyles.bItalic = TRUE
                       qStyles.nFontStyle = BOR(qStyles.nFontStyle,FONT:italic)
                    OF 'UNDE'
                       qStyles.bUnderline = TRUE
                       qStyles.nFontStyle = BOR(qStyles.nFontStyle,FONT:underline)
                    OF 'FORE' !fore:#rrggbb
                       r = EVALUATE('0' & qAttribute.attribute[7  :  8] & 'h')
                       g = EVALUATE('0' & qAttribute.attribute[9  : 10] & 'h')
                       b = EVALUATE('0' & qAttribute.attribute[11 : 12] & 'h')
                       qStyles.lForeColor = ColourRGB(r,g,b)
                    OF 'BACK'
                       r = EVALUATE('0' & qAttribute.attribute[7  :  8] & 'h')
                       g = EVALUATE('0' & qAttribute.attribute[9  : 10] & 'h')
                       b = EVALUATE('0' & qAttribute.attribute[11 : 12] & 'h')
                       qStyles.lBackColor = ColourRGB(r,g,b)
                    OF 'EOLF'
                       qStyles.bEolFilled = TRUE
                    OF 'HIDE'
                       qStyles.bHide = TRUE
                    OF 'CASE'
                       qStyles.nCaseOpt = qAttribute.attribute[6 : LEN(qAttribute.attribute)]
                       qStyles.nCaseOpt += 1
                    OF 'HOTS'
                       qStyles.bHotSpot = TRUE
                  END
               END
               !look for default style
               IF bDefault
                  defaultFont  = qStyles.szFontName
                  defaultSize  = qStyles.nFontSize
                  defaultStyle = qStyles.nFontStyle
                  defaultFore  = qStyles.lForeColor
                  defaultBack  = qStyles.lBackColor
                  defaultCase  = qStyles.nCaseOPt
                  defaultHide  = qStyles.bHide
                  defaultHot   = qStyles.bHotSpot
                  defaultEOLF  = qStyles.bEolFilled
               END
               PUT(qStyles)
            END
         END
         filequeue.record = CLIP(AsciiFile.Buffer)
         ADD(filequeue)
         NEXT(AsciiFile)
      END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
SavePropertyFile     ROUTINE
   ThisWindow.Update()

   AsciiFilename = svSpecialFolder.GetDir(SV:CSIDL_APPDATA, 'Devuna' & '\' & 'KSS') & '\' & szName & szExtension
   IF FILEDIALOG('Save As ...',AsciiFilename,'KSS properties files|*.properties',BOR(BOR(FILE:Save,FILE:KeepDir),FILE:LongName))

      CREATE(AsciiFile)
      OPEN(AsciiFile,ReadWrite+DenyAll)

      filequeueMax = RECORDS(filequeue)
      LOOP filequeueIndx = 1 TO filequeueMax
         GET(filequeue,filequeueIndx)
         szBuffer = CLIP(LEFT(filequeue.record))
         IF szBuffer = ''
            AsciiFile.Buffer = filequeue.record
            ADD(AsciiFile)
         ELSIF szBuffer[1] = '!'
            IF filequeueIndx = 1
               AsciiFile.Buffer = '! ' & szDescription
               ADD(AsciiFile)
            ELSE
               AsciiFile.Buffer = filequeue.record
               ADD(AsciiFile)
            END
         ELSIF UPPER(szBuffer[1 : 6]) = 'LEXER='
            AsciiFile.Buffer = 'Lexer=' & szLexer
            ADD(AsciiFile)
         ELSIF UPPER(szBuffer[1 : 14]) = '[FILEPATTERNS]'
            AsciiFile.Buffer = filequeue.record
            ADD(AsciiFile)
            DO SaveFilePatterns
            DO SkipToNextSection
         ELSIF UPPER(szBuffer[1 : 9]) = '[OPTIONS]'
            AsciiFile.Buffer = filequeue.record
            ADD(AsciiFile)
            DO SaveOptions
            DO SkipToNextSection
            filequeueIndx += 1
         ELSIF UPPER(szBuffer[1 : 9])  = '[KEYWORDS'
            DO SaveKeywords
            DO SkipToStyles
            filequeueIndx += 1
         ELSIF UPPER(szBuffer[1 : 8])  = '[STYLES]'
            AsciiFile.Buffer = filequeue.record
            ADD(AsciiFile)
            DO SaveStyles
            BREAK
         ELSE
            AsciiFile.Buffer = filequeue.record
            ADD(AsciiFile)
         END
      END   !loop

      CLOSE(AsciiFile)

   END   !if filedialog
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
SaveFilePatterns  ROUTINE
   DATA
p     LONG

   CODE
      IF ?szFilePatterns{PROP:Hide} = TRUE
         DO LoadFilePatternsFromFilePatternQueue
      END
      LOOP WHILE LEN(szFilePatterns) > RECORDSIZE
         LOOP p = RECORDSIZE TO 1 BY -1
           IF szFilePatterns[p] = ' '
              AsciiFile.Buffer = szFilePatterns[1 : p-1]
              ADD(AsciiFile)
              szFilePatterns = szFilePatterns[p+1 : LEN(szFilePatterns)]
              BREAK
           END
         END
         IF p = 0
            BREAK
         END
      END
      AsciiFile.Buffer = szFilePatterns
      ADD(AsciiFile)
   EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
SaveOptions    ROUTINE
   DATA
n     LONG
p     LONG

   CODE
      LOOP n = 1 TO RECORDS(qOptions)
         GET(qOptions,n)
         IF qOptions.szOption = 'asp.default.language'
            CASE qOptions.szValue
              OF 'JavaScript'
                 AsciiFile.Buffer = qOptions.szOption & '=1'
              OF 'VBScript'
                 AsciiFile.Buffer = qOptions.szOption & '=2'
              OF 'Python'
                 AsciiFile.Buffer = qOptions.szOption & '=3'
            END
         ELSE
            CASE qOptions.szValue
              OF 'false'
                 AsciiFile.Buffer = qOptions.szOption & '=0'
              OF 'true'
                 AsciiFile.Buffer = qOptions.szOption & '=1'
            ELSE
                 AsciiFile.Buffer = qOptions.szOption & '=' & qOptions.szValue
            END
         END
         IF qOptions.szOptionTip <> ''
            p = INSTRING('<13,10>',qOptions.szOptionTip,1,1)
            LOOP WHILE p > 0
               qOptions.szOptionTip[p] = '|'
               qOptions.szOptionTip[p+1] = '|'
               p = INSTRING('<13,10>',qOptions.szOptionTip,1,p+2)
            END
            AsciiFile.Buffer = CLIP(AsciiFile.Buffer) & ';' & qOptions.szOptionTip
         END
         ADD(AsciiFile)
      END
      AsciiFile.Buffer = ''
      ADD(AsciiFile)
   EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
SaveKeywords      ROUTINE
   DATA
n     LONG
P     LONG
   CODE
      IF ?kwd:szKeywords{PROP:Hide} = TRUE
         DO LoadKeywordsFromListBoxQueue
      END
      !add the keyword groups
      SORT(qKeywords,qKeywords.szKeywordNumber)
      LOOP n = 1 TO RECORDS(qKeywords)
         GET(qKeyWords,n)
         AsciiFile.Buffer = '! ' & qKeywords.szDescription
         ADD(AsciiFile)
         AsciiFile.Buffer = '[' & qKeywords.szKeywordNumber & ']'
         ADD(AsciiFile)

         LOOP WHILE LEN(qKeywords.szKeywords) > recordSize
            LOOP p = recordSize TO 1 BY -1
              IF qKeywords.szKeywords[p] = ' '
                 AsciiFile.Buffer = qKeywords.szKeywords[1 : p-1]
                 ADD(AsciiFile)
                 qKeywords.szKeywords = qKeywords.szKeywords[p+1 : LEN(qKeywords.szKeywords)]
                 BREAK
              END
            END
            IF p = 0
               BREAK
            END
         END
         AsciiFile.Buffer = qKeywords.szKeywords
         ADD(AsciiFile)
         AsciiFile.Buffer = ''
         ADD(AsciiFile)
      END
   EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
SaveStyles     ROUTINE
   DATA
n           LONG
tempBuffer  CSTRING(SIZE(AsciiFile.Buffer)+1)

   CODE
      !write out any comments before styles
      filequeueIndx += 1
      GET(filequeue,filequeueIndx)
      szBuffer = CLIP(LEFT(filequeue.record))
      LOOP WHILE szBuffer = '' OR szBuffer[1] = '!'
         IF szBuffer[1] = '!'
            GET(filequeue,filequeueIndx+1)
            tempBuffer = UPPER(CLIP(LEFT(filequeue.record)))
            GET(filequeue,filequeueIndx)
            IF tempBuffer[1 : 5] = 'STYLE'
               BREAK
            END
         END
         AsciiFile.Buffer = filequeue.record
         ADD(AsciiFile)
         filequeueIndx += 1
         GET(filequeue,filequeueIndx)
         szBuffer = CLIP(LEFT(filequeue.record))
      END

      !add the styles
      !Style#=font:,size:,bold,italic,underline,fore:,back:,eolfilled,case:,hide,hotSpot
      !get default style
      SORT(qStyles,+qStyles.szStyleNumber)

      qStyles.szStyleNumber = 'STYLE032'
      GET(qStyles,+qStyles.szStyleNumber)
      IF NOT ERRORCODE()
         DO AddStyleRecord
      END

      LOOP n = 1 TO RECORDS(qStyles)
         GET(qStyles,n)
         IF qStyles.szStyleNumber = 'STYLE032'
            CYCLE
         ELSE
            DO AddStyleRecord
         END
      END   !styles loop
   EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
SkipToNextSection ROUTINE
   LOOP WHILE filequeueIndx < filequeueMax
      GET(fileQueue,filequeueIndx+1)
      szBuffer = CLIP(LEFT(filequeue.record))
      IF szBuffer[1] = '['
         filequeueIndx -= 1
         BREAK
      ELSE
         filequeueIndx += 1
      END
   END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
SkipToStyles      ROUTINE
   LOOP WHILE filequeueIndx < filequeueMax
      GET(fileQueue,filequeueIndx+1)
      szBuffer = CLIP(LEFT(filequeue.record))
      IF UPPER(szBuffer[1 : 8])  = '[STYLES]'
         filequeueIndx -= 1
         BREAK
      ELSE
         filequeueIndx += 1
      END
   END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
AddStyleRecord    ROUTINE
   DATA
szBuffer    CSTRING(SIZE(AsciiFile.Buffer)+1)

   CODE
      AsciiFile.Buffer = '! ' & qStyles.szDescription
      ADD(AsciiFile)
      szBuffer = qStyles.szStyleNumber & '='
      IF qStyles.szFontName <> ''
         szBuffer = szBuffer & 'font:' & qStyles.szFontName & ','
      END
      IF qStyles.nFontSize > 0
         szBuffer = szBuffer & 'size:' & qStyles.nFontSize & ','
      END
      IF qStyles.bBold = TRUE
         szBuffer = szBuffer & 'bold' & ','
      END
      IF qStyles.bItalic = TRUE
         szBuffer = szBuffer & 'italic' & ','
      END
      IF qStyles.bUnderline = TRUE
         szBuffer = szBuffer & 'underline' & ','
      END
      IF qStyles.lForeColor <> COLOR:NONE
         szBuffer = szBuffer & 'fore:' & srcGetRGBColorString(qStyles.lForeColor) & ','
      END
      IF qStyles.lBackColor <> COLOR:NONE
         szBuffer = szBuffer & 'back:' & srcGetRGBColorString(qStyles.lBackColor) & ','
      END
      IF qStyles.bEolFilled = TRUE
         szBuffer = szBuffer & 'eolfilled' & ','
      END
      IF qStyles.nCaseOpt > 0
         szBuffer = szBuffer & 'case:' & qStyles.nCaseOpt-1 & ','
      END
      IF qStyles.bHide = TRUE
         szBuffer = szBuffer & 'hide' & ','
      END
      IF qStyles.bHotSpot = TRUE
         szBuffer = szBuffer & 'hotspot' & ','
      END
      IF szBuffer[LEN(szBuffer)] = ','
         szBuffer[LEN(szBuffer)] = '<0>'
      END
      AsciiFile.Buffer = szBuffer
      ADD(AsciiFile)
   EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
FillFilePatternQueue     ROUTINE
   DATA
i     LONG
j     LONG

   CODE
      FREE(FilePatternQueue)
      j = 1
      i = INSTRING(' ',szFilePatterns,,j)
      LOOP WHILE i > 0
         FilePatternQueue.Pattern =szFilePatterns[j : i-1]
         ADD(FilePatternQueue,+FilePatternQueue.Pattern)
         j = i+1
         i = INSTRING(' ',szFilePatterns,,j)
      END
      FilePatternQueue.Pattern = szFilePatterns[j : LEN(szFilePatterns)]
      ADD(FilePatternQueue,+FilePatternQueue.Pattern)

      IF RECORDS(FilePatternQueue)
         ?ChangeFilePattern{PROP:Disable} = FALSE
         ?DeleteFilePattern{PROP:Disable} = FALSE
      ELSE
         ?ChangeFilePattern{PROP:Disable} = TRUE
         ?DeleteFilePattern{PROP:Disable} = TRUE
      END
      GET(FilePatternQueue,1)
      ?lbFilePatterns{PROP:Selected} = 1
   EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
LoadFilePatternsFromFilePatternQueue     ROUTINE
   DATA
i     LONG
j     LONG

   CODE
      szFilePatterns = ''
      SORT(FilePatternQueue,+FilePatternQueue.Pattern)
      j = RECORDS(FilePatternQueue)
      LOOP i = 1 TO j
         GET(FilePatternQueue,i)
         szFilePatterns = szFilePatterns & FilePatternQueue.Pattern & ' '
      END
      szFilePatterns[LEN(szFilePatterns)] = '<0>'
   EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
FillListBoxQueue     ROUTINE
   DATA
i     LONG
j     LONG

   CODE
      FREE(ListBoxQueue)

      GET(qKeywords,CHOICE(?lbKeywords))
      j = 1
      i = INSTRING(' ',qKeywords.szKeywords,,j)
      LOOP WHILE i > 0
         ListBoxQueue.Value = qKeywords.szKeywords[j : i-1]
         ADD(ListBoxQueue,+ListBoxQueue.Value)
         j = i+1
         i = INSTRING(' ',qKeywords.szKeywords,,j)
      END
      ListBoxQueue.Value = qKeywords.szKeywords[j : LEN(qKeywords.szKeywords)]
      ADD(ListBoxQueue,+ListBoxQueue.Value)

      IF RECORDS(ListBoxQueue)
         ?ChangeKeyword{PROP:Disable} = FALSE
         ?DeleteKeyword{PROP:Disable} = FALSE
      ELSE
         ?ChangeKeyword{PROP:Disable} = TRUE
         ?DeleteKeyword{PROP:Disable} = TRUE
      END
      GET(ListBoxQueue,1)
      ?lbKeywordValues{PROP:Selected} = 1
   EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
LoadKeywordsFromListBoxQueue     ROUTINE
   DATA
i     LONG
j     LONG

   CODE
      qKeywords.szKeywords = ''
      SORT(ListBoxQueue,+ListBoxQueue.Value)
      j = RECORDS(ListBoxQueue)
      LOOP i = 1 TO j
         GET(ListBoxQueue,i)
         qKeywords.szKeywords = qKeywords.szKeywords & ListBoxQueue.Value & ' '
      END
      qKeywords.szKeywords[LEN(qKeywords.szKeywords)] = '<0>'
      PUT(qKeywords)
   EXIT
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
CheckForChanges   ROUTINE
   IF bDirty = FALSE
      IF saveFilePatterns <> '' AND saveFilePatterns <> szFilePatterns
         bDirty = TRUE
      END

      IF bDirty = FALSE AND saveKeywordSet.szKeywordNumber <> ''
         IF saveKeywordSet.szDescription <> qKeywords.szDescription     |
         OR saveKeywordSet.szKeywordNumber <> qKeywords.szKeywordNumber |
         OR saveKeywordSet.szKeywords <> qKeywords.szKeywords
            bDirty = TRUE
         END
      END

      IF bDirty = FALSE AND saveStyle.szStyleNumber <> ''
         IF saveStyle.szDescription <> qStyles.szDescription   |
         OR saveStyle.szStyleNumber <> qStyles.szStyleNumber   |
         OR saveStyle.szFontName    <> qStyles.szFontName      |
         OR saveStyle.nFontSize     <> qStyles.nFontSize       |
         OR saveStyle.nFontStyle    <> qStyles.nFontStyle      |
         OR saveStyle.bBold         <> qStyles.bBold           |
         OR saveStyle.bEolFilled    <> qStyles.bEolFilled      |
         OR saveStyle.bHide         <> qStyles.bHide           |
         OR saveStyle.bHotSpot      <> qStyles.bHotSpot        |
         OR saveStyle.bItalic       <> qStyles.bItalic         |
         OR saveStyle.bUnderline    <> qStyles.bUnderline      |
         OR saveStyle.nCaseOpt      <> qStyles.nCaseOpt        |
         OR saveStyle.lForeColor    <> qStyles.lForeColor      |
         OR saveStyle.lBackColor    <> qStyles.lBackColor
            bDirty = TRUE
         END
      END
   END
[END]
EMBED %WindowManagerMethodCodeSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2700
PROPERTY:END
GlobalErrors.AddErrors(DefaultErrors)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5050
PROPERTY:END
popupMenu.Init()
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7800
PROPERTY:END
DO LoadPropertyFile
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8005
PROPERTY:END
Window{PROP:Text} = 'Property Editor [' & szName & szExtension & ']'
Window{PROP:Pixels} = TRUE
?StyleGroup{PROP:Ypos} = (?StyleGroup{PROP:Ypos} + 1)
Window{PROP:Pixels} = FALSE
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8040
PROPERTY:END
GET(qOptions,1)
?lbOptions{PROP:Selected} = 1
POST(EVENT:NewSelection,?lbOptions)
GET(qKeywords,1)
?lbKeywords{PROP:Selected} = 1
GET(qStyles,1)
?lbStyles{PROP:Selected} = 1
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8400
PROPERTY:END
CorrectForOffscreen(Window)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9300
PROPERTY:END
QEIP2:PopupMgr.AddItem('-')
QEIP2:PopupMgr.AddItemEvent('View as Text',EVENT:USER)
QEIP4:PopupMgr.AddItem('-')
QEIP4:PopupMgr.AddItemEvent('View as Text',EVENT:USER+1)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9700
PROPERTY:END
POST(EVENT:NewSelection,?lbKeywords)
POST(EVENT:NewSelection,?lbStyles)
POST(EVENT:NewSelection,?Sheet)
[END]
[END]
WHEN 'Reset'
[INSTANCES]
WHEN '(BYTE Force=0)'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1500
PROPERTY:END
!Viewer Options
!======================================================================================
!style##

nCurrentStyle = qStyles.szStyleNumber[6 : LEN(qStyles.szStyleNumber)]

IF qStyles.szFontName
   szFontDescription = CLIP(qStyles.szFontName) & ','
   ?Font:Prompt{PROP:FontStyle} = FONT:bold
ELSIF defaultFont
   szFontDescription = defaultFont & ','
   ?Font:Prompt{PROP:FontStyle} = FONT:italic
ELSE
   ?Font:Prompt{PROP:FontStyle} = FONT:italic
   szFontDescription = ''
END

IF qStyles.nFontSize
   szFontDescription = szFontDescription & qStyles.nFontSize & ','
   ?Font:Prompt{PROP:FontStyle} = BOR(?Font:Prompt{PROP:FontStyle},FONT:bold)
ELSIF defaultSize
   szFontDescription = szFontDescription & defaultSize & ','
   ?Font:Prompt{PROP:FontStyle} = BOR(?Font:Prompt{PROP:FontStyle},FONT:italic)
END

IF qStyles.nFontStyle = defaultStyle
   IF nCurrentStyle <> 32
      ?Font:Prompt{PROP:FontStyle} = FONT:italic
   END
END
IF BAND(qStyles.nFontStyle,0FFFh) >= FONT:bold
   szFontDescription = szFontDescription & 'Bold,'
   qStyles.bBold = TRUE
   ?Font:Prompt{PROP:FontStyle} = BOR(?Font:Prompt{PROP:FontStyle},FONT:bold)
ELSIF BAND(qStyles.nFontStyle,0FFFh) >= FONT:regular
   szFontDescription = szFontDescription & 'Regular,'
   qStyles.bBold = FALSE
ELSE
   szFontDescription = szFontDescription & 'Thin,'
   qStyles.bBold = FALSE
   ?Font:Prompt{PROP:FontStyle} = BOR(?Font:Prompt{PROP:FontStyle},FONT:bold)
END
IF BAND(qStyles.nFontStyle,FONT:italic) = FONT:italic
   szFontDescription = szFontDescription & 'Italic,'
   qStyles.bItalic = TRUE
   ?Font:Prompt{PROP:FontStyle} = BOR(?Font:Prompt{PROP:FontStyle},FONT:bold)
ELSE
   qStyles.bItalic = FALSE
END
IF BAND(qStyles.nFontStyle,FONT:underline) = FONT:underline
   szFontDescription = szFontDescription & 'Underline,'
   qStyles.bUnderline = TRUE
   ?Font:Prompt{PROP:FontStyle} = BOR(?Font:Prompt{PROP:FontStyle},FONT:bold)
ELSE
   qStyles.bUnderline = FALSE
END

IF szFontDescription[LEN(szFontDescription)] = ','
   szFontDescription[LEN(szFontDescription)] = '<0>'
END

?ForeColor:Prompt{PROP:FontStyle} = FONT:bold
IF qStyles.lForeColor <> COLOR:NONE
   ?ForeColorBox{PROP:Fill} = qStyles.lForeColor
   szForeColor = srcGetColorString(qStyles.lForeColor)
   !IF NOT INSTRING(':',szForeColor)
   !   szForeColor = srcGetRGBColorString(qStyles.lForeColor)
   !END
ELSIF defaultFore <>  COLOR:NONE
   ?ForeColor:Prompt{PROP:FontStyle} = FONT:italic
   ?ForeColorBox{PROP:Fill} = defaultFore
   szForeColor = srcGetColorString(defaultFore)
   !IF NOT INSTRING(':',szForeColor)
   !   szForeColor = srcGetRGBColorString(defaultFore)
   !END
ELSE
   ?ForeColor:Prompt{PROP:FontStyle} = FONT:italic
   ?ForeColorBox{PROP:Fill} = COLOR:NONE
   szForeColor = srcGetColorString(COLOR:NONE)
END

?BackColor:Prompt{PROP:FontStyle} = FONT:bold
IF qStyles.lBackColor <> COLOR:NONE
   ?BackColorBox{PROP:Fill} = qStyles.lBackColor
   szBackColor = srcGetColorString(qStyles.lBackColor)
   !IF NOT INSTRING(':',szBackColor)
   !   szBackColor = srcGetRGBColorString(qStyles.lBackColor)
   !END
ELSIF defaultBack <>  COLOR:NONE
   ?BackColor:Prompt{PROP:FontStyle} = FONT:italic
   ?BackColorBox{PROP:Fill} = defaultBack
   szBackColor = srcGetColorString(defaultBack)
   !IF NOT INSTRING(':',szBackColor)
   !   szBackColor = srcGetRGBColorString(defaultBack)
   !END
ELSE
   ?BackColor:Prompt{PROP:FontStyle} = FONT:italic
   ?BackColorBox{PROP:Fill} = COLOR:NONE
   szBackColor = srcGetColorString(COLOR:NONE)
   !szBackColor = srcGetRGBColorString(COLOR:NONE)
END

PUT(qStyles)

IF qStyles.bHide = 0
   qStyles.bHide = defaultHide
   IF nCurrentStyle <> 32
      ?sty:bHide{PROP:FontStyle} = FONT:italic
   ELSE
      ?sty:bHide{PROP:FontStyle} = FONT:bold
   END
ELSE
   ?sty:bHide{PROP:FontStyle} = FONT:bold
END

IF qStyles.bHotSpot = 0
   qStyles.bHotSpot = defaultHot
   IF nCurrentStyle <> 32
      ?sty:bHotSpot{PROP:FontStyle} = FONT:italic
   ELSE
      ?sty:bHotSpot{PROP:FontStyle} = FONT:bold
   END
ELSE
   ?sty:bHotSpot{PROP:FontStyle} = FONT:bold
END

IF qStyles.bEolFilled = 0
   qStyles.bEolFilled = defaultEOLF
   IF nCurrentStyle <> 32
      ?sty:bEolFilled{PROP:FontStyle} = FONT:italic
   ELSE
      ?sty:bEolFilled{PROP:FontStyle} = FONT:bold
   END
ELSE
   ?sty:bEolFilled{PROP:FontStyle} = FONT:bold
END

IF qStyles.nCaseOpt = 0
   !qStyles.nCaseOpt = defaultCase
   ?nCaseOpt:Prompt{PROP:FontStyle} = FONT:italic
   ?STY:NCASEOPT:Mixed{PROP:FontStyle} = CHOOSE(defaultCase = 1,FONT:italic,FONT:regular)
   ?STY:NCASEOPT:Upper{PROP:FontStyle} = CHOOSE(defaultCase = 2,FONT:italic,FONT:regular)
   ?STY:NCASEOPT:Lower{PROP:FontStyle} = CHOOSE(defaultCase = 3,FONT:italic,FONT:regular)
ELSE
   ?nCaseOpt:Prompt{PROP:FontStyle} = FONT:bold
   ?STY:NCASEOPT:Mixed{PROP:FontStyle} = CHOOSE(qStyles.nCaseOpt = 1,FONT:bold,FONT:regular)
   ?STY:NCASEOPT:Upper{PROP:FontStyle} = CHOOSE(qStyles.nCaseOpt = 2,FONT:bold,FONT:regular)
   ?STY:NCASEOPT:Lower{PROP:FontStyle} = CHOOSE(qStyles.nCaseOpt = 3,FONT:bold,FONT:regular)
END
[END]
[END]
WHEN 'Kill'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9800
PROPERTY:END
popupMenu.Kill()
[END]
[END]
WHEN 'TakeEvent'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6300
PROPERTY:END
  CASE EVENT()
    OF EVENT:User
       DO LoadKeywordsFromListBoxQueue
       HIDE(?lbKeywordValues)
       UNHIDE(?kwd:szKeywords)
       DISPLAY(?kwd:szKeywords)
    OF EVENT:User+1
       DO LoadFilePatternsFromFilePatternQueue
       HIDE(?lbFilePatterns)
       UNHIDE(?szFilePatterns)
       DISPLAY(?szFilePatterns)
  END
[END]
[END]
[END]
EMBED %ControlEventHandling
[INSTANCES]
WHEN '?lbKeywords'
[INSTANCES]
WHEN 'NewSelection'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2500
PROPERTY:END
IF ?kwd:szKeywords{PROP:Hide} = TRUE
   DO LoadKeywordsFromListBoxQueue
END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
DO CheckForChanges
GET(qKeywords,CHOICE(?lbKeywords))
saveKeywordSet = qKeywords
IF ?kwd:szKeywords{PROP:Hide} = TRUE
   DO FillListBoxQueue
   DISPLAY(?lbKeywordValues)
ELSE
   DISPLAY(?kwd:szKeywords)
END
[END]
[END]
WHEN '?lbStyles'
[INSTANCES]
WHEN 'NewSelection'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
DO CheckForChanges
GET(qStyles,CHOICE(?lbStyles))
saveStyle = qStyles
SELF.Reset()
[END]
[END]
WHEN '?cmdSave'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
DO CheckForChanges
IF bDirty = TRUE
   DO SavePropertyFile
   bPropertiesChanged = TRUE
END
POST(EVENT:CloseWindow)
[END]
[END]
WHEN '?cmdCancel'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
bPropertiesChanged = FALSE
POST(EVENT:CloseWindow)
[END]
[END]
WHEN '?cmdFontDialog'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
CASE POPUP('Default|Select Font')
OF 1
   qStyles.szFontName = ''
   qStyles.nFontSize  = 0
   qStyles.nFontStyle = FONT:regular
   SELF.Reset()
OF 2
   IF FONTDIALOG('Choose Font',qStyles.szFontName,qStyles.nFontSize,qStyles.lForeColor,qStyles.nFontStyle,0)
      IF nCurrentStyle = 32
         defaultFont = qStyles.szFontName
         defaultSize = qStyles.nFontSize
         defaultFore = qStyles.lForeColor
         defaultStyle = qStyles.nFontStyle
      END
      SELF.Reset()
   END
END
[END]
[END]
WHEN '?cmdSelectForeColor'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
CASE POPUP('Default|Select Color')
OF 1
   qStyles.lForeColor = COLOR:NONE
   IF nCurrentStyle = 32
      defaultFore = qStyles.lForeColor
   END
   SELF.Reset()
OF 2
   IF COLORDIALOG('Fore Color',qStyles.lForeColor)
      IF nCurrentStyle = 32
         defaultFore = qStyles.lForeColor
      END
      SELF.Reset()
   END
END
[END]
[END]
WHEN '?cmdSelectBackColor'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
CASE POPUP('Default|Select Color')
OF 1
   qStyles.lBackColor = COLOR:NONE
   IF nCurrentStyle = 32
      defaultBack = qStyles.lBackColor
   END
   SELF.Reset()
OF 2
   IF COLORDIALOG('Back Color',qStyles.lBackColor)
      IF nCurrentStyle = 32
         defaultBack = qStyles.lBackColor
      END
      SELF.Reset()
   END
END
[END]
[END]
WHEN '?sty:bHide'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
IF nCurrentStyle = 32
   defaultHide = sty:bHide
END
SELF.Reset()
[END]
[END]
WHEN '?sty:bHotSpot'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
IF nCurrentStyle = 32
   defaultHot = sty:bHotSpot
END
SELF.Reset()
[END]
[END]
WHEN '?sty:bEolFilled'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
IF nCurrentStyle = 32
   defaultEOLF = sty:bEolFilled
END
SELF.Reset()
[END]
[END]
WHEN '?sty:nCaseOpt'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
IF nCurrentStyle = 32
   defaultCase = sty:nCaseOpt
END
SELF.Reset()
[END]
[END]
WHEN '?kwd:szKeywords'
[INSTANCES]
WHEN 'AlertKey'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
CASE KEYCODE()
  OF MouseRight
     IF POPUP('View as List')
         SELF.Update()
         !PUT(qKeywords)
         HIDE(?kwd:szKeywords)
         DO FillListBoxQueue
         UNHIDE(?lbKeywordValues)
     END
END
[END]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
SELF.Update()
PUT(qKeywords)
[END]
[END]
WHEN '?lbKeywordValues'
[INSTANCES]
WHEN 'AlertKey'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8900
PROPERTY:END
CASE KEYCODE()
  OF InsertKey
     POST(EVENT:Accepted,?InsertKeyword)
  OF DeleteKey
     POST(EVENT:Accepted,?DeleteKeyword)
  OF CtrlEnter
     POST(EVENT:Accepted,?ChangeKeyword)
END
[END]
[END]
WHEN '?szFilePatterns'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
DO CheckForChanges
[END]
WHEN 'Selected'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2500
PROPERTY:END
saveFilePatterns = szFilePatterns
[END]
WHEN 'AlertKey'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
CASE KEYCODE()
  OF MouseRight
     IF POPUP('View as List')
         SELF.Update()
         HIDE(?szFilePatterns)
         DO FillFilePatternQueue
         UNHIDE(?lbFilePatterns)
     END
END
[END]
[END]
WHEN '?cmdSelectCase'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
CASE POPUP('Default|Mixed|Upper|Lower')
  OF 1
     sty:nCaseOpt = 0
  OF 2
     sty:nCaseOpt = 1
  OF 3
     sty:nCaseOpt = 2
  OF 4
     sty:nCaseOpt = 3
END
SELF.Reset()
[END]
[END]
WHEN '?Sheet'
[INSTANCES]
WHEN 'TabChanging'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2500
PROPERTY:END
(?Sheet{PROP:ChoiceFeq}){PROP:FontColor} = COLOR:Black !00E16941h
(?Sheet{PROP:ChoiceFeq}){PROP:FontStyle} = FONT:regular
[END]
WHEN 'NewSelection'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
(?Sheet{PROP:ChoiceFeq}){PROP:FontColor} = 00E16941h
(?Sheet{PROP:ChoiceFeq}){PROP:FontStyle} = FONT:Bold
[END]
[END]
WHEN '?lbFilePatterns'
[INSTANCES]
WHEN 'AlertKey'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8900
PROPERTY:END
CASE KEYCODE()
  OF InsertKey
     POST(EVENT:Accepted,?InsertFilePattern)
  OF DeleteKey
     POST(EVENT:Accepted,?DeleteFilePattern)
  OF CtrlEnter
     POST(EVENT:Accepted,?ChangeFilePattern)
END
[END]
[END]
WHEN '?lbOptions'
[INSTANCES]
WHEN 'NewSelection'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
GET(qOptions,CHOICE(?lbOptions))
DISPLAY(?opt:szOptionTip)
[END]
[END]
[END]
EMBED %WindowManagerMethodDataSection
[INSTANCES]
WHEN 'TakeFieldEvent'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
Indx   LONG
[END]
[END]
[END]
EMBED %QEIPFieldCreateControlCodeSection
[INSTANCES]
WHEN '2'
[INSTANCES]
WHEN 'lbq:Value'
[INSTANCES]
WHEN 'CreateControl'
[INSTANCES]
WHEN '(),VIRTUAL,PROTECTED'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
IF szLexer = 'clarion'
   SELF.Feq{PROP:Upr} = TRUE
END
SELF.Feq{PROP:Alrt,255} = DeleteKey
[END]
[END]
[END]
[END]
WHEN '3'
[INSTANCES]
WHEN 'opt:szValue'
[INSTANCES]
WHEN 'CreateControl'
[INSTANCES]
WHEN '(),VIRTUAL,PROTECTED'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2500
PROPERTY:END
IF qOptions.IsBool
   SELF.Feq = CREATE(0,CREATE:droplist)
   SELF.Feq{PROP:FROM} = 'false|true'
   SELF.Feq{PROP:Drop} = 2
ELSIF qOptions.szOption = 'asp.default.language'
   SELF.Feq = CREATE(0,CREATE:droplist)
   SELF.Feq{PROP:FROM} = 'JavaScript|VBScript|Python'
   SELF.Feq{PROP:Drop} = 3
ELSE
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
END
[END]
[END]
[END]
[END]
[END]
EMBED %QEIPTakeCompletedCodeSection
[INSTANCES]
WHEN '2'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 500
PROPERTY:END
IF Force <> Button:No
   IF SELF.Req = InsertRecord
      ptr = POINTER(ListBoxQueue)
      thisValue = ListBoxQueue.Value
      GET(ListBoxQueue,ListBoxQueue.Value)
      IF ERRORCODE()
         GET(ListBoxQueue,ptr)
         ListBoxQueue.Value = thisValue
      ELSE
         GET(ListBoxQueue,ptr)
         ListBoxQueue.Value = thisValue
         GlobalErrors.ThrowMessage(Msg:InsertIllegal,'Keyword')
         Force = Button:No
      END
   ELSIF SELF.Req = ChangeRecord
      IF NOT SELF.Fields.Equal()
         ptr = POINTER(ListBoxQueue)
         thisValue = ListBoxQueue.Value
         GET(ListBoxQueue,ListBoxQueue.Value)
         IF ERRORCODE()
            GET(ListBoxQueue,ptr)
            ListBoxQueue.Value = thisValue
         ELSE
            GET(ListBoxQueue,ptr)
            GlobalErrors.ThrowMessage(Msg:InsertIllegal,'Keyword')
            Force = Button:No
         END
      END
   END
END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
thisValue = ListBoxQueue.Value
SORT(ListBoxQueue,+ListBoxQueue.Value)
ListBoxQueue.Value = thisValue
GET(ListBoxQueue,ListBoxQueue.Value)
?lbKeywordValues{PROP:Selected} = POINTER(ListBoxQueue)
[END]
[END]
EMBED %QEIPRunCodeSection
[INSTANCES]
WHEN '2'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2500
PROPERTY:END
thisReq = Req
[END]
[END]
EMBED %QEIPTakeCompletedDataSection
[INSTANCES]
WHEN '2'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
ptr         LONG
thisValue   LIKE(ListBoxQueue.Value)
[END]
[END]
EMBED %WindowEventHandling
[INSTANCES]
WHEN 'OpenWindow'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
 !IF glo:ShowPropertyEditorInfo = TRUE
 !   PropertyEditorInfo()
 !END
[END]
[END]
EMBED %QEIPFieldTakeAcceptedCodeSection
[INSTANCES]
WHEN '3'
[INSTANCES]
WHEN 'opt:szValue'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
CASE ReturnValue
  OF EditAction:Cancel OROF EditAction:None
     !nothing changed
ELSE
     bDirty = TRUE
END
[END]
[END]
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME KCR KCR_QueueEIP
[INSTANCE]
INSTANCE 2
[PROMPTS]
%QueueEIPIncludePopupMenu LONG  (1)
%QueueEIPContinuousInsert LONG  (0)
%QueueEIPInsertionPoint DEFAULT  ('After')
%QueueEIPTabAction DEFAULT  ('Always')
%QueueEIPTabRemain LONG  (0)
%QueueEIPEnterAction DEFAULT  ('Always')
%QueueEIPEnterRemain LONG  (0)
%QueueEIPArrowAction DEFAULT  ('Default')
%QueueEIPArrowRemain LONG  (1)
%QueueEIPArrowRetain LONG  (1)
%QueueEIPFocusAction DEFAULT  ('Default')
%QueueEditInPlaceList MULTI LONG  (1)
%QueueEditInPlaceField DEPEND %QueueEditInPlaceList FIELD TIMES 1
WHEN  (1) (lbq:Value)

%QueueEditInPlaceFieldDefaultValue DEPEND %QueueEditInPlaceList DEFAULT TIMES 1
WHEN  (1) ('')

%QueueAllowEIP DEPEND %QueueEditInPlaceList LONG TIMES 1
WHEN  (1) (1)

%QueueEditClass DEPEND %QueueEditInPlaceList DEFAULT TIMES 1
WHEN  (1) ('EditEntryClass')

%QueueColorColumn DEPEND %QueueEditInPlaceList LONG TIMES 1
WHEN  (1) (0)

%QueueTextColor DEPEND %QueueEditInPlaceList LONG TIMES 1
WHEN  (1) (16711680)

%QueueBackColor DEPEND %QueueEditInPlaceList LONG TIMES 1
WHEN  (1) (-1)

%QueueTextSelected DEPEND %QueueEditInPlaceList LONG TIMES 1
WHEN  (1) (-1)

%QueueBackSelected DEPEND %QueueEditInPlaceList LONG TIMES 1
WHEN  (1) (-1)

%HotFields MULTI LONG  ()
%HotField DEPEND %HotFields FIELD TIMES 0

[INSTANCE]
INSTANCE 3
[PROMPTS]
%QueueEIPIncludePopupMenu LONG  (1)
%QueueEIPContinuousInsert LONG  (0)
%QueueEIPInsertionPoint DEFAULT  ('After')
%QueueEIPTabAction DEFAULT  ('Default')
%QueueEIPTabRemain LONG  (0)
%QueueEIPEnterAction DEFAULT  ('Default')
%QueueEIPEnterRemain LONG  (0)
%QueueEIPArrowAction DEFAULT  ('Default')
%QueueEIPArrowRemain LONG  (1)
%QueueEIPArrowRetain LONG  (1)
%QueueEIPFocusAction DEFAULT  ('Default')
%QueueEditInPlaceList MULTI LONG  (1, 2)
%QueueEditInPlaceField DEPEND %QueueEditInPlaceList FIELD TIMES 2
WHEN  (1) (opt:szOption)
WHEN  (2) (opt:szValue)

%QueueEditInPlaceFieldDefaultValue DEPEND %QueueEditInPlaceList DEFAULT TIMES 0

%QueueAllowEIP DEPEND %QueueEditInPlaceList LONG TIMES 2
WHEN  (1) (0)
WHEN  (2) (1)

%QueueEditClass DEPEND %QueueEditInPlaceList DEFAULT TIMES 2
WHEN  (1) ('EditEntryClass')
WHEN  (2) ('EditEntryClass')

%QueueColorColumn DEPEND %QueueEditInPlaceList LONG TIMES 2
WHEN  (1) (0)
WHEN  (2) (0)

%QueueTextColor DEPEND %QueueEditInPlaceList LONG TIMES 2
WHEN  (1) (16711680)
WHEN  (2) (16711680)

%QueueBackColor DEPEND %QueueEditInPlaceList LONG TIMES 2
WHEN  (1) (-1)
WHEN  (2) (-1)

%QueueTextSelected DEPEND %QueueEditInPlaceList LONG TIMES 2
WHEN  (1) (-1)
WHEN  (2) (-1)

%QueueBackSelected DEPEND %QueueEditInPlaceList LONG TIMES 2
WHEN  (1) (-1)
WHEN  (2) (-1)

%HotFields MULTI LONG  ()
%HotField DEPEND %HotFields FIELD TIMES 0

[INSTANCE]
INSTANCE 4
[PROMPTS]
%QueueEIPIncludePopupMenu LONG  (1)
%QueueEIPContinuousInsert LONG  (0)
%QueueEIPInsertionPoint DEFAULT  ('After')
%QueueEIPTabAction DEFAULT  ('Default')
%QueueEIPTabRemain LONG  (0)
%QueueEIPEnterAction DEFAULT  ('Default')
%QueueEIPEnterRemain LONG  (0)
%QueueEIPArrowAction DEFAULT  ('Default')
%QueueEIPArrowRemain LONG  (1)
%QueueEIPArrowRetain LONG  (1)
%QueueEIPFocusAction DEFAULT  ('Default')
%QueueEditInPlaceList MULTI LONG  ()
%QueueEditInPlaceField DEPEND %QueueEditInPlaceList FIELD TIMES 0

%QueueEditInPlaceFieldDefaultValue DEPEND %QueueEditInPlaceList DEFAULT TIMES 0

%QueueAllowEIP DEPEND %QueueEditInPlaceList LONG TIMES 0

%QueueEditClass DEPEND %QueueEditInPlaceList DEFAULT TIMES 0

%QueueColorColumn DEPEND %QueueEditInPlaceList LONG TIMES 0

%QueueTextColor DEPEND %QueueEditInPlaceList LONG TIMES 0

%QueueBackColor DEPEND %QueueEditInPlaceList LONG TIMES 0

%QueueTextSelected DEPEND %QueueEditInPlaceList LONG TIMES 0

%QueueBackSelected DEPEND %QueueEditInPlaceList LONG TIMES 0

%HotFields MULTI LONG  ()
%HotField DEPEND %HotFields FIELD TIMES 0

[CALLS]
ColourRGB
CorrectForOffScreen
srcGetColorString
srcGetRGBColorString
[WINDOW]
Window  WINDOW('Property Editor'),AT(,,400,149),FONT('Segoe UI',10),HSCROLL,GRAY,HLP('PropertyEditor.htm'), |
          SYSTEM
          SHEET,AT(5,5,390,120),USE(?Sheet),IMM,#ORDINAL(1)
            TAB('General'),USE(?TAB1),#ORDINAL(2)
              PROMPT('Description'),AT(10,20),USE(?szDescription:Prompt),FONT(,,COLOR:RoyalBlue, |
                FONT:bold),TRN,#ORDINAL(3)
              ENTRY(@s255),AT(55,20,330,10),USE(szDescription),FONT(,,,FONT:regular),#ORDINAL(4)
              PROMPT('File Patterns'),AT(10,30),USE(?FilePatterns:Prompt),FONT(,,COLOR:RoyalBlue, |
                FONT:bold),TRN,#ORDINAL(5)
              TEXT,AT(10,40,379,20),USE(szFilePatterns),VSCROLL,ALRT(MouseRight),TIP('not case s' & |
                'ensitive, order of extentions is ignored'),#ORDINAL(6)
              LIST,AT(10,40,88,80),USE(?lbFilePatterns),VSCROLL,ALRT(CtrlEnter),ALRT(DeleteKey), |
                ALRT(InsertKey),ALRT(MouseRight),FORMAT('80L(2)|M@s20@'),FROM(FilePatternQueue), |
                HIDE,#FIELDS(fpq:Pattern),#ORIG(?List),#SEQ(4),#ORDINAL(7)
            END
            TAB('Options'),USE(?TAB2),#ORDINAL(8)
              LIST,AT(10,22,379,97),USE(?lbOptions),VSCROLL,ALRT(MouseLeft2),FORMAT('100L(2)|MP' & |
                'S(500)@s255@250L(2)|MS(500)@s255@'),FROM(qOptions),#FIELDS(opt:szOption,opt:szValue), |
                #ORIG(?List),#SEQ(3),#ORDINAL(9)
              TEXT,AT(5,128,286,19),USE(opt:szOptionTip),FONT(,8),FLAT,READONLY,SKIP,TRN,#ORDINAL(10)
            END
            TAB('Keywords'),USE(?TAB3),#ORDINAL(11)
              LIST,AT(10,22,145,97),USE(?lbKeywords),VSCROLL,ALRT(MouseRight),FORMAT('140L(2)|MS' & |
                '(1024)@s255@'),FROM(qKeywords),#FIELDS(kwd:szKeywordNumber),#ORDINAL(12)
              TEXT,AT(160,22,230,97),USE(kwd:szKeywords),VSCROLL,ALRT(MouseRight),#ORDINAL(13)
              LIST,AT(160,22,230,97),USE(?lbKeywordValues),VSCROLL,ALRT(CtrlEnter),ALRT(DeleteKey), |
                ALRT(InsertKey),ALRT(MouseRight),FORMAT('230L(2)|M@s32@'),FROM(ListBoxQueue), |
                HIDE,#FIELDS(lbq:Value),#ORIG(?List),#SEQ(2),#ORDINAL(14)
            END
            TAB('Styles'),USE(?TAB4),#ORDINAL(15)
              LIST,AT(10,22,145,97),USE(?lbStyles),VSCROLL,ALRT(MouseRight),FORMAT('140L(2)|MS' & |
                '(1024)@s255@'),FROM(qStyles),#FIELDS(sty:szStyleNumber),#ORDINAL(16)
              BOX,AT(159,21,231,98),USE(?StyleGroup),COLOR(00A0A0A0h),LINEWIDTH(1),#ORDINAL(17)
              PROMPT('Font'),AT(181,25),USE(?Font:Prompt),TRN,#ORDINAL(18)
              ENTRY(@s63),AT(221,25,150,10),USE(szFontDescription),DISABLE,#ORDINAL(19)
              BUTTON('...'),AT(375,25,11,10),USE(?cmdFontDialog),#ORDINAL(20)
              BOX,AT(166,40,11,10),USE(?ForeColorBox),COLOR(00B99D7Fh),FILL(COLOR:Black),LINEWIDTH(1), |
                ROUND,#ORDINAL(21)
              PROMPT('Fore Color'),AT(181,40),USE(?ForeColor:Prompt),#ORDINAL(22)
              ENTRY(@s30),AT(221,40,150,10),USE(szForeColor),LEFT,DISABLE,#ORDINAL(23)
              BUTTON('...'),AT(375,40,11,10),USE(?cmdSelectForeColor),TIP('Select Fore Color'), |
                #ORDINAL(24)
              BOX,AT(166,56,11,10),USE(?BackColorBox),COLOR(00B99D7Fh),FILL(COLOR:White),LINEWIDTH(1), |
                ROUND,#ORDINAL(25)
              PROMPT('Back Color'),AT(181,56),USE(?BackColor:Prompt),#ORDINAL(26)
              ENTRY(@s30),AT(221,56,150,10),USE(szBackColor),LEFT,DISABLE,#ORDINAL(27)
              BUTTON('...'),AT(375,56,11,10),USE(?cmdSelectBackColor),TIP('Select Back Color'), |
                #ORDINAL(28)
              CHECK(' Hide'),AT(221,72,40,10),USE(sty:bHide),TRN,#ORDINAL(29)
              CHECK(' Hot Spot'),AT(270,72,50,10),USE(sty:bHotSpot),TRN,#ORDINAL(30)
              CHECK(' EOL Filled'),AT(331,72,55,10),USE(sty:bEolFilled),TRN,#ORDINAL(31)
              PROMPT('Case'),AT(181,87),USE(?nCaseOpt:Prompt),#ORDINAL(32)
              OPTION,AT(221,85,166,14),USE(sty:nCaseOpt),#ORDINAL(33)
                RADIO(' Mixed'),AT(221,87),USE(?STY:NCASEOPT:Mixed),TRN,VALUE('1'),#ORDINAL(34)
                RADIO(' Upper'),AT(270,87),USE(?STY:NCASEOPT:Upper),TRN,VALUE('2'),#ORDINAL(35)
                RADIO(' Lower'),AT(331,87),USE(?STY:NCASEOPT:Lower),TRN,VALUE('3'),#ORDINAL(36)
              END
              BUTTON('...'),AT(375,87,11,10),USE(?cmdSelectCase),#ORDINAL(37)
              STRING('Legend'),AT(166,103),USE(?STRING5),FONT(,8),TRN,#ORDINAL(38)
              STRING('bold'),AT(198,103),USE(?STRING1),FONT(,8,,FONT:bold),TRN,#ORDINAL(39)
              STRING('= overrides default'),AT(215,103),USE(?STRING2),FONT(,8),TRN,#ORDINAL(40)
              STRING('italic'),AT(278,103),USE(?STRING3),FONT(,8,,FONT:regular+FONT:italic), |
                TRN,#ORDINAL(41)
              STRING('= uses default'),AT(295,103),USE(?STRING4),FONT(,8),TRN,#ORDINAL(42)
            END
          END
          BUTTON('&Save'),AT(298,130,45,14),USE(?cmdSave),DEFAULT,#ORDINAL(43)
          BUTTON('Cancel'),AT(348,130,45,14),USE(?cmdCancel),#ORDINAL(44)
          BUTTON('&Insert'),AT(54,130,30,12),USE(?InsertFilePattern),KEY(InsertKey),HIDE,#ORIG(?Insert), |
            #SEQ(4),#ORDINAL(45)
          BUTTON('&Edit'),AT(88,130,30,12),USE(?ChangeFilePattern),KEY(CtrlEnter),HIDE,#ORIG(?Change), |
            #SEQ(4),#ORDINAL(46)
          BUTTON('&Delete'),AT(121,130,30,12),USE(?DeleteFilePattern),KEY(DeleteKey),HIDE, |
            #ORIG(?Delete),#SEQ(4),#ORDINAL(47)
          BUTTON('&Edit'),AT(159,130,30,12),USE(?ChangeOption),KEY(CtrlEnter),HIDE,#ORIG(?Change), |
            #SEQ(3),#ORDINAL(48)
          BUTTON('&Insert'),AT(196,130,30,12),USE(?InsertKeyword),KEY(InsertKey),HIDE,#ORIG(?Insert), |
            #SEQ(2),#ORDINAL(49)
          BUTTON('&Edit'),AT(229,130,30,12),USE(?ChangeKeyword),KEY(CtrlEnter),HIDE,#ORIG(?Change), |
            #SEQ(2),#ORDINAL(50)
          BUTTON('&Delete'),AT(262,130,30,12),USE(?DeleteKeyword),KEY(DeleteKey),HIDE,#ORIG(?Delete), |
            #SEQ(2),#ORDINAL(51)
        END

[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2012/01/10' ' 7:44:54'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME ListBoxFormatter
PROTOTYPE '(ListFormatQueueType pListFormatQueue),STRING'
PARAMETERS '(ListFormatQueueType pListFormatQueue)'
[COMMON]
FROM ABC Window
MODIFIED '2013/06/02' '13:02:22'
[DATA]
[SCREENCONTROLS]
! PROMPT('sz List Box Format:'),USE(?szListBoxFormat:Prompt)
! ENTRY(@s255),USE(szListBoxFormat)
[REPORTCONTROLS]
! STRING(@s255),USE(szListBoxFormat)
szListBoxFormat          CSTRING(256)
!!> GUID('e23d424e-5687-451b-9770-da888ad89339'),PROMPT('sz List Box Format:'),HEADER('sz List Box Format'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('List Format Queue:'),USE(?ListFormatQueue:Prompt)
! ENTRY(@s20),USE(ListFormatQueue)
[REPORTCONTROLS]
! STRING(@s20),USE(ListFormatQueue)
ListFormatQueue          QUEUE,PRE(lfq)
!!> GUID('14620906-cbc0-4a1f-8897-7b4d60f487dc'),PROMPT('List Format Queue:'),HEADER('List Format Queue'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('Column Sequence:'),USE(?lfq:ColumnSequence:Prompt)
! ENTRY(@n3),USE(lfq:ColumnSequence)
[REPORTCONTROLS]
! STRING(@n3),USE(lfq:ColumnSequence)
ColumnSequence             BYTE
!!> GUID('97e3688f-49d9-4bb7-bb6d-b5375af7d3ca'),PROMPT('Column Sequence:'),HEADER('Column Sequence'),PICTURE(@n3),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('Column Name:'),USE(?lfq:ColumnName:Prompt)
! ENTRY(@s31),USE(lfq:ColumnName)
[REPORTCONTROLS]
! STRING(@s31),USE(lfq:ColumnName)
ColumnName                 CSTRING(32)
!!> GUID('97dc3aee-6d49-4f6c-916e-3d3d6dbbf98c'),PROMPT('Column Name:'),HEADER('Column Name'),PICTURE(@s31),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('Column Format:'),USE(?lfq:ColumnFormat:Prompt)
! ENTRY(@s63),USE(lfq:ColumnFormat)
[REPORTCONTROLS]
! STRING(@s63),USE(lfq:ColumnFormat)
ColumnFormat               CSTRING(64)
!!> GUID('92d09745-1c06-4fea-8b08-baf2f6d4387f'),PROMPT('Column Format:'),HEADER('Column Format'),PICTURE(@s63),TYPEMODE(INS)
                         END
!!> GUID('5b3135d2-fefa-4b96-8287-1a98c30eb5b0')
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default', 'WindowToolbar')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('WindowManager')
WHEN  ('WindowToolbar') ('ToolbarClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(),BYTE,PROC,DERIVED', 'Kill {19}PROCEDURE(),BYTE,PROC,DERIVED', |
  'Reset {18}PROCEDURE(BYTE Force=0),DERIVED', 'TakeAccepted {11}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeNewSelection       PROCEDURE(),BYTE,PROC,DERIVED')

%ReturnValue FIELD  (szListBoxFormat)
%WindowOperationMode DEFAULT  ('Use WINDOW setting')
%INISaveWindow LONG  (1)
%ProcedureDisableEnhanceFocus LONG  (0)
%ProcedureUseEnterInsteadTabOverride LONG  (0)
%WindowUseEnterInsteadTab LONG  (1)
%ProcedureUseEnterInsteadTabExcludeListCombo LONG  (0)
%ProcedureUseEnterInsteadTabEnableNextTabStop LONG  (0)
%ProcedureUseEnterInsteadTabExcludeG LONG  (1)
%WindowUseEnterInsteadTabExclude MULTI DEFAULT  ()
%GlobalObject DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('NO')
WHEN  ('WindowToolbar') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ThisWindow')
WHEN  ('WindowToolbar') ('Toolbar')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (0)
WHEN  ('WindowToolbar') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%WindowStyles MULTI LONG  ()
%WindowStyleFontName DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontSize DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontStyle DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontColor DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontCharSet DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStylePicture DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleOtherListboxes MULTI DEFAULT  ()
%ProcedureAutoBindFields MULTI LONG  ()
%ProcedureAutoBindField DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindFieldTPL DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindProcedures MULTI LONG  ()
%ProcedureAutoBindProcedure DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindProcedureTPL DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindFieldsIgnored MULTI LONG  ()
%ProcedureAutoBindFieldIgnored DEPEND %ProcedureAutoBindFieldsIgnored DEFAULT TIMES 0

%ProcedureAutoBindProceduresIgnored MULTI LONG  ()
%ProcedureAutoBindProcedureIgnored DEPEND %ProcedureAutoBindProceduresIgnored DEFAULT TIMES 0

%ProcedureAutoBindValidToAddField LONG  (0)
%ProcedureUserBindFields MULTI LONG  ()
%ProcedureUserBindField DEPEND %ProcedureUserBindFields FIELD TIMES 0

%ProcedureAutoBindFieldIgnore DEPEND %ProcedureAutoBindFields LONG TIMES 0

%ProcedureUserBindProcedures MULTI LONG  ()
%ProcedureUserBindProcedure DEPEND %ProcedureUserBindProcedures PROCEDURE TIMES 0

%ProcedureAutoBindProcedureIgnore DEPEND %ProcedureAutoBindProcedures LONG TIMES 0

%ProcedureUserBindExpressions MULTI LONG  ()
%ProcedureUserBindExpressionName DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ProcedureUserBindExpression DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ExtUITabIcon DEPEND %Control DEFAULT TIMES 0

%ExtUITabStyleOverrideGlobal DEPEND %Control LONG TIMES 0

%ExtUITabStyle DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('Default')
WHEN  ('?ColumnList') ('Default')

%ButtonAction DEPEND %Control DEFAULT TIMES 6
WHEN  ('') ('No Special Action')
WHEN  ('?CancelButton') ('No Special Action')
WHEN  ('?ColumnList') ('No Special Action')
WHEN  ('?OkButton') ('No Special Action')
WHEN  ('?cmdMoveDown') ('No Special Action')
WHEN  ('?cmdMoveUp') ('No Special Action')

%ButtonRunName DEPEND %Control DEFAULT TIMES 0

%ButtonRunParameters DEPEND %Control DEFAULT TIMES 0

%ButtonProcedure DEPEND %Control PROCEDURE TIMES 0

%ButtonThread DEPEND %Control LONG TIMES 0

%ButtonThreadStack DEPEND %Control DEFAULT TIMES 6
WHEN  ('') ('25000')
WHEN  ('?CancelButton') ('25000')
WHEN  ('?ColumnList') ('25000')
WHEN  ('?OkButton') ('25000')
WHEN  ('?cmdMoveDown') ('25000')
WHEN  ('?cmdMoveUp') ('25000')

%ButtonParameters DEPEND %Control DEFAULT TIMES 0

%ButtonReturnValueAssignment DEPEND %Control FIELD TIMES 0

%ButtonReturnValueReferenceAssign DEPEND %Control LONG TIMES 0

%ButtonRequest DEPEND %Control DEFAULT TIMES 6
WHEN  ('') ('None')
WHEN  ('?CancelButton') ('None')
WHEN  ('?ColumnList') ('None')
WHEN  ('?OkButton') ('None')
WHEN  ('?cmdMoveDown') ('None')
WHEN  ('?cmdMoveUp') ('None')

%ButtonThreadParameters DEPEND %Control DEFAULT TIMES 0

%ButtonThreadReturnValueAssignment DEPEND %Control FIELD TIMES 0

%PreLookupKey DEPEND %Control KEY TIMES 0

%PreLookupField DEPEND %Control COMPONENT TIMES 0

%PreLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PreLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupKey DEPEND %Control KEY TIMES 0

%PostLookupField DEPEND %Control COMPONENT TIMES 0

%PostLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupDuringValidate DEPEND %Control LONG TIMES 2
WHEN  ('') (1)
WHEN  ('?ColumnList') (1)

%LookupAssign DEPEND %Control MULTI LONG TIMES 0

%MoreTarget DEPEND %LookupAssign FIELD TIMES 0

%MoreField DEPEND %LookupAssign DEFAULT TIMES 0

%ForceWindowRefresh DEPEND %Control LONG TIMES 0

%CheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%CheckedAssignVariable DEPEND %CheckedAssigns FIELD TIMES 0

%CheckedAssignValue DEPEND %CheckedAssigns DEFAULT TIMES 0

%CheckedHides DEPEND %Control MULTI LONG TIMES 0

%CheckedControl DEPEND %CheckedHides DEFAULT TIMES 0

%CheckedControlAction DEPEND %CheckedHides DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?ColumnList')TIMES 0

%CheckedEnables DEPEND %Control MULTI LONG TIMES 0

%CheckedControl1 DEPEND %CheckedEnables DEFAULT TIMES 0

%CheckedControl1Action DEPEND %CheckedEnables DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?ColumnList')TIMES 0

%UncheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%UncheckedAssignVariable DEPEND %UncheckedAssigns FIELD TIMES 0

%UncheckedAssignValue DEPEND %UncheckedAssigns DEFAULT TIMES 0

%UnCheckedHides DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl DEPEND %UnCheckedHides DEFAULT TIMES 0

%UnCheckedControlAction DEPEND %UnCheckedHides DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?ColumnList')TIMES 0

%UnCheckedEnables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl1 DEPEND %UnCheckedEnables DEFAULT TIMES 0

%UnCheckedControl1Action DEPEND %UnCheckedEnables DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?ColumnList')TIMES 0

%CheckedDisables DEPEND %Control MULTI LONG TIMES 0

%CheckedDisableControl DEPEND %CheckedDisables DEFAULT TIMES 0

%CheckedDisableControlAction DEPEND %CheckedDisables DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?ColumnList')TIMES 0

%UnCheckedDisables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedDisableControl DEPEND %UnCheckedDisables DEFAULT TIMES 0

%UnCheckedDisableControlAction DEPEND %UnCheckedDisables DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?ColumnList')TIMES 0

%ProcedureOneInstance LONG  (0)
%FieldGradientColorType DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('Off')

%FieldGradientColorTypeVariable DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('')

%FieldGradientColorTypeIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%FieldGradientColorFrom DEPEND %Control LONG TIMES 1
WHEN  ('') (-1)

%FieldGradientColorFromVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorFromIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%FieldGradientColorTo DEPEND %Control LONG TIMES 1
WHEN  ('') (-1)

%FieldGradientColorToVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorToIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%PreserveVarsLoc MULTI LONG  ()
%PreserveVarLoc DEPEND %PreserveVarsLoc DEFAULT TIMES 0

%ActiveImageEnable DEPEND %Control LONG TIMES 0

%AIObjectName DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('AIBtn0')

%AIEnableMimicControl DEPEND %Control LONG TIMES 1
WHEN  ('') (1)

%AIMimicControl DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('?OkButton')

%AIImgRound DEPEND %Control LONG TIMES 0

%AIOverrideImg DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgVariable DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIDisableImg DEPEND %Control DEFAULT TIMES 0

%AIDisableImgVariable DEPEND %Control DEFAULT TIMES 0

%AIDisableImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIHotImg DEPEND %Control DEFAULT TIMES 0

%AIHotImgVariable DEPEND %Control DEFAULT TIMES 0

%AIHotImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIPressedImg DEPEND %Control DEFAULT TIMES 0

%AIPressedImgVariable DEPEND %Control DEFAULT TIMES 0

%AIPressedImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[END]
EMBED %WindowManagerMethodDataSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
i                    BYTE
[END]
[END]
WHEN 'TakeAccepted'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
i      BYTE
[END]
[END]
[END]
EMBED %WindowManagerMethodCodeSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8080
PROPERTY:END
LOOP i = 1 TO RECORDS(pListFormatQueue)
   GET(pListFormatQueue,i)
   ListFormatQueue = pListFormatQueue
   ADD(ListFormatQueue)
END
GET(ListFormatQueue,1)
?ColumnList{PROP:Selected} = 1
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8400
PROPERTY:END
CorrectForOffscreen(Window)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9700
PROPERTY:END
SELF.Reset()
[END]
[END]
WHEN 'Reset'
[INSTANCES]
WHEN '(BYTE Force=0)'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7500
PROPERTY:END
IF ?ColumnList{PROP:Selected} = 1
   DISABLE(?cmdMoveUp)
   ENABLE(?cmdMoveDown)
ELSIF ?ColumnList{PROP:Selected} = RECORDS(ListFormatQueue)
   ENABLE(?cmdMoveUp)
   DISABLE(?cmdMoveDown)
ELSE
   ENABLE(?cmdMoveUp)
   ENABLE(?cmdMoveDown)
END
[END]
[END]
[END]
EMBED %ControlEventHandling
[INSTANCES]
WHEN '?OkButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
FREE(pListFormatQueue)
szListBoxFormat = ''
LOOP i = 1 TO RECORDS(ListFormatQueue)
   GET(ListFormatQueue,i)
   pListFormatQueue = ListFormatQueue
   ADD(pListFormatQueue)
   szListBoxFormat = szListBoxFormat & ListFormatQueue.ColumnFormat
END
POST(EVENT:CloseWindow)
[END]
[END]
WHEN '?CancelButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
szListBoxFormat = ''
LOOP i = 1 TO RECORDS(pListFormatQueue)
   GET(pListFormatQueue,i)
   szListBoxFormat = szListBoxFormat & pListFormatQueue.ColumnFormat
END
POST(EVENT:CloseWindow)
[END]
[END]
WHEN '?cmdMoveUp'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
GET(ListFormatQueue,CHOICE(?ColumnList))
i = POINTER(ListFormatQueue)
ListFormatQueue.ColumnSequence -= 1
PUT(ListFormatQueue)
GET(ListFormatQueue,i-1)
ListFormatQueue.ColumnSequence += 1
PUT(ListFormatQueue)
SORT(ListFormatQueue,ListFormatQueue.ColumnSequence)
GET(ListFormatQueue,i-1)
?ColumnList{PROP:Selected} = POINTER(ListFormatQueue)
SELF.Reset()
[END]
[END]
WHEN '?cmdMoveDown'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
GET(ListFormatQueue,CHOICE(?ColumnList))
i = POINTER(ListFormatQueue)
ListFormatQueue.ColumnSequence += 1
PUT(ListFormatQueue)
GET(ListFormatQueue,i+1)
ListFormatQueue.ColumnSequence -= 1
PUT(ListFormatQueue)
SORT(ListFormatQueue,ListFormatQueue.ColumnSequence)
GET(ListFormatQueue,i+1)
?ColumnList{PROP:Selected} = POINTER(ListFormatQueue)
SELF.Reset()
[END]
[END]
WHEN '?ColumnList'
[INSTANCES]
WHEN 'NewSelection'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
 SELF.Reset()
[END]
[END]
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[CALLS]
CorrectForOffScreen
[WINDOW]
Window  WINDOW('Results List Formatter'),AT(,,151,100),FONT('Segoe UI',10),GRAY,HLP('ListboxFor' & |
          'matter.htm')
          BUTTON('&OK'),AT(51,81,45,14),USE(?OkButton),DEFAULT,#ORDINAL(1)
          BUTTON('&Cancel'),AT(101,81,45,14),USE(?CancelButton),#ORDINAL(2)
          LIST,AT(5,5,141,72),USE(?ColumnList),FORMAT('124L(2)|M~Column Name~@s31@#2#'),FROM(ListFormatQueue), |
            #FIELDS(lfq:ColumnName),#ORDINAL(3)
          BUTTON,AT(5,81,18,14),USE(?cmdMoveUp),ICON('ABUPROW.ICO'),#ORDINAL(4)
          BUTTON,AT(28,81,18,14),USE(?cmdMoveDown),ICON('ABDNROW.ICO'),#ORDINAL(5)
        END

[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2012/01/11' '10:40:57'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME CreateRestorePoint
PROTOTYPE '(FindStrOptionsGroupType pFindStrOptions, *CSTRING szFilename),LONG,PROC'
PARAMETERS '(FindStrOptionsGroupType pFindStrOptions, *CSTRING szFilename)'
[COMMON]
FROM ABC Source
MODIFIED '2015/05/16' '12:02:20'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
lQueuePointer   LONG,AUTO
lQueueRecords   LONG,AUTO
ReturnValue     LONG(Level:Benign)
sProgramName    STRING(8),AUTO
sProcVersion    STRING('03')
ulFilePointer   ULONG,AUTO
ulLength        ULONG,AUTO
szImpExFileName CSTRING(FILE:MaxFilePath),AUTO,STATIC
ImpExFile       FILE,DRIVER('DOS'),NAME(szImpExFileName),PRE(_DOS),CREATE,BINDABLE,THREAD
Record              RECORD,PRE()
ulRecordSize            ULONG
FileByte                BYTE,DIM(32 * 1024)
                    END
                END
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
      !IF FILEDIALOG('Save As ...',szImpExFileName,'Keystone Source Search Files (*.kss)|*.kss',FILE:Save + FILE:KeepDir + FILE:LongName)
         szImpExFileName = szFilename
         DO ExportData
      !ELSE
      !   ReturnValue = Level:User
      !END
      RETURN ReturnValue
[END]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
ExportData  ROUTINE
      !Create a new file
      CREATE(ImpExFile)
      OPEN(ImpExFile,ReadWrite+DenyAll)
      IF ~ERRORCODE()
         sProgramName = 'KSS'
         _DOS:ulRecordSize = SIZE(sProgramName)
         kcr_MemCpy(ADDRESS(_DOS:FileByte),ADDRESS(sProgramName),SIZE(sProgramName))
         ADD(ImpExFile,_DOS:ulRecordSize+4)
         !Write Procedure Version
         sProcVersion = '01'
         _DOS:ulRecordSize = SIZE(sProcVersion)
         kcr_MemCpy(ADDRESS(_DOS:FileByte),ADDRESS(sProcVersion),SIZE(sProcVersion))
         ADD(ImpExFile,_DOS:ulRecordSize+4)

         !Save FindStrOptions ---------------------------
         IF SIZE(FindStrOptionsGroupType) > SIZE(_DOS:Record)
            HALT('Buffer Too Small (' & SIZE(FindStrOptionsGroupType) & ')')
         END
         _DOS:ulRecordSize = SIZE(FindStrOptionsGroupType)
         kcr_MemCpy(ADDRESS(_DOS:FileByte),ADDRESS(pFindStrOptions),SIZE(FindStrOptionsGroupType))
         ADD(ImpExFile,_DOS:ulRecordSize+4)

         !Save ResultsQueue ---------------------------
         IF SIZE(ResultQueueType) > SIZE(_DOS:Record)
            HALT('Buffer Too Small (' & SIZE(ResultQueueType) & ')')
         END
         _DOS:ulRecordSize = RECORDS(pFindStrOptions.ResultQueue)
         ADD(ImpExFile,4)
         lQueueRecords = RECORDS(pFindStrOptions.ResultQueue)
         LOOP lQueuePointer = 1 TO lQueueRecords
           GET(pFindStrOptions.ResultQueue,lQueuePointer)
           _DOS:ulRecordSize = SIZE(ResultQueueType)
           kcr_MemCpy(ADDRESS(_DOS:FileByte),ADDRESS(pFindStrOptions.ResultQueue),SIZE(ResultQueueType))
           ADD(ImpExFile,_DOS:ulRecordSize+4)
         END

         !Save UndoQueue ---------------------------
         _DOS:ulRecordSize = RECORDS(pFindStrOptions.UndoQueue)
         ADD(ImpExFile,4)
         lQueueRecords = RECORDS(pFindStrOptions.UndoQueue)
         LOOP lQueuePointer = 1 TO lQueueRecords
           GET(pFindStrOptions.UndoQueue,lQueuePointer)
           _DOS:ulRecordSize = SIZE(ResultQueueType)
           kcr_MemCpy(ADDRESS(_DOS:FileByte),ADDRESS(pFindStrOptions.UndoQueue),SIZE(ResultQueueType))
           ADD(ImpExFile,_DOS:ulRecordSize+4)
         END
         !Close the file
         CLOSE(ImpExFile)
      ELSE
         MESSAGE(szImpExFileName & ' [' & ERRORCODE() & '] ' & ERROR(),'Error - Save Aborted',ICON:Hand)
         ReturnValue = Level:Notify
      END
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[PROCEDURE]
NAME LoadRestorePoint
PROTOTYPE '(FindStrOptionsGroupType pFindStrOptions, <<*CSTRING szRestorePointFile>),LONG,PROC'
PARAMETERS '(FindStrOptionsGroupType pFindStrOptions,<<*CSTRING szRestorePointFile>)'
[COMMON]
FROM ABC Source
MODIFIED '2015/05/17' ' 6:44:16'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
pResultQueue    &ResultQueueType
pUndoQueue      &ResultQueueType
saveTabNumber   LONG
saveFeqProgress LONG
lQueuePointer   LONG,AUTO
lQueueRecords   LONG,AUTO
ReturnValue     LONG(Level:Benign)
sProgramName    STRING(8),AUTO
sProcVersion    STRING('03')
ulFilePointer   ULONG,AUTO
ulLength        ULONG,AUTO
szImpExFileName CSTRING(FILE:MaxFilePath),AUTO,STATIC,THREAD
ImpExFile       FILE,DRIVER('DOS'),NAME(szImpExFileName),PRE(_DOS),CREATE,BINDABLE,THREAD
Record              RECORD,PRE()
ulRecordSize            ULONG
FileByte                BYTE,DIM(32 * 1024)
                    END
                END
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
      IF OMITTED(szRestorePointFile)
         szImpExFileName = svSpecialFolder.GetDir(SV:CSIDL_APPDATA, 'Devuna' & '\' & 'KSS') & '\KSS_Results.rrl'
         IF FILEDIALOG('Restore From ...',szImpExFileName,'Re-loadable Result List Files|*.RRL',BOR(FILE:KeepDir,FILE:LongName))
            DO ImportData
         ELSE
            ReturnValue = Level:User
         END
      ELSE
         szImpExFileName = szRestorePointFile
         DO ImportData
      END
      RETURN ReturnValue
[END]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
ImportData  ROUTINE
      OPEN(ImpExFile,ReadWrite+DenyAll)
      IF ~ERRORCODE()
         !Read Program Name Length
         ulFilePointer = 1
         GET(ImpExFile,ulFilePointer,4)
         ulFilePointer += 4
         ulLength = _DOS:ulRecordSize
         GET(ImpExFile,ulFilePointer,ulLength)
         ulFilePointer += ulLength
         kcr_MemCpy(ADDRESS(sProgramName),ADDRESS(_DOS:Record),ulLength)
         IF sProgramName = 'KSS'
            GET(ImpExFile,ulFilePointer,4)
            IF _DOS:ulRecordSize = 2
               ulFilePointer += 4
               ulLength = _DOS:ulRecordSize
               GET(ImpExFile,ulFilePointer,ulLength)
               ulFilePointer += ulLength
               kcr_MemCpy(ADDRESS(sProcVersion),ADDRESS(_DOS:Record),ulLength)
               IF sProcVersion <> '01'
                  !wrong verson
               END
            END

            !Load FindStrOptions ---------------------------
            pResultQueue &= pFindStrOptions.ResultQueue
            pUndoQueue &= pFindStrOptions.UndoQueue
            saveTabNumber = pFindStrOptions.tabNumber
            saveFeqProgress = pFindStrOptions.feqSearchProgress

            GET(ImpExFile,ulFilePointer,4)
            ulFilePointer += 4
            ulLength = _DOS:ulRecordSize
            GET(ImpExFile,ulFilePointer,ulLength)
            IF ~ERRORCODE()
               ulFilePointer += ulLength
               kcr_MemCpy(ADDRESS(pFindStrOptions),ADDRESS(_DOS:Record),ulLength)
               pFindStrOptions.ResultQueue &= pResultQueue
               pFindStrOptions.UndoQueue &= pUndoQueue
               pFindStrOptions.tabNumber = saveTabNumber
               pFindStrOptions.feqSearchProgress = saveFeqProgress
            ELSE
               !big problems
            END


            !Load ResultQueue ---------------------------
            GET(ImpExFile,ulFilePointer,4)
            IF ~ERRORCODE()
               ulFilePointer += 4
               kcr_MemCpy(ADDRESS(lQueueRecords),ADDRESS(_DOS:Record),4)
               FREE(pFindStrOptions.ResultQueue)
               LOOP lQueuePointer = 1 TO lQueueRecords
                 GET(ImpExFile,ulFilePointer,4)
                 IF ~ERRORCODE()
                    ulFilePointer += 4
                    ulLength = _DOS:ulRecordSize
                    GET(ImpExFile,ulFilePointer,ulLength)
                    IF ~ERRORCODE()
                       ulFilePointer += ulLength
                       kcr_MemCpy(ADDRESS(pFindStrOptions.ResultQueue),ADDRESS(_DOS:Record),ulLength)
                    END
                 END
                 IF ~ERRORCODE()
                    ADD(pFindStrOptions.ResultQueue)
                 ELSE
                    BREAK
                 END
               END
            END

            !Load UndoQueue ---------------------------
            GET(ImpExFile,ulFilePointer,4)
            IF ~ERRORCODE()
               ulFilePointer += 4
               kcr_MemCpy(ADDRESS(lQueueRecords),ADDRESS(_DOS:Record),4)
               FREE(pFindStrOptions.UndoQueue)
               LOOP lQueuePointer = 1 TO lQueueRecords
                 GET(ImpExFile,ulFilePointer,4)
                 IF ~ERRORCODE()
                    ulFilePointer += 4
                    ulLength = _DOS:ulRecordSize
                    GET(ImpExFile,ulFilePointer,ulLength)
                    IF ~ERRORCODE()
                       ulFilePointer += ulLength
                       kcr_MemCpy(ADDRESS(pFindStrOptions.UndoQueue),ADDRESS(_DOS:Record),ulLength)
                    END
                 END
                 IF ~ERRORCODE()
                    ADD(pFindStrOptions.UndoQueue)
                 ELSE
                    BREAK
                 END
               END
            END
         ELSE
            MESSAGE(szImpExFileName & ' Invalid File Type','Error - Load Aborted',ICON:Hand)
            ReturnValue = Level:Notify
         END

         !Close the file
         CLOSE(ImpExFile)
      ELSE
         MESSAGE(szImpExFileName & ' [' & ERRORCODE() & '] ' & ERROR(),'Error - Load Aborted',ICON:Hand)
         ReturnValue = Level:Notify
      END
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2012/01/31' '14:16:05'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME winShowMatchSummary
PROTOTYPE '(ResultQueueType ResultQueue, ResultQueueType UndoQueue, BOOL bCaseSensitive, BOOL bRegularExpression, *CSTRING szPattern),STRING'
PARAMETERS '(ResultQueueType ResultQueue, ResultQueueType UndoQueue, BOOL bCaseSensitive, BOOL bRegularExpression, *CSTRING szPattern)'
[COMMON]
FROM ABC Window
MODIFIED '2013/06/02' '13:02:45'
[DATA]
[SCREENCONTROLS]
! PROMPT('str Return:'),USE(?strReturn:Prompt)
! ENTRY(@s255),USE(strReturn)
[REPORTCONTROLS]
! STRING(@s255),USE(strReturn)
strReturn                STRING(260)
!!> GUID('cefbd7a1-a8f2-456c-a757-49106c416258'),PROMPT('str Return:'),HEADER('str Return'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('All Results Queue:'),USE(?AllResultsQueue:Prompt)
! ENTRY(@s20),USE(AllResultsQueue)
[REPORTCONTROLS]
! STRING(@s20),USE(AllResultsQueue)
AllResultsQueue          ResultQueueType
!!> GUID('8fa62d4f-8edf-4b48-9e49-849c2192115c'),PROMPT('All Results Queue:'),HEADER('All Results Queue'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('Summary Queue:'),USE(?SummaryQueue:Prompt)
! ENTRY(@s20),USE(SummaryQueue)
[REPORTCONTROLS]
! STRING(@s20),USE(SummaryQueue)
SummaryQueue             QUEUE,PRE(sq)
!!> GUID('954bebf9-969f-4d65-beef-048bbffaf223'),PROMPT('Summary Queue:'),HEADER('Summary Queue'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('Path:'),USE(?sq:Path:Prompt)
! ENTRY(@s255),USE(sq:Path)
[REPORTCONTROLS]
! STRING(@s255),USE(sq:Path)
Path                       CSTRING(261)
!!> GUID('60f0b736-49d4-4e45-ad51-8a027f757463'),PROMPT('Path:'),HEADER('Path'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('Filename:'),USE(?sq:Filename:Prompt)
! ENTRY(@s255),USE(sq:Filename)
[REPORTCONTROLS]
! STRING(@s255),USE(sq:Filename)
Filename                   CSTRING(261)
!!> GUID('f1c0435f-a584-44a9-89f3-8752408b966c'),PROMPT('Filename:'),HEADER('Filename'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('Filetime:'),USE(?sq:Filetime:Prompt)
! ENTRY(@s20),USE(sq:Filetime)
[REPORTCONTROLS]
! STRING(@s20),USE(sq:Filetime)
Filetime                   CSTRING(21)
!!> GUID('34e75a05-161d-4284-a352-60e3f9643e19'),PROMPT('Filetime:'),HEADER('Filetime'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('Match Count:'),USE(?sq:MatchCount:Prompt)
! ENTRY(@n-14),USE(sq:MatchCount),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(sq:MatchCount),RIGHT(1)
MatchCount                 LONG
!!> GUID('29f78ae5-fa46-475d-a59f-df22cf8b21f2'),PROMPT('Match Count:'),HEADER('Match Count'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('Data Count:'),USE(?sq:DataCount:Prompt)
! ENTRY(@n-14),USE(sq:DataCount),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(sq:DataCount),RIGHT(1)
DataCount                  LONG
!!> GUID('bbe4cb4e-6b47-41ae-8938-9c51555bfb9c'),PROMPT('Data Count:'),HEADER('Data Count'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('Code Count:'),USE(?sq:CodeCount:Prompt)
! ENTRY(@n-14),USE(sq:CodeCount),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(sq:CodeCount),RIGHT(1)
CodeCount                  LONG
!!> GUID('b61a3e8b-ee96-4376-a6fc-c2d0b682e122'),PROMPT('Code Count:'),HEADER('Code Count'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('Comment Count:'),USE(?sq:CommentCount:Prompt)
! ENTRY(@n-14),USE(sq:CommentCount),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(sq:CommentCount),RIGHT(1)
CommentCount               LONG
!!> GUID('43a49bd5-d241-4553-a344-f802e3dfdf80'),PROMPT('Comment Count:'),HEADER('Comment Count'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
                         END
!!> GUID('a5d90631-34ae-4495-b951-a318687c276e')
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default', 'WindowToolbar')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('WindowManager')
WHEN  ('WindowToolbar') ('ToolbarClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(),BYTE,PROC,DERIVED', 'Kill {19}PROCEDURE(),BYTE,PROC,DERIVED', |
  'SetAlerts {14}PROCEDURE(),DERIVED', 'TakeEvent {14}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeFieldEvent {9}PROCEDURE(),BYTE,PROC,DERIVED')

%ReturnValue FIELD  (strReturn)
%WindowOperationMode DEFAULT  ('Use WINDOW setting')
%INISaveWindow LONG  (1)
%ProcedureDisableEnhanceFocus LONG  (0)
%ProcedureUseEnterInsteadTabOverride LONG  (0)
%WindowUseEnterInsteadTab LONG  (1)
%ProcedureUseEnterInsteadTabExcludeListCombo LONG  (0)
%ProcedureUseEnterInsteadTabEnableNextTabStop LONG  (0)
%ProcedureUseEnterInsteadTabExcludeG LONG  (1)
%WindowUseEnterInsteadTabExclude MULTI DEFAULT  ()
%GlobalObject DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('NO')
WHEN  ('WindowToolbar') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ThisWindow')
WHEN  ('WindowToolbar') ('Toolbar')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (0)
WHEN  ('WindowToolbar') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%WindowStyles MULTI LONG  ()
%WindowStyleFontName DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontSize DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontStyle DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontColor DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontCharSet DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStylePicture DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleOtherListboxes MULTI DEFAULT  ()
%ProcedureAutoBindFields MULTI LONG  ()
%ProcedureAutoBindField DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindFieldTPL DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindProcedures MULTI LONG  ()
%ProcedureAutoBindProcedure DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindProcedureTPL DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindFieldsIgnored MULTI LONG  ()
%ProcedureAutoBindFieldIgnored DEPEND %ProcedureAutoBindFieldsIgnored DEFAULT TIMES 0

%ProcedureAutoBindProceduresIgnored MULTI LONG  ()
%ProcedureAutoBindProcedureIgnored DEPEND %ProcedureAutoBindProceduresIgnored DEFAULT TIMES 0

%ProcedureAutoBindValidToAddField LONG  (0)
%ProcedureUserBindFields MULTI LONG  ()
%ProcedureUserBindField DEPEND %ProcedureUserBindFields FIELD TIMES 0

%ProcedureAutoBindFieldIgnore DEPEND %ProcedureAutoBindFields LONG TIMES 0

%ProcedureUserBindProcedures MULTI LONG  ()
%ProcedureUserBindProcedure DEPEND %ProcedureUserBindProcedures PROCEDURE TIMES 0

%ProcedureAutoBindProcedureIgnore DEPEND %ProcedureAutoBindProcedures LONG TIMES 0

%ProcedureUserBindExpressions MULTI LONG  ()
%ProcedureUserBindExpressionName DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ProcedureUserBindExpression DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ExtUITabIcon DEPEND %Control DEFAULT TIMES 0

%ExtUITabStyleOverrideGlobal DEPEND %Control LONG TIMES 0

%ExtUITabStyle DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('Default')
WHEN  ('?MatchSummaryList') ('Default')

%ButtonAction DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('No Special Action')
WHEN  ('?MatchSummaryList') ('No Special Action')

%ButtonRunName DEPEND %Control DEFAULT TIMES 0

%ButtonRunParameters DEPEND %Control DEFAULT TIMES 0

%ButtonProcedure DEPEND %Control PROCEDURE TIMES 0

%ButtonThread DEPEND %Control LONG TIMES 0

%ButtonThreadStack DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('25000')
WHEN  ('?MatchSummaryList') ('25000')

%ButtonParameters DEPEND %Control DEFAULT TIMES 0

%ButtonReturnValueAssignment DEPEND %Control FIELD TIMES 0

%ButtonReturnValueReferenceAssign DEPEND %Control LONG TIMES 0

%ButtonRequest DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('None')
WHEN  ('?MatchSummaryList') ('None')

%ButtonThreadParameters DEPEND %Control DEFAULT TIMES 0

%ButtonThreadReturnValueAssignment DEPEND %Control FIELD TIMES 0

%PreLookupKey DEPEND %Control KEY TIMES 0

%PreLookupField DEPEND %Control COMPONENT TIMES 0

%PreLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PreLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupKey DEPEND %Control KEY TIMES 0

%PostLookupField DEPEND %Control COMPONENT TIMES 0

%PostLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupDuringValidate DEPEND %Control LONG TIMES 2
WHEN  ('') (1)
WHEN  ('?MatchSummaryList') (1)

%LookupAssign DEPEND %Control MULTI LONG TIMES 0

%MoreTarget DEPEND %LookupAssign FIELD TIMES 0

%MoreField DEPEND %LookupAssign DEFAULT TIMES 0

%ForceWindowRefresh DEPEND %Control LONG TIMES 0

%CheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%CheckedAssignVariable DEPEND %CheckedAssigns FIELD TIMES 0

%CheckedAssignValue DEPEND %CheckedAssigns DEFAULT TIMES 0

%CheckedHides DEPEND %Control MULTI LONG TIMES 0

%CheckedControl DEPEND %CheckedHides DEFAULT TIMES 0

%CheckedControlAction DEPEND %CheckedHides DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?MatchSummaryList')TIMES 0

%CheckedEnables DEPEND %Control MULTI LONG TIMES 0

%CheckedControl1 DEPEND %CheckedEnables DEFAULT TIMES 0

%CheckedControl1Action DEPEND %CheckedEnables DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?MatchSummaryList')TIMES 0

%UncheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%UncheckedAssignVariable DEPEND %UncheckedAssigns FIELD TIMES 0

%UncheckedAssignValue DEPEND %UncheckedAssigns DEFAULT TIMES 0

%UnCheckedHides DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl DEPEND %UnCheckedHides DEFAULT TIMES 0

%UnCheckedControlAction DEPEND %UnCheckedHides DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?MatchSummaryList')TIMES 0

%UnCheckedEnables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl1 DEPEND %UnCheckedEnables DEFAULT TIMES 0

%UnCheckedControl1Action DEPEND %UnCheckedEnables DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?MatchSummaryList')TIMES 0

%CheckedDisables DEPEND %Control MULTI LONG TIMES 0

%CheckedDisableControl DEPEND %CheckedDisables DEFAULT TIMES 0

%CheckedDisableControlAction DEPEND %CheckedDisables DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?MatchSummaryList')TIMES 0

%UnCheckedDisables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedDisableControl DEPEND %UnCheckedDisables DEFAULT TIMES 0

%UnCheckedDisableControlAction DEPEND %UnCheckedDisables DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?MatchSummaryList')TIMES 0

%ProcedureOneInstance LONG  (0)
%FieldGradientColorType DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('Off')
WHEN  ('?PANEL1') ('Off')

%FieldGradientColorTypeVariable DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('')
WHEN  ('?PANEL1') ('')

%FieldGradientColorTypeIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?PANEL1') (0)

%FieldGradientColorFrom DEPEND %Control LONG TIMES 2
WHEN  ('') (-1)
WHEN  ('?PANEL1') (-1)

%FieldGradientColorFromVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorFromIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?PANEL1') (0)

%FieldGradientColorTo DEPEND %Control LONG TIMES 2
WHEN  ('') (-1)
WHEN  ('?PANEL1') (-1)

%FieldGradientColorToVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorToIsVariable DEPEND %Control LONG TIMES 2
WHEN  ('') (0)
WHEN  ('?PANEL1') (0)

%PreserveVarsLoc MULTI LONG  ()
%PreserveVarLoc DEPEND %PreserveVarsLoc DEFAULT TIMES 0

%ActiveImageEnable DEPEND %Control LONG TIMES 0

%AIObjectName DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('AIBtn0')

%AIEnableMimicControl DEPEND %Control LONG TIMES 1
WHEN  ('') (1)

%AIMimicControl DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('?PANEL1')

%AIImgRound DEPEND %Control LONG TIMES 0

%AIOverrideImg DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgVariable DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIDisableImg DEPEND %Control DEFAULT TIMES 0

%AIDisableImgVariable DEPEND %Control DEFAULT TIMES 0

%AIDisableImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIHotImg DEPEND %Control DEFAULT TIMES 0

%AIHotImgVariable DEPEND %Control DEFAULT TIMES 0

%AIHotImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIPressedImg DEPEND %Control DEFAULT TIMES 0

%AIPressedImgVariable DEPEND %Control DEFAULT TIMES 0

%AIPressedImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

[EMBED]
EMBED %WindowManagerMethodDataSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
i              LONG
j              LONG
p              LONG
totalMatches   LONG
bMatchMode     BYTE
thisFilename   CSTRING(MAX_PATH)
thisText       LIKE(ResultQueue.Text)
[END]
[END]
WHEN 'TakeFieldEvent'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
MouseDownRow      LONG
MouseDownColumn   LONG
MouseDownZone     LONG
[END]
[END]
[END]
EMBED %WindowManagerMethodCodeSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7800
PROPERTY:END
p = POINTER(ResultQueue)
j = RECORDS(ResultQueue)
LOOP i = 1 TO j
   GET(ResultQueue,i)
   AllResultsQueue = ResultQueue
   ADD(AllResultsQueue,AllResultsQueue.SortName)
END
GET(ResultQueue,p)

p = POINTER(UndoQueue)
j = RECORDS(UndoQueue)
LOOP i = 1 TO j
   GET(UndoQueue,i)
   AllResultsQueue = UndoQueue
   ADD(AllResultsQueue,AllResultsQueue.SortName)
END
GET(UndoQueue,p)

bMatchMode = Match:Simple
IF NOT bCaseSensitive
   bMatchMode = BOR(bMatchMode,Match:NoCase)
END
IF bRegularExpression
   bMatchMode = BOR(bMatchMode,Match:Regular)
END

totalMatches = 0
j = RECORDS(AllResultsQueue)
LOOP i = 1 TO j
   GET(AllResultsQueue,i)
   thisText = CLIP(LEFT(AllResultsQueue.Text))
   SummaryQueue.Path     = UPPER(AllResultsQueue.Path)
   SummaryQueue.FileName = UPPER(AllResultsQueue.Filename & AllResultsQueue.szExtension)
   IF thisFilename = SummaryQueue.Path & SummaryQueue.FileName
     SummaryQueue.MatchCount += 1
     IF AllResultsQueue.szSection = 'DATA'
        SummaryQueue.DataCount += 1
     ELSIF AllResultsQueue.szSection = 'CODE'
        SummaryQueue.CodeCount += 1
     ELSE
     END
     IF NOT MatchWithoutComment(thisText,szPattern,bMatchMode,AllResultsQueue.szExtension)
        SummaryQueue.CommentCount += 1
     end
     PUT(SummaryQueue)
   ELSE
     totalMatches += SummaryQueue.MatchCount
     SummaryQueue.MatchCount = 1
     IF AllResultsQueue.szSection = 'DATA'
        SummaryQueue.DataCount = 1
        SummaryQueue.CodeCount = 0
     ELSIF AllResultsQueue.szSection = 'CODE'
        SummaryQueue.DataCount = 0
        SummaryQueue.CodeCount = 1
     ELSE
        SummaryQueue.DataCount = 0
        SummaryQueue.CodeCount = 0
     END
     IF NOT MatchWithoutComment(thisText,szPattern,bMatchMode,AllResultsQueue.szExtension)
        SummaryQueue.CommentCount = 1
     ELSE
        SummaryQueue.CommentCount = 0
     END
     thisFilename = SummaryQueue.Path & SummaryQueue.FileName
     SummaryQueue.FileTime = FORMAT(GetFileDate(thisFilename),@D010) & ' ' & FORMAT(GetFileTime(thisFilename),@T04)
     ADD(SummaryQueue)
   END
END
totalMatches += SummaryQueue.MatchCount
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8005
PROPERTY:END
?MatchingFileCountString{PROP:Text} = 'There were ' & totalMatches & ' matches found in ' & RECORDS(SummaryQueue) & ' files.'
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8310
PROPERTY:END
CorrectForOffscreen(Window)
szFormat = ?MatchSummaryList{PROP:Format}
INIMgr.Fetch('winShowMatchSummary','MatchSummaryListFormat',szFormat)
IF INSTRING('File Time',szFormat,1)
   ?MatchSummaryList{PROP:Format} = szFormat
END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9700
PROPERTY:END
thisSort.Init(SummaryQueue,?MatchSummaryList)
thisSort.MultipleColumns = False
thisSort.NoCase = False
[END]
[END]
WHEN 'Kill'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7300
PROPERTY:END
thisSort.ClearSort()
thisSort.Kill()
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
szFormat = ?MatchSummaryList{PROP:Format}
INIMgr.Update('winShowMatchSummary','MatchSummaryListFormat',szFormat)
[END]
[END]
WHEN 'SetAlerts'
[INSTANCES]
WHEN '()'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7500
PROPERTY:END
thisSort.SetAlerts()
[END]
[END]
WHEN 'TakeEvent'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3200
PROPERTY:END
IF thisSort.TakeEvents()
   RETURN Level:Notify
END
[END]
[END]
[END]
EMBED %ControlEventHandling
[INSTANCES]
WHEN '?MatchSummaryList'
[INSTANCES]
WHEN 'AlertKey'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
 CASE KEYCODE()
 OF MouseLeft2
    MouseDownZone = ?MatchSummaryList{PROPLIST:MouseDownZone}
    IF MouseDownZone = LISTZONE:field
       MouseDownRow = ?MatchSummaryList{PROPLIST:MouseDownRow}
       GET(SummaryQueue,MouseDownRow)
       strReturn = SummaryQueue.Path & SummaryQueue.Filename
       POST(EVENT:CloseWindow)
    END
 END
[END]
WHEN 'PreAlertKey'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
!       CASE KEYCODE()
!       OF MouseLeft
!          MouseDownZone = ?MatchSummaryList{PROPLIST:MouseDownZone}
!          IF MouseDownZone = LISTZONE:Header AND MouseDownZone <> LISTZONE:GroupHeader
!             MouseDownColumn = ?MatchSummaryList{PROPLIST:MouseDownField}
!             EXECUTE MouseDownColumn
!                SORT(SummaryQueue,SummaryQueue.Path)
!                SORT(SummaryQueue,SummaryQueue.Filename)
!                SORT(SummaryQueue,-SummaryQueue.MatchCount)
!                SORT(SummaryQueue,-SummaryQueue.DataCount)
!                SORT(SummaryQueue,-SummaryQueue.CodeCount)
!                SORT(SummaryQueue,-SummaryQueue.CommentCount)
!             END
!             CYCLE
!          END
!       END
[END]
[END]
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
thisSort       CLASS(SortHeaderClassType) !Declare SortHeader Class
QueueResorted     PROCEDURE(STRING pString),VIRTUAL
               END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
szFormat       CSTRING(256)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3000
PROPERTY:END
FileTime             CSTRING(256)
[END]
EMBED %LocalProcedures
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
thisSort.QueueResorted     PROCEDURE(STRING pString)  !,VIRTUAL
   CODE
      DISPLAY(?MatchSummaryList)
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME ABC WindowResize
[FIELDPROMPT]
%ResizeAnchorTop DEPEND %Control LONG TIMES 0

%ResizeAnchorLeft DEPEND %Control LONG TIMES 0

%ResizeAnchorRight DEPEND %Control LONG TIMES 0

%ResizeAnchorBottom DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowTop DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowLeft DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowRight DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowBottom DEPEND %Control LONG TIMES 0

[INSTANCE]
INSTANCE 2
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('WindowResizeClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(BYTE AppStrategy=AppStrategy:Resize,BYTE SetWindowMinSize=False,BYTE SetWindowMaxSize=False)')

%AppStrategy DEFAULT  ('Spread')
%RestrictMinSize LONG  (1)
%WindowMinWidth DEFAULT  ('')
%WindowMinHeight DEFAULT  ('')
%RestrictMaxSize LONG  (0)
%WindowMaxWidth DEFAULT  ('')
%WindowMaxHeight DEFAULT  ('')
%AutoFindParents DEFAULT  ('Default')
%DeferMoves DEFAULT  ('Default')
%OverrideControls MULTI LONG  (1, 2, 3, 4)
%OverrideControl DEPEND %OverrideControls DEFAULT TIMES 4
WHEN  (1) ('?MatchSummaryList')
WHEN  (2) ('?PANEL1')
WHEN  (3) ('?MatchingFileCountString')
WHEN  (4) ('?Instructions')

%DisableResize DEPEND %OverrideControls LONG TIMES 4
WHEN  (1) (0)
WHEN  (2) (0)
WHEN  (3) (0)
WHEN  (4) (0)

%HorizResize DEPEND %OverrideControls DEFAULT TIMES 4
WHEN  (1) ('Constant Right Border')
WHEN  (2) ('Constant Right Border')
WHEN  (3) ('Resize')
WHEN  (4) ('Lock Width')

%VertResize DEPEND %OverrideControls DEFAULT TIMES 4
WHEN  (1) ('Constant Bottom Border')
WHEN  (2) ('Constant Bottom Border')
WHEN  (3) ('Lock Height')
WHEN  (4) ('Lock Height')

%HorizPositional DEPEND %OverrideControls DEFAULT TIMES 4
WHEN  (1) ('Fix Left')
WHEN  (2) ('Fix Left')
WHEN  (3) ('Fix Left')
WHEN  (4) ('Fix Right')

%VertPositional DEPEND %OverrideControls DEFAULT TIMES 4
WHEN  (1) ('Fix Top')
WHEN  (2) ('Fix Top')
WHEN  (3) ('Fix Top')
WHEN  (4) ('Fix Top')

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('Resizer')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('ADOBlob')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

[CALLS]
CorrectForOffScreen
MatchWithoutComment
[WINDOW]
Window  WINDOW('Match Summary'),AT(,,460,255),FONT('Segoe UI',10),RESIZE,GRAY,HLP('MatchSummary.htm'), |
          SYSTEM
          PANEL,AT(5,5,450,245),USE(?PANEL1),BEVEL(1),#ORDINAL(1)
          STRING('There were 500 matches found in 250 files.'),AT(10,10),USE(?MatchingFileCountString), |
            TRN,#ORDINAL(2)
          STRING('Click on the column header to sort by that column.'),AT(282,10),USE(?Instructions), |
            TRN,#ORDINAL(3)
          LIST,AT(10,20,440,225),USE(?MatchSummaryList),VSCROLL,ALRT(MouseLeft2),FORMAT('125L(2)|M~' & |
            'Path~@s255@80L(2)|M~File Name~@s255@80L(2)|M~File Time~@s20@[36R(2)|M~Tota' & |
            'l~C(0)@n13@36R(2)|M~Data~C(0)@n13@36R(2)|M~Code~C(0)@n13@36R(2)|M~Comment~' & |
            'C(0)@n13@]|~Matches~'),FROM(SummaryQueue),#FIELDS(sq:Path,sq:Filename,sq:Filetime, |
            sq:MatchCount,sq:DataCount,sq:CodeCount,sq:CommentCount),#ORDINAL(4)
        END

[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2012/02/02' '11:50:08'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME MacroPlayer
[COMMON]
FROM ABC Window
MODIFIED '2013/12/16' '11:23:26'
[DATA]
[SCREENCONTROLS]
! PROMPT('Auto Advance:'),USE(?AutoAdvance:Prompt)
! ENTRY(@s20),USE(AutoAdvance)
[REPORTCONTROLS]
! STRING(@s20),USE(AutoAdvance)
AutoAdvance              BOOL
!!> GUID('5f5c19cd-ae5f-441c-8af6-8caec33d205b'),PROMPT('Auto Advance:'),HEADER('Auto Advance'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('loc : Macro Queue:'),USE(?loc:MacroQueue:Prompt)
! ENTRY(@s20),USE(loc:MacroQueue)
[REPORTCONTROLS]
! STRING(@s20),USE(loc:MacroQueue)
loc:MacroQueue           QUEUE,PRE(MQ)
!!> GUID('bb1b02c0-9701-458c-a796-321e0575252b'),PROMPT('loc : Macro Queue:'),HEADER('loc : Macro Queue'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('feq Button:'),USE(?MQ:feqButton:Prompt)
! ENTRY(@n-14),USE(MQ:feqButton),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(MQ:feqButton),RIGHT(1)
feqButton                  LONG
!!> GUID('abc2d9b4-60a9-40ad-8fcd-ea520a141bb3'),PROMPT('feq Button:'),HEADER('feq Button'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('feq Button Icon:'),USE(?MQ:feqButtonIcon:Prompt)
! ENTRY(@n-14),USE(MQ:feqButtonIcon),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(MQ:feqButtonIcon),RIGHT(1)
feqButtonIcon              LONG
!!> GUID('61749d32-e55d-4906-ad8f-2200f25d001e'),PROMPT('feq Button Icon:'),HEADER('feq Button Icon'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('Macro Name:'),USE(?MQ:MacroName:Prompt)
! ENTRY(@s20),USE(MQ:MacroName)
[REPORTCONTROLS]
! STRING(@s20),USE(MQ:MacroName)
MacroName                  CSTRING(21)
!!> GUID('c65cd5ff-b231-4af1-8603-b29a6a6ca0cc'),PROMPT('Macro Name:'),HEADER('Macro Name'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('Macro Name Style:'),USE(?MQ:MacroNameStyle:Prompt)
! ENTRY(@n-14),USE(MQ:MacroNameStyle),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(MQ:MacroNameStyle),RIGHT(1)
MacroNameStyle             LONG
!!> GUID('2aa01564-ba58-4a49-9ec0-05215e348b6c'),PROMPT('Macro Name Style:'),HEADER('Macro Name Style'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('sz Field 1:'),USE(?MQ:szField1:Prompt)
! ENTRY(@s255),USE(MQ:szField1)
[REPORTCONTROLS]
! STRING(@s255),USE(MQ:szField1)
szField1                   CSTRING(261)
!!> GUID('40f53676-8883-4ce8-9d11-ac832b4f2df3'),PROMPT('sz Field 1:'),HEADER('sz Field 1'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('sz Field 1 Style:'),USE(?MQ:szField1Style:Prompt)
! ENTRY(@n-14),USE(MQ:szField1Style),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(MQ:szField1Style),RIGHT(1)
szField1Style              LONG
!!> GUID('ccf2852a-7e05-4d45-8077-a3f094eb48d2'),PROMPT('sz Field 1 Style:'),HEADER('sz Field 1 Style'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('sz Field 2:'),USE(?MQ:szField2:Prompt)
! ENTRY(@s255),USE(MQ:szField2)
[REPORTCONTROLS]
! STRING(@s255),USE(MQ:szField2)
szField2                   CSTRING(261)
!!> GUID('e9b13cc8-7f7d-4699-8af0-209d26d0e359'),PROMPT('sz Field 2:'),HEADER('sz Field 2'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('sz Field 2 Style:'),USE(?MQ:szField2Style:Prompt)
! ENTRY(@n-14),USE(MQ:szField2Style),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(MQ:szField2Style),RIGHT(1)
szField2Style              LONG
!!> GUID('c03a0aea-65f6-47c9-844b-b009b40780ed'),PROMPT('sz Field 2 Style:'),HEADER('sz Field 2 Style'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('sz Field 2:'),USE(?MQ:szField3:Prompt)
! ENTRY(@s255),USE(MQ:szField3)
[REPORTCONTROLS]
! STRING(@s255),USE(MQ:szField3)
szField3                   CSTRING(261)
!!> GUID('b1a3db6f-310b-40e2-88d1-a74c455d17b7'),PROMPT('sz Field 2:'),HEADER('sz Field 2'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('mark:'),USE(?MQ:mark:Prompt)
! ENTRY(@n3),USE(MQ:mark)
[REPORTCONTROLS]
! STRING(@n3),USE(MQ:mark)
mark                       BYTE
!!> GUID('d1fab248-1c76-4622-9560-b130322abbae'),PROMPT('mark:'),HEADER('mark'),PICTURE(@n3),TYPEMODE(INS)
                         END
!!> GUID('922242ed-ff58-4e54-bed9-424857cb1585')
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default', 'WindowToolbar')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('WindowManager')
WHEN  ('WindowToolbar') ('ToolbarClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(),BYTE,PROC,DERIVED', 'Kill {19}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeAccepted {11}PROCEDURE(),BYTE,PROC,DERIVED', 'TakeEvent {14}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeFieldEvent {9}PROCEDURE(),BYTE,PROC,DERIVED', 'TakeNewSelection       PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeWindowEvent        PROCEDURE(),BYTE,PROC,DERIVED')

%ReturnValue FIELD  ()
%WindowOperationMode DEFAULT  ('Use WINDOW setting')
%INISaveWindow LONG  (1)
%ProcedureDisableEnhanceFocus LONG  (0)
%ProcedureUseEnterInsteadTabOverride LONG  (0)
%WindowUseEnterInsteadTab LONG  (1)
%ProcedureUseEnterInsteadTabExcludeListCombo LONG  (0)
%ProcedureUseEnterInsteadTabEnableNextTabStop LONG  (0)
%ProcedureUseEnterInsteadTabExcludeG LONG  (1)
%WindowUseEnterInsteadTabExclude MULTI DEFAULT  ()
%GlobalObject DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('NO')
WHEN  ('WindowToolbar') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ThisWindow')
WHEN  ('WindowToolbar') ('Toolbar')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (0)
WHEN  ('WindowToolbar') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%WindowStyles MULTI LONG  (1)
%WindowStyleFontName DEPEND %WindowStyles DEFAULT TIMES 1
WHEN  (1) ('Segoe UI Semibold')

%WindowStyleFontNameVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameIsVariable DEPEND %WindowStyles LONG TIMES 1
WHEN  (1) (0)

%WindowStyleFontSize DEPEND %WindowStyles DEFAULT TIMES 1
WHEN  (1) ('10')

%WindowStyleFontSizeVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeIsVariable DEPEND %WindowStyles LONG TIMES 1
WHEN  (1) (0)

%WindowStyleFontStyle DEPEND %WindowStyles DEFAULT TIMES 1
WHEN  (1) ('600')

%WindowStyleFontStyleVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleIsVariable DEPEND %WindowStyles LONG TIMES 1
WHEN  (1) (0)

%WindowStyleFontColor DEPEND %WindowStyles DEFAULT TIMES 1
WHEN  (1) ('0')

%WindowStyleFontCharSet DEPEND %WindowStyles DEFAULT TIMES 1
WHEN  (1) ('1')

%WindowStyleForegroundNormal DEPEND %WindowStyles LONG TIMES 1
WHEN  (1) (-1)

%WindowStyleForegroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 1
WHEN  (1) (0)

%WindowStyleBackgroundNormal DEPEND %WindowStyles LONG TIMES 1
WHEN  (1) (8454143)

%WindowStyleBackgroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 1
WHEN  (1) (0)

%WindowStyleForegroundSelected DEPEND %WindowStyles LONG TIMES 1
WHEN  (1) (8454143)

%WindowStyleForegroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 1
WHEN  (1) (0)

%WindowStyleBackgroundSelected DEPEND %WindowStyles LONG TIMES 1
WHEN  (1) (12632256)

%WindowStyleBackgroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 1
WHEN  (1) (0)

%WindowStylePicture DEPEND %WindowStyles DEFAULT TIMES 1
WHEN  (1) ('')

%WindowStylePictureVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureIsVariable DEPEND %WindowStyles LONG TIMES 1
WHEN  (1) (0)

%WindowStyleOtherListboxes MULTI DEFAULT  ()
%ProcedureAutoBindFields MULTI LONG  ()
%ProcedureAutoBindField DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindFieldTPL DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindProcedures MULTI LONG  ()
%ProcedureAutoBindProcedure DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindProcedureTPL DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindFieldsIgnored MULTI LONG  ()
%ProcedureAutoBindFieldIgnored DEPEND %ProcedureAutoBindFieldsIgnored DEFAULT TIMES 0

%ProcedureAutoBindProceduresIgnored MULTI LONG  ()
%ProcedureAutoBindProcedureIgnored DEPEND %ProcedureAutoBindProceduresIgnored DEFAULT TIMES 0

%ProcedureAutoBindValidToAddField LONG  (0)
%ProcedureUserBindFields MULTI LONG  ()
%ProcedureUserBindField DEPEND %ProcedureUserBindFields FIELD TIMES 0

%ProcedureAutoBindFieldIgnore DEPEND %ProcedureAutoBindFields LONG TIMES 0

%ProcedureUserBindProcedures MULTI LONG  ()
%ProcedureUserBindProcedure DEPEND %ProcedureUserBindProcedures PROCEDURE TIMES 0

%ProcedureAutoBindProcedureIgnore DEPEND %ProcedureAutoBindProcedures LONG TIMES 0

%ProcedureUserBindExpressions MULTI LONG  ()
%ProcedureUserBindExpressionName DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ProcedureUserBindExpression DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ExtUITabIcon DEPEND %Control DEFAULT TIMES 0

%ExtUITabStyleOverrideGlobal DEPEND %Control LONG TIMES 0

%ExtUITabStyle DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('Default')

%ButtonAction DEPEND %Control DEFAULT TIMES 9
WHEN  ('') ('No Special Action')
WHEN  ('?cmdDelete') ('No Special Action')
WHEN  ('?cmdLoad') ('No Special Action')
WHEN  ('?cmdMoveDown') ('No Special Action')
WHEN  ('?cmdMoveUp') ('No Special Action')
WHEN  ('?cmdNextMacro') ('No Special Action')
WHEN  ('?cmdPlay') ('No Special Action')
WHEN  ('?cmdPreviousMacro') ('No Special Action')
WHEN  ('?cmdSave') ('No Special Action')

%ButtonRunName DEPEND %Control DEFAULT TIMES 0

%ButtonRunParameters DEPEND %Control DEFAULT TIMES 0

%ButtonProcedure DEPEND %Control PROCEDURE TIMES 0

%ButtonThread DEPEND %Control LONG TIMES 0

%ButtonThreadStack DEPEND %Control DEFAULT TIMES 9
WHEN  ('') ('25000')
WHEN  ('?cmdDelete') ('25000')
WHEN  ('?cmdLoad') ('25000')
WHEN  ('?cmdMoveDown') ('25000')
WHEN  ('?cmdMoveUp') ('25000')
WHEN  ('?cmdNextMacro') ('25000')
WHEN  ('?cmdPlay') ('25000')
WHEN  ('?cmdPreviousMacro') ('25000')
WHEN  ('?cmdSave') ('25000')

%ButtonParameters DEPEND %Control DEFAULT TIMES 0

%ButtonReturnValueAssignment DEPEND %Control FIELD TIMES 0

%ButtonReturnValueReferenceAssign DEPEND %Control LONG TIMES 0

%ButtonRequest DEPEND %Control DEFAULT TIMES 9
WHEN  ('') ('None')
WHEN  ('?cmdDelete') ('None')
WHEN  ('?cmdLoad') ('None')
WHEN  ('?cmdMoveDown') ('None')
WHEN  ('?cmdMoveUp') ('None')
WHEN  ('?cmdNextMacro') ('None')
WHEN  ('?cmdPlay') ('None')
WHEN  ('?cmdPreviousMacro') ('None')
WHEN  ('?cmdSave') ('None')

%ButtonThreadParameters DEPEND %Control DEFAULT TIMES 0

%ButtonThreadReturnValueAssignment DEPEND %Control FIELD TIMES 0

%PreLookupKey DEPEND %Control KEY TIMES 0

%PreLookupField DEPEND %Control COMPONENT TIMES 0

%PreLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PreLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupKey DEPEND %Control KEY TIMES 0

%PostLookupField DEPEND %Control COMPONENT TIMES 0

%PostLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupDuringValidate DEPEND %Control LONG TIMES 1
WHEN  ('') (1)

%LookupAssign DEPEND %Control MULTI LONG TIMES 0

%MoreTarget DEPEND %LookupAssign FIELD TIMES 0

%MoreField DEPEND %LookupAssign DEFAULT TIMES 0

%ForceWindowRefresh DEPEND %Control LONG TIMES 0

%CheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%CheckedAssignVariable DEPEND %CheckedAssigns FIELD TIMES 0

%CheckedAssignValue DEPEND %CheckedAssigns DEFAULT TIMES 0

%CheckedHides DEPEND %Control MULTI LONG TIMES 0

%CheckedControl DEPEND %CheckedHides DEFAULT TIMES 0

%CheckedControlAction DEPEND %CheckedHides DEFAULT TIMES 1
WHEN  ('')TIMES 0

%CheckedEnables DEPEND %Control MULTI LONG TIMES 0

%CheckedControl1 DEPEND %CheckedEnables DEFAULT TIMES 0

%CheckedControl1Action DEPEND %CheckedEnables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%UncheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%UncheckedAssignVariable DEPEND %UncheckedAssigns FIELD TIMES 0

%UncheckedAssignValue DEPEND %UncheckedAssigns DEFAULT TIMES 0

%UnCheckedHides DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl DEPEND %UnCheckedHides DEFAULT TIMES 0

%UnCheckedControlAction DEPEND %UnCheckedHides DEFAULT TIMES 1
WHEN  ('')TIMES 0

%UnCheckedEnables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl1 DEPEND %UnCheckedEnables DEFAULT TIMES 0

%UnCheckedControl1Action DEPEND %UnCheckedEnables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%CheckedDisables DEPEND %Control MULTI LONG TIMES 0

%CheckedDisableControl DEPEND %CheckedDisables DEFAULT TIMES 0

%CheckedDisableControlAction DEPEND %CheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%UnCheckedDisables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedDisableControl DEPEND %UnCheckedDisables DEFAULT TIMES 0

%UnCheckedDisableControlAction DEPEND %UnCheckedDisables DEFAULT TIMES 1
WHEN  ('')TIMES 0

%ProcedureOneInstance LONG  (0)
%FieldGradientColorType DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('Off')

%FieldGradientColorTypeVariable DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('')

%FieldGradientColorTypeIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%FieldGradientColorFrom DEPEND %Control LONG TIMES 1
WHEN  ('') (-1)

%FieldGradientColorFromVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorFromIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%FieldGradientColorTo DEPEND %Control LONG TIMES 1
WHEN  ('') (-1)

%FieldGradientColorToVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorToIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%PreserveVarsLoc MULTI LONG  ()
%PreserveVarLoc DEPEND %PreserveVarsLoc DEFAULT TIMES 0

%ActiveImageEnable DEPEND %Control LONG TIMES 0

%AIObjectName DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('AIBtn0')

%AIEnableMimicControl DEPEND %Control LONG TIMES 1
WHEN  ('') (1)

%AIMimicControl DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('?MacroList')

%AIImgRound DEPEND %Control LONG TIMES 0

%AIOverrideImg DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgVariable DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIDisableImg DEPEND %Control DEFAULT TIMES 0

%AIDisableImgVariable DEPEND %Control DEFAULT TIMES 0

%AIDisableImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIHotImg DEPEND %Control DEFAULT TIMES 0

%AIHotImgVariable DEPEND %Control DEFAULT TIMES 0

%AIHotImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIPressedImg DEPEND %Control DEFAULT TIMES 0

%AIPressedImgVariable DEPEND %Control DEFAULT TIMES 0

%AIPressedImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

[EMBED]
EMBED %WindowManagerMethodDataSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
i        LONG
j        LONG
[END]
[END]
WHEN 'TakeAccepted'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
i                 LONG
retVal            LONG
thisMacroSetName  CSTRING(256)
[END]
[END]
WHEN 'TakeEvent'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
i      LONG
[END]
[END]
[END]
EMBED %WindowManagerMethodCodeSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7800
PROPERTY:END
DO FillLocalQueue
SELF.Open(Window,glo:MainWindow)
OMIT('***')
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8005
PROPERTY:END
!***
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8150
PROPERTY:END
?MacroList{PROP:FontName}   = glo:ResultListFontName
?MacroList{PROP:FontSize}   = glo:ResultListFontSize
?MacroList{PROP:FontColor}  = glo:ResultListForeColor
?MacroList{PROP:FontStyle}  = glo:ResultListFontStyle
?MacroList{PROP:LineHeight} = glo:ResultListFontSize
?MacroList{PROPLIST:Width,1} = ?MacroList{PROP:LineHeight} * 1.45
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8310
PROPERTY:END
INIMgr.Fetch('MacroPlayer','AutoAdvance',AutoAdvance)
INIMgr.FetchQueue('MacroSets','MacroSet',MacroSetQueue,MacroSetQueue.MacroSetName)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9700
PROPERTY:END
GET(loc:MacroQueue,1)
?MacroList{PROP:Selected} = 1
POST(EVENT:NewSelection,?MacroList)
[END]
[END]
WHEN 'Kill'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
INIMgr.Update('MacroPlayer','AutoAdvance',AutoAdvance)
INIMgr.UpdateQueue('MacroSets','MacroSet',MacroSetQueue,MacroSetQueue.MacroSetName)
[END]
[END]
[END]
EMBED %ControlEventHandling
[INSTANCES]
WHEN '?cmdPlay'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
GET(MacroQueue,CHOICE(?MacroList))
POST(EVENT:PLAYMACRO,,1)

GET(loc:MacroQueue,CHOICE(?MacroList))
loc:MacroQueue.feqButtonIcon = 1
PUT(loc:MacroQueue)

IF AutoAdvance = TRUE
   IF CHOICE(?MacroList) < RECORDS(loc:MacroQueue)
      ?MacroList{PROP:Selected} = CHOICE(?MacroList)+1
      POST(EVENT:NewSelection,?MacroList)
   END
END
[END]
[END]
WHEN '?MacroList'
[INSTANCES]
WHEN 'NewSelection'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
GET(loc:MacroQueue,CHOICE(?MacroList))
!      IF loc:MacroQueue.mark = TRUE
!         ?cmdMark{PROP:Icon} = '~checkno.ico'
!      ELSE
!         ?cmdMark{PROP:Icon} = '~checkyes.ico'
!      END
!      DISPLAY(?cmdMark)

IF RECORDS(loc:MacroQueue) = 0
   DISABLE(?cmdDelete)
!         DISABLE(?cmdMark)
   DISABLE(?cmdSave)
   DISABLE(?cmdPlay)
!         DISABLE(?cmdPlaySelections)
ELSE
   ENABLE(?cmdDelete)
!         ENABLE(?cmdMark)
!         ENABLE(?cmdSave)
   ENABLE(?cmdPlay)
!         IF MarkCount > 0
!            ENABLE(?cmdPlaySelections)
!         ELSE
!            DISABLE(?cmdPlaySelections)
!         END
END

IF RECORDS(loc:MacroQueue) < 2
   DISABLE(?cmdMoveUp)
   DISABLE(?cmdMoveDown)
   DISABLE(?cmdNextMacro)
   DISABLE(?cmdPreviousMacro)
ELSE
   CASE ?MacroList{PROP:Selected}
     OF 1
        DISABLE(?cmdMoveUp)
        ENABLE(?cmdMoveDown)
        DISABLE(?cmdPreviousMacro)
        ENABLE(?cmdNextMacro)
     OF RECORDS(loc:MacroQueue)
        ENABLE(?cmdMoveUp)
        DISABLE(?cmdMoveDown)
        ENABLE(?cmdPreviousMacro)
        DISABLE(?cmdNextMacro)
   ELSE
        ENABLE(?cmdMoveUp)
        ENABLE(?cmdMoveDown)
        ENABLE(?cmdPreviousMacro)
        ENABLE(?cmdNextMacro)
   END
END
[END]
WHEN 'AlertKey'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
CASE KEYCODE()
  OF MouseLeft2
     POST(EVENT:Accepted,?cmdPlay)
END
[END]
[END]
WHEN '?cmdMoveUp'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
GET(loc:MacroQueue,CHOICE(?MacroList))
i = POINTER(loc:MacroQueue)
DELETE(loc:MacroQueue)
ADD(loc:MacroQueue,i-1)
DO SaveMacroQueue
?MacroList{PROP:Selected} = i-1
POST(EVENT:NewSelection,?MacroList)
[END]
[END]
WHEN '?cmdMoveDown'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
GET(loc:MacroQueue,CHOICE(?MacroList))
i = POINTER(loc:MacroQueue)
DELETE(loc:MacroQueue)
ADD(loc:MacroQueue,i+1)
DO SaveMacroQueue
?MacroList{PROP:Selected} = i+1
POST(EVENT:NewSelection,?MacroList)
[END]
[END]
WHEN '?cmdDelete'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
RetVal = CHOOSE(GlobalErrors.Throw(Msg:ConfirmDelete) = Level:Benign,RequestCompleted,RequestCancelled)
IF RetVal = RequestCompleted
   GET(loc:MacroQueue,CHOICE(?MacroList))
   DELETE(loc:MacroQueue)
   DO SaveMacroQueue
   IF CHOICE(?MacroList) = 0
      GET(loc:MacroQueue,RECORDS(loc:MacroQueue))
      ?MacroList{PROP:Selected} = POINTER(loc:MacroQueue)
   END
   POST(EVENT:NewSelection,?MacroList)
END
[END]
[END]
WHEN '?cmdSave'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
winGetMacroSetName(thisMacroSetName)
IF ThisMacroSetName <> ''
   MacroSetQueue.MacroSetName = thisMacroSetName
   ADD(MacroSetQueue)
   INIMgr.UpdateQueue('MacroSets','MacroSet',MacroSetQueue,MacroSetQueue.MacroSetName)

   INIMgr.UpdateQueue(ThisMacroSetName,'Macro',loc:MacroQueue,loc:MacroQueue.feqButton,loc:MacroQueue.szField1,loc:MacroQueue.szField2,loc:MacroQueue.szField3)
   MESSAGE('Macro Set ' & thisMacroSetName & ' saved.','Save Macro Set',ICON:Asterisk)
END
[END]
[END]
WHEN '?cmdNextMacro'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
IF CHOICE(?MacroList) < RECORDS(loc:MacroQueue)
   ?MacroList{PROP:Selected} = CHOICE(?MacroList)+1
   POST(EVENT:NewSelection,?MacroList)
END
[END]
[END]
WHEN '?cmdPreviousMacro'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
IF CHOICE(?MacroList) > 1
   ?MacroList{PROP:Selected} = CHOICE(?MacroList)-1
   POST(EVENT:NewSelection,?MacroList)
END
[END]
[END]
WHEN '?cmdLoad'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
RetVal = winLoadMacroSet(MacroSetQueue)
IF RetVal > 0
   GET(MacroSetQueue,RetVal)
   FREE(loc:MacroQueue)
   INIMgr.FetchQueue(MacroSetQueue.MacroSetName,'Macro',loc:MacroQueue,loc:MacroQueue.feqButton,loc:MacroQueue.szField1,loc:MacroQueue.szField2,loc:MacroQueue.szField3)
   DO SaveMacroQueue
   POST(EVENT:NewSelection,?MacroList)
END
[END]
[END]
[END]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5500
PROPERTY:END
FillLocalQueue    ROUTINE
   DATA
i     LONG
j     LONG

   CODE
      FREE(loc:MacroQueue)
      j = RECORDS(MacroQueue)
      LOOP i = 1 TO j
         GET(MacroQueue,i)
         DO FormatQueueRecord
         ADD(loc:MacroQueue)
      END
   EXIT

FormatQueueRecord ROUTINE
   CASE MacroQueue.feqButton
     OF BUTTON:NextFolder
        loc:MacroQueue.MacroName = 'Next Folder'
     OF BUTTON:PreviousFolder
        loc:MacroQueue.MacroName = 'Previous Folder'
     OF BUTTON:NextFile
        loc:MacroQueue.MacroName = 'Next File'
     OF BUTTON:PreviousFile
        loc:MacroQueue.MacroName = 'Previous File'
     OF BUTTON:DeleteLine
        loc:MacroQueue.MacroName = 'Delete Line'
     OF BUTTON:DeleteFile
        loc:MacroQueue.MacroName = 'Delete File'
     OF BUTTON:DeleteExtension
        loc:MacroQueue.MacroName = 'Delete Extension'
     OF BUTTON:DeletePath
        loc:MacroQueue.MacroName = 'Delete Path'
     OF BUTTON:DeleteComments
        loc:MacroQueue.MacroName = 'Delete Comments'
     OF BUTTON:DeleteLabels
        loc:MacroQueue.MacroName = 'Delete Labels'
     OF BUTTON:DeleteCode
        loc:MacroQueue.MacroName = 'Delete Code'
     OF BUTTON:DeleteData
        loc:MacroQueue.MacroName = 'Delete Data'
     OF BUTTON:FindAndDelete
        loc:MacroQueue.MacroName = 'Find and Delete'
   END
   loc:MacroQueue.feqButton = MacroQueue.feqButton
   CASE loc:MacroQueue.feqButton
     OF BUTTON:DELETEFILE
        loc:MacroQueue.szField1  = MacroQueue.szField1 & MacroQueue.szField2
        loc:MacroQueue.szField2  = MacroQueue.szField3
   ELSE
        loc:MacroQueue.szField1  = MacroQueue.szField1
        loc:MacroQueue.szField2  = MacroQueue.szField2
   END
   loc:MacroQueue.mark      = FALSE
   loc:MacroQueue.MacroNameStyle = 0
   loc:MacroQueue.szField1Style  = 0
   loc:MacroQueue.szField2Style  = 0
   EXIT

SaveMacroQueue ROUTINE
   DATA
i        LONG
j        LONG
n        LONG
p        LONG
   CODE
      FREE(MacroQueue)
      j = POINTER(loc:MacroQueue)
      LOOP i = 1 TO RECORDS(loc:MacroQueue)
         GET(loc:MacroQueue,i)
         MacroQueue.feqButton = loc:MacroQueue.feqButton
         CASE loc:MacroQueue.feqButton
           OF BUTTON:DeleteFile
              n = LEN(loc:MacroQueue.szField1)
              LOOP p = n to 1 BY -1
                 IF loc:MacroQueue.szField1[p] = '.'
                    BREAK
                 END
              END
              IF p > 0
                 MacroQueue.szField1  = loc:MacroQueue.szField1[1 : p-1]
                 MacroQueue.szField2  = loc:MacroQueue.szField1[p : n]
                 MacroQueue.szField3  = loc:MacroQueue.szField2
              ELSE
                 MacroQueue.szField1  = loc:MacroQueue.szField1
                 MacroQueue.szField2  = ''
                 MacroQueue.szField3  = loc:MacroQueue.szField2
              END
         ELSE
            MacroQueue.szField1  = loc:MacroQueue.szField1
            MacroQueue.szField2  = loc:MacroQueue.szField2
            MacroQueue.szField3  = ''
         END
         MacroQueue.mark      = loc:MacroQueue.mark
         ADD(MacroQueue)
         loc:MacroQueue.feqButtonIcon = loc:MacroQueue.mark
         PUT(loc:MacroQueue)
      END
      GET(loc:MacroQueue,j)
      ?MacroList{PROP:Selected} = j
   EXIT
[END]
EMBED %WindowEventHandling
[INSTANCES]
WHEN 'CloseWindow'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
DO SaveMacroQueue
POST(EVENT:MACROPLAYERCLOSED,,1)
[END]
WHEN 'DoResize'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
?MacroList{PROPLIST:Width,3} = (?MacroList{PROP:Width} - 60)/2
[END]
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
MacroSetQueue  QUEUE,PRE(msq)
MacroSetName      CSTRING(256)
               END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3000
PROPERTY:END
MarkCount            LONG
[END]
EMBED %ListboxStyleAfterDefine
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
?MacroList{PROP:IconList,1} = '~check-green.ico'
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME ABC WindowResize
[FIELDPROMPT]
%ResizeAnchorTop DEPEND %Control LONG TIMES 0

%ResizeAnchorLeft DEPEND %Control LONG TIMES 0

%ResizeAnchorRight DEPEND %Control LONG TIMES 0

%ResizeAnchorBottom DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowTop DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowLeft DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowRight DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowBottom DEPEND %Control LONG TIMES 0

[INSTANCE]
INSTANCE 2
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('WindowResizeClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(BYTE AppStrategy=AppStrategy:Resize,BYTE SetWindowMinSize=False,BYTE SetWindowMaxSize=False)')

%AppStrategy DEFAULT  ('Spread')
%RestrictMinSize LONG  (1)
%WindowMinWidth DEFAULT  ('0')
%WindowMinHeight DEFAULT  ('93')
%RestrictMaxSize LONG  (0)
%WindowMaxWidth DEFAULT  ('')
%WindowMaxHeight DEFAULT  ('')
%AutoFindParents DEFAULT  ('Default')
%DeferMoves DEFAULT  ('Default')
%OverrideControls MULTI LONG  (1, 3, 4, 5, 6, 8, 10, 11, 12, 13)
%OverrideControl DEPEND %OverrideControls DEFAULT TIMES 10
WHEN  (1) ('?MacroList')
WHEN  (3) ('?cmdMoveUp')
WHEN  (4) ('?cmdMoveDown')
WHEN  (5) ('?cmdDelete')
WHEN  (6) ('?cmdPlay')
WHEN  (8) ('?AutoAdvance')
WHEN  (10) ('?cmdLoad')
WHEN  (11) ('?cmdSave')
WHEN  (12) ('?cmdNextMacro')
WHEN  (13) ('?cmdPreviousMacro')

%DisableResize DEPEND %OverrideControls LONG TIMES 10
WHEN  (1) (0)
WHEN  (3) (0)
WHEN  (4) (0)
WHEN  (5) (0)
WHEN  (6) (0)
WHEN  (8) (0)
WHEN  (10) (0)
WHEN  (11) (0)
WHEN  (12) (0)
WHEN  (13) (0)

%HorizResize DEPEND %OverrideControls DEFAULT TIMES 10
WHEN  (1) ('Constant Right Border')
WHEN  (3) ('Lock Width')
WHEN  (4) ('Lock Width')
WHEN  (5) ('Lock Width')
WHEN  (6) ('Lock Width')
WHEN  (8) ('Lock Width')
WHEN  (10) ('Lock Width')
WHEN  (11) ('Lock Width')
WHEN  (12) ('Lock Width')
WHEN  (13) ('Lock Width')

%VertResize DEPEND %OverrideControls DEFAULT TIMES 10
WHEN  (1) ('Constant Bottom Border')
WHEN  (3) ('Lock Height')
WHEN  (4) ('Lock Height')
WHEN  (5) ('Lock Height')
WHEN  (6) ('Lock Height')
WHEN  (8) ('Lock Height')
WHEN  (10) ('Lock Height')
WHEN  (11) ('Lock Height')
WHEN  (12) ('Lock Height')
WHEN  (13) ('Lock Height')

%HorizPositional DEPEND %OverrideControls DEFAULT TIMES 10
WHEN  (1) ('Fix Left')
WHEN  (3) ('Fix Left')
WHEN  (4) ('Fix Left')
WHEN  (5) ('Fix Left')
WHEN  (6) ('Fix Right')
WHEN  (8) ('Fix Left')
WHEN  (10) ('Fix Right')
WHEN  (11) ('Fix Right')
WHEN  (12) ('Fix Right')
WHEN  (13) ('Fix Right')

%VertPositional DEPEND %OverrideControls DEFAULT TIMES 10
WHEN  (1) ('Fix Top')
WHEN  (3) ('Fix Bottom')
WHEN  (4) ('Fix Bottom')
WHEN  (5) ('Fix Bottom')
WHEN  (6) ('Fix Bottom')
WHEN  (8) ('Fix Bottom')
WHEN  (10) ('Fix Bottom')
WHEN  (11) ('Fix Bottom')
WHEN  (12) ('Fix Bottom')
WHEN  (13) ('Fix Bottom')

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('Resizer')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('ADOBlob')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

[CALLS]
winGetMacroSetName
winLoadMacroSet
[WINDOW]
Window  WINDOW('Macro Player'),AT(,,273,176),FONT('Segoe UI',10),RESIZE,GRAY,IMM,HLP('MacroPlayer.htm'), |
          SYSTEM,TOOLBOX
          LIST,AT(10,10,253,132),USE(?MacroList),VSCROLL,ALRT(MouseLeft2),FORMAT('10L(2)I@p_' & |
            'pB@70L(2)|Y~Action~@s20@96L(2)|Y~Parameter 1~L(1)S(1080)@s255@96L(2)|Y~Par' & |
            'ameter 2~S(1080)@s255@'),FROM(loc:MacroQueue),#FIELDS(MQ:feqButton,MQ:MacroName, |
            MQ:szField1,MQ:szField2),#ORDINAL(1)
          CHECK(' Advance to next action after playing'),AT(10,145),USE(AutoAdvance),#ORDINAL(2)
          BUTTON,AT(10,157,18,14),USE(?cmdMoveUp),ICON('abuprow.ico'),TIP('Move Action Up'), |
            #ORDINAL(3)
          BUTTON,AT(30,157,18,14),USE(?cmdMoveDown),ICON('abdnrow.ico'),TIP('Move Action Down'), |
            #ORDINAL(4)
          BUTTON,AT(50,157,18,14),USE(?cmdDelete),ICON('delete16.ico'),TIP('Delete Action'), |
            #ORDINAL(5)
          BUTTON('&Load'),AT(75,157,45),USE(?cmdLoad),TIP('Load a Saved Macro Set'),#ORDINAL(6)
          BUTTON('&Save'),AT(125,157,45),USE(?cmdSave),TIP('Save Actions to a Macro Set'), |
            #ORDINAL(7)
          BUTTON('&Play'),AT(175,157,45,14),USE(?cmdPlay),DEFAULT,TIP('Perform the High' & |
            'lighted Action'),#ORDINAL(8)
          BUTTON,AT(225,157,18,14),USE(?cmdNextMacro),ICON('NextMacro.ico'),TIP('Move to Ne' & |
            'xt Action in List'),#ORDINAL(9)
          BUTTON,AT(245,157,18,14),USE(?cmdPreviousMacro),ICON('PreviousMacro.ico'),TIP('Move to Pr' & |
            'evious Action in List'),#ORDINAL(10)
        END

[PROCEDURE]
NAME winGetMacroSetName
PROTOTYPE '(*CSTRING MacroSetName)'
PARAMETERS '(*CSTRING MacroSetName)'
[COMMON]
FROM ABC Window
MODIFIED '2013/06/02' '13:03:23'
[DATA]
[SCREENCONTROLS]
! PROMPT('loc : Macro Set Name:'),USE(?loc:MacroSetName:Prompt)
! ENTRY(@s255),USE(loc:MacroSetName)
[REPORTCONTROLS]
! STRING(@s255),USE(loc:MacroSetName)
loc:MacroSetName         CSTRING(256)
!!> GUID('510bf0e3-d736-4665-9011-0856db4e588b'),PROMPT('loc : Macro Set Name:'),HEADER('loc : Macro Set Name'),PICTURE(@s255),TYPEMODE(INS)
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default', 'WindowToolbar')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('WindowManager')
WHEN  ('WindowToolbar') ('ToolbarClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(),BYTE,PROC,DERIVED', 'Kill {19}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeAccepted {11}PROCEDURE(),BYTE,PROC,DERIVED')

%ReturnValue FIELD  ()
%WindowOperationMode DEFAULT  ('Use WINDOW setting')
%INISaveWindow LONG  (1)
%ProcedureDisableEnhanceFocus LONG  (0)
%ProcedureUseEnterInsteadTabOverride LONG  (0)
%WindowUseEnterInsteadTab LONG  (1)
%ProcedureUseEnterInsteadTabExcludeListCombo LONG  (0)
%ProcedureUseEnterInsteadTabEnableNextTabStop LONG  (0)
%ProcedureUseEnterInsteadTabExcludeG LONG  (1)
%WindowUseEnterInsteadTabExclude MULTI DEFAULT  ()
%GlobalObject DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('NO')
WHEN  ('WindowToolbar') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ThisWindow')
WHEN  ('WindowToolbar') ('Toolbar')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (0)
WHEN  ('WindowToolbar') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%WindowStyles MULTI LONG  ()
%WindowStyleFontName DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontSize DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontStyle DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontColor DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontCharSet DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStylePicture DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleOtherListboxes MULTI DEFAULT  ()
%ProcedureAutoBindFields MULTI LONG  ()
%ProcedureAutoBindField DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindFieldTPL DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindProcedures MULTI LONG  ()
%ProcedureAutoBindProcedure DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindProcedureTPL DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindFieldsIgnored MULTI LONG  ()
%ProcedureAutoBindFieldIgnored DEPEND %ProcedureAutoBindFieldsIgnored DEFAULT TIMES 0

%ProcedureAutoBindProceduresIgnored MULTI LONG  ()
%ProcedureAutoBindProcedureIgnored DEPEND %ProcedureAutoBindProceduresIgnored DEFAULT TIMES 0

%ProcedureAutoBindValidToAddField LONG  (0)
%ProcedureUserBindFields MULTI LONG  ()
%ProcedureUserBindField DEPEND %ProcedureUserBindFields FIELD TIMES 0

%ProcedureAutoBindFieldIgnore DEPEND %ProcedureAutoBindFields LONG TIMES 0

%ProcedureUserBindProcedures MULTI LONG  ()
%ProcedureUserBindProcedure DEPEND %ProcedureUserBindProcedures PROCEDURE TIMES 0

%ProcedureAutoBindProcedureIgnore DEPEND %ProcedureAutoBindProcedures LONG TIMES 0

%ProcedureUserBindExpressions MULTI LONG  ()
%ProcedureUserBindExpressionName DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ProcedureUserBindExpression DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ExtUITabIcon DEPEND %Control DEFAULT TIMES 0

%ExtUITabStyleOverrideGlobal DEPEND %Control LONG TIMES 0

%ExtUITabStyle DEPEND %Control DEFAULT TIMES 2
WHEN  ('') ('Default')
WHEN  ('?cmdCancel') ('Default')

%ButtonAction DEPEND %Control DEFAULT TIMES 3
WHEN  ('') ('No Special Action')
WHEN  ('?cmdCancel') ('No Special Action')
WHEN  ('?cmdOK') ('No Special Action')

%ButtonRunName DEPEND %Control DEFAULT TIMES 0

%ButtonRunParameters DEPEND %Control DEFAULT TIMES 0

%ButtonProcedure DEPEND %Control PROCEDURE TIMES 0

%ButtonThread DEPEND %Control LONG TIMES 0

%ButtonThreadStack DEPEND %Control DEFAULT TIMES 3
WHEN  ('') ('25000')
WHEN  ('?cmdCancel') ('25000')
WHEN  ('?cmdOK') ('25000')

%ButtonParameters DEPEND %Control DEFAULT TIMES 0

%ButtonReturnValueAssignment DEPEND %Control FIELD TIMES 0

%ButtonReturnValueReferenceAssign DEPEND %Control LONG TIMES 0

%ButtonRequest DEPEND %Control DEFAULT TIMES 3
WHEN  ('') ('None')
WHEN  ('?cmdCancel') ('None')
WHEN  ('?cmdOK') ('None')

%ButtonThreadParameters DEPEND %Control DEFAULT TIMES 0

%ButtonThreadReturnValueAssignment DEPEND %Control FIELD TIMES 0

%PreLookupKey DEPEND %Control KEY TIMES 0

%PreLookupField DEPEND %Control COMPONENT TIMES 0

%PreLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PreLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupKey DEPEND %Control KEY TIMES 0

%PostLookupField DEPEND %Control COMPONENT TIMES 0

%PostLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupDuringValidate DEPEND %Control LONG TIMES 3
WHEN  ('') (1)
WHEN  ('?cmdCancel') (1)
WHEN  ('?loc:MacroSetName') (1)

%LookupAssign DEPEND %Control MULTI LONG TIMES 0

%MoreTarget DEPEND %LookupAssign FIELD TIMES 0

%MoreField DEPEND %LookupAssign DEFAULT TIMES 0

%ForceWindowRefresh DEPEND %Control LONG TIMES 0

%CheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%CheckedAssignVariable DEPEND %CheckedAssigns FIELD TIMES 0

%CheckedAssignValue DEPEND %CheckedAssigns DEFAULT TIMES 0

%CheckedHides DEPEND %Control MULTI LONG TIMES 0

%CheckedControl DEPEND %CheckedHides DEFAULT TIMES 0

%CheckedControlAction DEPEND %CheckedHides DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?cmdCancel')TIMES 0

%CheckedEnables DEPEND %Control MULTI LONG TIMES 0

%CheckedControl1 DEPEND %CheckedEnables DEFAULT TIMES 0

%CheckedControl1Action DEPEND %CheckedEnables DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?cmdCancel')TIMES 0

%UncheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%UncheckedAssignVariable DEPEND %UncheckedAssigns FIELD TIMES 0

%UncheckedAssignValue DEPEND %UncheckedAssigns DEFAULT TIMES 0

%UnCheckedHides DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl DEPEND %UnCheckedHides DEFAULT TIMES 0

%UnCheckedControlAction DEPEND %UnCheckedHides DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?cmdCancel')TIMES 0

%UnCheckedEnables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl1 DEPEND %UnCheckedEnables DEFAULT TIMES 0

%UnCheckedControl1Action DEPEND %UnCheckedEnables DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?cmdCancel')TIMES 0

%CheckedDisables DEPEND %Control MULTI LONG TIMES 0

%CheckedDisableControl DEPEND %CheckedDisables DEFAULT TIMES 0

%CheckedDisableControlAction DEPEND %CheckedDisables DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?cmdCancel')TIMES 0

%UnCheckedDisables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedDisableControl DEPEND %UnCheckedDisables DEFAULT TIMES 0

%UnCheckedDisableControlAction DEPEND %UnCheckedDisables DEFAULT TIMES 2
WHEN  ('')TIMES 0
WHEN  ('?cmdCancel')TIMES 0

%ProcedureOneInstance LONG  (0)
%FieldGradientColorType DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('Off')

%FieldGradientColorTypeVariable DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('')

%FieldGradientColorTypeIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%FieldGradientColorFrom DEPEND %Control LONG TIMES 1
WHEN  ('') (-1)

%FieldGradientColorFromVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorFromIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%FieldGradientColorTo DEPEND %Control LONG TIMES 1
WHEN  ('') (-1)

%FieldGradientColorToVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorToIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%PreserveVarsLoc MULTI LONG  ()
%PreserveVarLoc DEPEND %PreserveVarsLoc DEFAULT TIMES 0

%ActiveImageEnable DEPEND %Control LONG TIMES 0

%AIObjectName DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('AIBtn0')

%AIEnableMimicControl DEPEND %Control LONG TIMES 1
WHEN  ('') (1)

%AIMimicControl DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('?cmdOK')

%AIImgRound DEPEND %Control LONG TIMES 0

%AIOverrideImg DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgVariable DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIDisableImg DEPEND %Control DEFAULT TIMES 0

%AIDisableImgVariable DEPEND %Control DEFAULT TIMES 0

%AIDisableImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIHotImg DEPEND %Control DEFAULT TIMES 0

%AIHotImgVariable DEPEND %Control DEFAULT TIMES 0

%AIHotImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIPressedImg DEPEND %Control DEFAULT TIMES 0

%AIPressedImgVariable DEPEND %Control DEFAULT TIMES 0

%AIPressedImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[END]
EMBED %ControlEventHandling
[INSTANCES]
WHEN '?cmdOK'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
MacroSetName = loc:MacroSetName
POST(EVENT:CloseWindow)
[END]
[END]
WHEN '?cmdCancel'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 6000
PROPERTY:END
MacroSetName = ''
POST(EVENT:CloseWindow)
[END]
[END]
[END]
EMBED %WindowManagerMethodCodeSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7800
PROPERTY:END
loc:MacroSetName = MacroSetName
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8400
PROPERTY:END
CorrectForOffscreen(Window)
[END]
[END]
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[CALLS]
CorrectForOffScreen
[WINDOW]
Window  WINDOW('Macro Set Name ...'),AT(,,262,45),FONT('Segoe UI',10),GRAY,SYSTEM
          BUTTON('&OK'),AT(157,25,45,14),USE(?cmdOK),DEFAULT,#ORDINAL(1)
          BUTTON('&Cancel'),AT(207,25,45,14),USE(?cmdCancel),#ORDINAL(2)
          PROMPT('Macro Set Name'),AT(10,10),USE(?loc:MacroSetName:Prompt),#ORDINAL(10000)
          ENTRY(@s255),AT(72,10,180,10),USE(loc:MacroSetName),#ORDINAL(10001)
        END

[PROCEDURE]
NAME winLoadMacroSet
PROTOTYPE '(MacroSetQueueType MacroSetQueue),LONG'
PARAMETERS '(MacroSetQueueType MacroSetQueue)'
[COMMON]
FROM ABC Window
MODIFIED '2013/06/02' '13:03:50'
[DATA]
[SCREENCONTROLS]
! PROMPT('Ret Val:'),USE(?RetVal:Prompt)
! ENTRY(@n-14),USE(RetVal),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(RetVal),RIGHT(1)
RetVal                   LONG
!!> GUID('985a0b7f-7492-442a-bd53-a0aa33055aa3'),PROMPT('Ret Val:'),HEADER('Ret Val'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default', 'WindowToolbar')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('WindowManager')
WHEN  ('WindowToolbar') ('ToolbarClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(),BYTE,PROC,DERIVED', 'Kill {19}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeAccepted {11}PROCEDURE(),BYTE,PROC,DERIVED')

%ReturnValue FIELD  (RetVal)
%WindowOperationMode DEFAULT  ('Use WINDOW setting')
%INISaveWindow LONG  (1)
%ProcedureDisableEnhanceFocus LONG  (0)
%ProcedureUseEnterInsteadTabOverride LONG  (0)
%WindowUseEnterInsteadTab LONG  (1)
%ProcedureUseEnterInsteadTabExcludeListCombo LONG  (0)
%ProcedureUseEnterInsteadTabEnableNextTabStop LONG  (0)
%ProcedureUseEnterInsteadTabExcludeG LONG  (1)
%WindowUseEnterInsteadTabExclude MULTI DEFAULT  ()
%GlobalObject DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('NO')
WHEN  ('WindowToolbar') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ThisWindow')
WHEN  ('WindowToolbar') ('Toolbar')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (0)
WHEN  ('WindowToolbar') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%WindowStyles MULTI LONG  ()
%WindowStyleFontName DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontSize DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontStyle DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleFontColor DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontCharSet DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormal DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleForegroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelected DEPEND %WindowStyles LONG TIMES 0

%WindowStyleBackgroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStylePicture DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureIsVariable DEPEND %WindowStyles LONG TIMES 0

%WindowStyleOtherListboxes MULTI DEFAULT  ()
%ProcedureAutoBindFields MULTI LONG  ()
%ProcedureAutoBindField DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindFieldTPL DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindProcedures MULTI LONG  ()
%ProcedureAutoBindProcedure DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindProcedureTPL DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindFieldsIgnored MULTI LONG  ()
%ProcedureAutoBindFieldIgnored DEPEND %ProcedureAutoBindFieldsIgnored DEFAULT TIMES 0

%ProcedureAutoBindProceduresIgnored MULTI LONG  ()
%ProcedureAutoBindProcedureIgnored DEPEND %ProcedureAutoBindProceduresIgnored DEFAULT TIMES 0

%ProcedureAutoBindValidToAddField LONG  (0)
%ProcedureUserBindFields MULTI LONG  ()
%ProcedureUserBindField DEPEND %ProcedureUserBindFields FIELD TIMES 0

%ProcedureAutoBindFieldIgnore DEPEND %ProcedureAutoBindFields LONG TIMES 0

%ProcedureUserBindProcedures MULTI LONG  ()
%ProcedureUserBindProcedure DEPEND %ProcedureUserBindProcedures PROCEDURE TIMES 0

%ProcedureAutoBindProcedureIgnore DEPEND %ProcedureAutoBindProcedures LONG TIMES 0

%ProcedureUserBindExpressions MULTI LONG  ()
%ProcedureUserBindExpressionName DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ProcedureUserBindExpression DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ExtUITabIcon DEPEND %Control DEFAULT TIMES 0

%ExtUITabStyleOverrideGlobal DEPEND %Control LONG TIMES 0

%ExtUITabStyle DEPEND %Control DEFAULT TIMES 4
WHEN  ('') ('Default')
WHEN  ('?CancelButton') ('Default')
WHEN  ('?MacroSetList') ('Default')
WHEN  ('?OkButton') ('Default')

%ButtonAction DEPEND %Control DEFAULT TIMES 4
WHEN  ('') ('No Special Action')
WHEN  ('?CancelButton') ('No Special Action')
WHEN  ('?MacroSetList') ('No Special Action')
WHEN  ('?OkButton') ('No Special Action')

%ButtonRunName DEPEND %Control DEFAULT TIMES 0

%ButtonRunParameters DEPEND %Control DEFAULT TIMES 0

%ButtonProcedure DEPEND %Control PROCEDURE TIMES 0

%ButtonThread DEPEND %Control LONG TIMES 0

%ButtonThreadStack DEPEND %Control DEFAULT TIMES 4
WHEN  ('') ('25000')
WHEN  ('?CancelButton') ('25000')
WHEN  ('?MacroSetList') ('25000')
WHEN  ('?OkButton') ('25000')

%ButtonParameters DEPEND %Control DEFAULT TIMES 0

%ButtonReturnValueAssignment DEPEND %Control FIELD TIMES 0

%ButtonReturnValueReferenceAssign DEPEND %Control LONG TIMES 0

%ButtonRequest DEPEND %Control DEFAULT TIMES 4
WHEN  ('') ('None')
WHEN  ('?CancelButton') ('None')
WHEN  ('?MacroSetList') ('None')
WHEN  ('?OkButton') ('None')

%ButtonThreadParameters DEPEND %Control DEFAULT TIMES 0

%ButtonThreadReturnValueAssignment DEPEND %Control FIELD TIMES 0

%PreLookupKey DEPEND %Control KEY TIMES 0

%PreLookupField DEPEND %Control COMPONENT TIMES 0

%PreLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PreLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupKey DEPEND %Control KEY TIMES 0

%PostLookupField DEPEND %Control COMPONENT TIMES 0

%PostLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupDuringValidate DEPEND %Control LONG TIMES 4
WHEN  ('') (1)
WHEN  ('?CancelButton') (1)
WHEN  ('?MacroSetList') (1)
WHEN  ('?OkButton') (1)

%LookupAssign DEPEND %Control MULTI LONG TIMES 0

%MoreTarget DEPEND %LookupAssign FIELD TIMES 0

%MoreField DEPEND %LookupAssign DEFAULT TIMES 0

%ForceWindowRefresh DEPEND %Control LONG TIMES 0

%CheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%CheckedAssignVariable DEPEND %CheckedAssigns FIELD TIMES 0

%CheckedAssignValue DEPEND %CheckedAssigns DEFAULT TIMES 0

%CheckedHides DEPEND %Control MULTI LONG TIMES 0

%CheckedControl DEPEND %CheckedHides DEFAULT TIMES 0

%CheckedControlAction DEPEND %CheckedHides DEFAULT TIMES 4
WHEN  ('')TIMES 0
WHEN  ('?CancelButton')TIMES 0
WHEN  ('?MacroSetList')TIMES 0
WHEN  ('?OkButton')TIMES 0

%CheckedEnables DEPEND %Control MULTI LONG TIMES 0

%CheckedControl1 DEPEND %CheckedEnables DEFAULT TIMES 0

%CheckedControl1Action DEPEND %CheckedEnables DEFAULT TIMES 4
WHEN  ('')TIMES 0
WHEN  ('?CancelButton')TIMES 0
WHEN  ('?MacroSetList')TIMES 0
WHEN  ('?OkButton')TIMES 0

%UncheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%UncheckedAssignVariable DEPEND %UncheckedAssigns FIELD TIMES 0

%UncheckedAssignValue DEPEND %UncheckedAssigns DEFAULT TIMES 0

%UnCheckedHides DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl DEPEND %UnCheckedHides DEFAULT TIMES 0

%UnCheckedControlAction DEPEND %UnCheckedHides DEFAULT TIMES 4
WHEN  ('')TIMES 0
WHEN  ('?CancelButton')TIMES 0
WHEN  ('?MacroSetList')TIMES 0
WHEN  ('?OkButton')TIMES 0

%UnCheckedEnables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl1 DEPEND %UnCheckedEnables DEFAULT TIMES 0

%UnCheckedControl1Action DEPEND %UnCheckedEnables DEFAULT TIMES 4
WHEN  ('')TIMES 0
WHEN  ('?CancelButton')TIMES 0
WHEN  ('?MacroSetList')TIMES 0
WHEN  ('?OkButton')TIMES 0

%CheckedDisables DEPEND %Control MULTI LONG TIMES 0

%CheckedDisableControl DEPEND %CheckedDisables DEFAULT TIMES 0

%CheckedDisableControlAction DEPEND %CheckedDisables DEFAULT TIMES 4
WHEN  ('')TIMES 0
WHEN  ('?CancelButton')TIMES 0
WHEN  ('?MacroSetList')TIMES 0
WHEN  ('?OkButton')TIMES 0

%UnCheckedDisables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedDisableControl DEPEND %UnCheckedDisables DEFAULT TIMES 0

%UnCheckedDisableControlAction DEPEND %UnCheckedDisables DEFAULT TIMES 4
WHEN  ('')TIMES 0
WHEN  ('?CancelButton')TIMES 0
WHEN  ('?MacroSetList')TIMES 0
WHEN  ('?OkButton')TIMES 0

%ProcedureOneInstance LONG  (0)
%FieldGradientColorType DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('Off')

%FieldGradientColorTypeVariable DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('')

%FieldGradientColorTypeIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%FieldGradientColorFrom DEPEND %Control LONG TIMES 1
WHEN  ('') (-1)

%FieldGradientColorFromVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorFromIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%FieldGradientColorTo DEPEND %Control LONG TIMES 1
WHEN  ('') (-1)

%FieldGradientColorToVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorToIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%PreserveVarsLoc MULTI LONG  ()
%PreserveVarLoc DEPEND %PreserveVarsLoc DEFAULT TIMES 0

%ActiveImageEnable DEPEND %Control LONG TIMES 0

%AIObjectName DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('AIBtn0')

%AIEnableMimicControl DEPEND %Control LONG TIMES 1
WHEN  ('') (1)

%AIMimicControl DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('?MacroSetList')

%AIImgRound DEPEND %Control LONG TIMES 0

%AIOverrideImg DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgVariable DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIDisableImg DEPEND %Control DEFAULT TIMES 0

%AIDisableImgVariable DEPEND %Control DEFAULT TIMES 0

%AIDisableImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIHotImg DEPEND %Control DEFAULT TIMES 0

%AIHotImgVariable DEPEND %Control DEFAULT TIMES 0

%AIHotImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIPressedImg DEPEND %Control DEFAULT TIMES 0

%AIPressedImgVariable DEPEND %Control DEFAULT TIMES 0

%AIPressedImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[END]
EMBED %ControlEventHandling
[INSTANCES]
WHEN '?OkButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
RetVal = CHOICE(?MacroSetList)
POST(EVENT:CloseWindow)
[END]
[END]
WHEN '?CancelButton'
[INSTANCES]
WHEN 'Accepted'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
RetVal = 0
POST(EVENT:CloseWindow)
[END]
[END]
[END]
EMBED %WindowManagerMethodCodeSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8440
PROPERTY:END
CorrectForOffscreen(Window)
[END]
[END]
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME ABC WindowResize
[FIELDPROMPT]
%ResizeAnchorTop DEPEND %Control LONG TIMES 0

%ResizeAnchorLeft DEPEND %Control LONG TIMES 0

%ResizeAnchorRight DEPEND %Control LONG TIMES 0

%ResizeAnchorBottom DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowTop DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowLeft DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowRight DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowBottom DEPEND %Control LONG TIMES 0

[INSTANCE]
INSTANCE 2
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('WindowResizeClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(BYTE AppStrategy=AppStrategy:Resize,BYTE SetWindowMinSize=False,BYTE SetWindowMaxSize=False)')

%AppStrategy DEFAULT  ('Spread')
%RestrictMinSize LONG  (1)
%WindowMinWidth DEFAULT  ('')
%WindowMinHeight DEFAULT  ('')
%RestrictMaxSize LONG  (0)
%WindowMaxWidth DEFAULT  ('')
%WindowMaxHeight DEFAULT  ('')
%AutoFindParents DEFAULT  ('Default')
%DeferMoves DEFAULT  ('Default')
%OverrideControls MULTI LONG  (1, 2, 3)
%OverrideControl DEPEND %OverrideControls DEFAULT TIMES 3
WHEN  (1) ('?MacroSetList')
WHEN  (2) ('?OkButton')
WHEN  (3) ('?CancelButton')

%DisableResize DEPEND %OverrideControls LONG TIMES 3
WHEN  (1) (0)
WHEN  (2) (0)
WHEN  (3) (0)

%HorizResize DEPEND %OverrideControls DEFAULT TIMES 3
WHEN  (1) ('Constant Right Border')
WHEN  (2) ('Lock Width')
WHEN  (3) ('Lock Width')

%VertResize DEPEND %OverrideControls DEFAULT TIMES 3
WHEN  (1) ('Constant Bottom Border')
WHEN  (2) ('Lock Height')
WHEN  (3) ('Lock Height')

%HorizPositional DEPEND %OverrideControls DEFAULT TIMES 3
WHEN  (1) ('Fix Left')
WHEN  (2) ('Fix Right')
WHEN  (3) ('Fix Right')

%VertPositional DEPEND %OverrideControls DEFAULT TIMES 3
WHEN  (1) ('Fix Top')
WHEN  (2) ('Fix Bottom')
WHEN  (3) ('Fix Bottom')

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('Resizer')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('ADOBlob')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

[CALLS]
CorrectForOffScreen
[WINDOW]
Window  WINDOW('Select Macro Set  ...'),AT(0,0,256,90),FONT('Segoe UI',10),RESIZE,GRAY,SYSTEM
          LIST,AT(10,7,237,60),USE(?MacroSetList),FORMAT('60L(2)~Macro Set Name~@S255@'),FROM(MacroSetQueue), |
            #FIELDS(MacroSetQueue.MacroSetName),#ORDINAL(1)
          BUTTON('&OK'),AT(154,71,45,14),USE(?OkButton),DEFAULT,#ORDINAL(2)
          BUTTON('&Cancel'),AT(202,71,45,14),USE(?CancelButton),#ORDINAL(3)
        END

[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2012/02/07' '14:03:19'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME SavePatternToFile
PROTOTYPE '(*CSTRING szPattern),STRING'
PARAMETERS '(*CSTRING szPattern)'
[COMMON]
FROM ABC Source
MODIFIED '2012/02/08' ' 8:11:20'
[DATA]
[SCREENCONTROLS]
! PROMPT('sz Filename:'),USE(?szFilename:Prompt)
! ENTRY(@s255),USE(szFilename)
[REPORTCONTROLS]
! STRING(@s255),USE(szFilename)
szFilename               CSTRING(260)
!!> GUID('8bf4dd05-ef67-440c-8e19-74f6729ef61a'),PROMPT('sz Filename:'),HEADER('sz Filename'),PICTURE(@s255),TYPEMODE(INS)
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
      i = 1
      j = INSTRING('|',szPattern,1,i)
      LOOP WHILE j
         IF j < LEN(szPattern)
            IF szPattern[j+1] = '|'
               j = INSTRING('|',szPattern,1,j+2)
            ELSE
               argQueue.argument = szPattern[i : j - 1]
               DO RemoveDoubleBars
               ADD(argQueue)
               i = j + 1
               j = INSTRING('|',szPattern,1,i)
            END
         ELSIF J = LEN(szPattern)
            BREAK
         END
      END
      argQueue.argument = szPattern[i : LEN(szPattern)]
      DO RemoveDoubleBars
      ADD(argQueue)

      AsciiFilename = ''
      IF kcr_GetTempPath(SIZE(szPathName),szPathName) > 0
         IF kcr_GetTempFileName(szPathName, szPrefixString, THREAD(), AsciiFilename)
            CREATE(AsciiFile)
            OPEN(AsciiFile)
            LOOP i = 1 TO RECORDS(argQueue)
               GET(argQueue,i)
               AsciiFile.Buffer = argQueue.argument
               APPEND(AsciiFile)
            END
            CLOSE(AsciiFile)
         ELSE
         END
      ELSE
      END
      RETURN AsciiFilename

[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
i                    LONG
j                    LONG
szPathName           CSTRING(MAXPATH)
szPrefixString       CSTRING('KSS')
[SOURCE]
PROPERTY:BEGIN
PRIORITY 4800
PROPERTY:END
argQueue    QUEUE,PRE(aq)
argument       CSTRING(256)
            END
[END]
EMBED %ProcedureRoutines
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
RemoveDoubleBars  ROUTINE
   DATA
n     LONG
p     LONG
   CODE
      n = 1
      p = INSTRING('||',argQueue.argument,1,n)
      LOOP WHILE p
         argQueue.argument = argQueue.argument[1 : p] & argQueue.argument[p+2 : LEN(argQueue.argument)]
         n = p + 1
         p = INSTRING('||',argQueue.argument,1,n)
      END
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2012/02/28' ' 9:08:56'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME ResultQueueHasLocations
PROTOTYPE '(*ResultQueueType ResultQueue),BOOL'
PARAMETERS '(*ResultQueueType ResultQueue)'
[COMMON]
FROM ABC Source
MODIFIED '2013/06/02' '10:01:54'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
i             LONG
j             LONG
p             LONG
HasLocations  BOOL(FALSE)
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
      p = POINTER(ResultQueue)

      j = RECORDS(ResultQueue)
      LOOP i = 1 TO j
         GET(ResultQueue,i)
         IF ResultQueue.ProcedureName <> ''
            HasLocations = TRUE
            BREAK
         END
      END

      GET(ResultQueue,p)

      RETURN HasLocations
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2012/03/01' '11:59:19'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME SaveSearchOptions
PROTOTYPE '(*FindStrOptionsGroupType SearchOptions),LONG,PROC'
PARAMETERS '(*FindStrOptionsGroupType SearchOptions)'
[COMMON]
FROM ABC Source
MODIFIED '2019/02/15' '16:21:18'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
      SyncOptions.szPattern = SearchOptions.szPattern
      GET(SyncOptions,SyncOptions.PatternKey)

      IF ERRORCODE() = NoRecErr
         !add one
         SyncOptions.szPattern = SearchOptions.szPattern
         ADD(SyncOptions)
      END

      IF ERRORCODE()
         MESSAGE(ERROR() & ' accessing SyncOptions','Unexpected Error',ICON:HAND)
      ELSE
         SyncOptions.bMatchPatternStartOfLine   = SearchOptions.bMatchPatternStartOfLine
         SyncOptions.bMatchPatternEndOfLine     = SearchOptions.bMatchPatternEndOfLine
         SyncOptions.bUseRegularExpressions     = SearchOptions.bUseRegularExpressions
         SyncOptions.bSearchSubdirectories      = SearchOptions.bSearchSubdirectories
         SyncOptions.nLevels                    = SearchOptions.nLevels
         SyncOptions.bCaseSensitive             = SearchOptions.bCaseSensitive
         SyncOptions.bExactMatch                = SearchOptions.bExactMatch
         SyncOptions.bExcludeMatch              = SearchOptions.bExcludeMatch
         SyncOptions.bExcludeComments           = SearchOptions.bExcludeComments
         SyncOptions.bIncludeBinary             = SearchOptions.bIncludeBinary
         SyncOptions.szSearchPath               = SearchOptions.szSearchPath
         SyncOptions.szFileMask                 = SearchOptions.szFileMask
         SyncOptions.bFilenamesOnly             = SearchOptions.bFilenamesOnly
         SyncOptions.bFileListFromFile          = SearchOptions.bFileListFromFile
         SyncOptions.szFileListFilename         = SearchOptions.szFileListFilename
         SyncOptions.bSearchStringsFromFile     = SearchOptions.bSearchStringsFromFile
         SyncOptions.szSearchStringFilename     = SearchOptions.szSearchStringFilename
         SyncOptions.szExcludeMask              = SearchOptions.szExcludeMask
         PUT(SyncOptions)
      END

      RETURN ERRORCODE()
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[PROCEDURE]
NAME LoadSearchOptions
PROTOTYPE '(*FindStrOptionsGroupType SearchOptions),LONG,PROC'
PARAMETERS '(*FindStrOptionsGroupType SearchOptions)'
[COMMON]
FROM ABC Source
MODIFIED '2019/02/15' '16:20:45'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
      SyncOptions.szPattern = SearchOptions.szPattern
      GET(SyncOptions,SyncOptions.PatternKey)
      CASE ERRORCODE()
        OF NoError
           SearchOptions.bMatchPatternStartOfLine   = SyncOptions.bMatchPatternStartOfLine
           SearchOptions.bMatchPatternEndOfLine     = SyncOptions.bMatchPatternEndOfLine
           SearchOptions.bUseRegularExpressions     = SyncOptions.bUseRegularExpressions
           SearchOptions.bSearchSubdirectories      = SyncOptions.bSearchSubdirectories
           SearchOptions.nLevels                    = SyncOptions.nLevels
           SearchOptions.bCaseSensitive             = SyncOptions.bCaseSensitive
           SearchOptions.bExactMatch                = SyncOptions.bExactMatch
           SearchOptions.bExcludeMatch              = SyncOptions.bExcludeMatch
           SearchOptions.bExcludeComments           = SyncOptions.bExcludeComments
           SearchOptions.bIncludeBinary             = SyncOptions.bIncludeBinary
           SearchOptions.szSearchPath               = SyncOptions.szSearchPath
           SearchOptions.szFileMask                 = SyncOptions.szFileMask
           SearchOptions.bFilenamesOnly             = SyncOptions.bFilenamesOnly
           SearchOptions.bFileListFromFile          = SyncOptions.bFileListFromFile
           SearchOptions.szFileListFilename         = SyncOptions.szFileListFilename
           SearchOptions.bSearchStringsFromFile     = SyncOptions.bSearchStringsFromFile
           SearchOptions.szSearchStringFilename     = SyncOptions.szSearchStringFilename
           SearchOptions.szExcludeMask              = SyncOptions.szExcludeMask
        OF NoRecErr
           !that's ok
      ELSE
         MESSAGE(ERROR() & ' accessing SyncOptions','Unexpected Error',ICON:HAND)
      END
      RETURN ERRORCODE()
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2013/05/29' '17:02:15'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME CorrectForOffScreen
PROTOTYPE '(*WINDOW xChild)'
PARAMETERS '(*WINDOW xChild)'
[COMMON]
FROM ABC Source
MODIFIED '2019/02/16' '10:05:00'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!CorrectPosition     PROCEDURE(*WINDOW xChild, *gtRectCW ChildLoc, *gtRectCW MainLoc)
! Just alter ChildLoc.X and .Y  (leave .W & .H alone)
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
cMonitors      LONG
MainLoc        LIKE(gtRectCW)
ChildLoc       LIKE(gtRectCW)
CenterOffset   SIGNED
Moved          BOOL
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  cMonitors = kcr_GetSystemMetrics(SM_CMONITORS)
  !dbx.Debugout('Monitors = ' & cmonitors)
  IF cMonitors > 0   !1

     GETPOSITION(glo:MainWindow,MainLoc.X,MainLoc.Y,MainLoc.W,MainLoc.H)
     GETPOSITION(xChild,ChildLoc.X,ChildLoc.Y,ChildLoc.W,ChildLoc.H)
  !   dbx.Debugout('MainLoc(' & MainLoc.X & ',' & MainLoc.Y & ',' & MainLoc.W & ',' & MainLoc.H & ')' )
  !   dbx.Debugout('ChildLoc(' & ChildLoc.X & ',' & ChildLoc.Y & ',' & ChildLoc.W & ',' & ChildLoc.H & ')')

     Moved = CHOOSE( ChildLoc.X + ChildLoc.W > MainLoc.X + MainLoc.W)
     IF Moved
        ChildLoc.X = MainLoc.X + MainLoc.W - ChildLoc.W
     END
     IF ChildLoc.X < MainLoc.X
        ChildLoc.X = MainLoc.X
        Moved = TRUE
     END
     IF Moved
        CenterOffset = CHOOSE( ChildLoc.W >= MainLoc.W, 0, (MainLoc.W - ChildLoc.W) / 2)
        ChildLoc.X = MainLoc.X + CenterOffset
     END


     Moved = CHOOSE(ChildLoc.Y + ChildLoc.H > MainLoc.Y + MainLoc.H)
     IF Moved
        ChildLoc.Y = MainLoc.Y + MainLoc.H - ChildLoc.H
     END
     IF ChildLoc.Y < MainLoc.Y
        ChildLoc.Y = MainLoc.Y
        Moved = TRUE
     END
     IF Moved
        CenterOffset = CHOOSE( ChildLoc.H >= MainLoc.H, 0, (MainLoc.H - ChildLoc.H) / 2)
        ChildLoc.Y = MainLoc.Y + CenterOffset
     END

     SETPOSITION(xChild,ChildLoc.X,ChildLoc.Y,ChildLoc.W,ChildLoc.H)
  !   dbx.Debugout('SetPosition(xChild,' & ChildLoc.X & ',' & ChildLoc.Y & ',' & ChildLoc.W & ',' & ChildLoc.H & ')')

  END
  RETURN
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[END]
[MODULE]
[COMMON]
FROM ABC GENERATED
MODIFIED '2013/07/31' '17:17:06'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME winReplaceInResults
PROTOTYPE '(*FindGrp FindGroup, *CSTRING szReplaceWith, *ResultQueueType ResultQueue),LONG'
PARAMETERS '(*FindGrp FindGroup, *CSTRING szReplaceWith, *ResultQueueType ResultQueue)  !,LONG'
[COMMON]
FROM ABC Window
MODIFIED '2014/03/04' ' 9:21:18'
[DATA]
[SCREENCONTROLS]
! PROMPT('n Replacements:'),USE(?nReplacements:Prompt)
! ENTRY(@n-14),USE(nReplacements),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(nReplacements),RIGHT(1)
nReplacements            LONG
!!> GUID('04e4df11-cc82-45ef-8f3e-79137e655e12'),PROMPT('n Replacements:'),HEADER('n Replacements'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('Process Queue:'),USE(?ProcessQueue:Prompt)
! ENTRY(@s20),USE(ProcessQueue)
[REPORTCONTROLS]
! STRING(@s20),USE(ProcessQueue)
ProcessQueue             QUEUE,PRE()
!!> GUID('7c3bccf8-ede9-4a0d-82e6-b8058bfa0630'),PROMPT('Process Queue:'),HEADER('Process Queue'),PICTURE(@s20),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('Replacements:'),USE(?Replacements:Prompt)
! ENTRY(@n-14),USE(Replacements),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(Replacements),RIGHT(1)
Replacements               LONG
!!> GUID('b017dc2b-01d3-4a48-8966-371b5cace37a'),PROMPT('Replacements:'),HEADER('Replacements'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('Replacements Style:'),USE(?ReplacementsStyle:Prompt)
! ENTRY(@n-14),USE(ReplacementsStyle),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(ReplacementsStyle),RIGHT(1)
ReplacementsStyle          LONG
!!> GUID('37f6e924-fcd9-4739-ade9-c9c1725d5d20'),PROMPT('Replacements Style:'),HEADER('Replacements Style'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('Filename:'),USE(?Filename:Prompt)
! ENTRY(@s255),USE(Filename)
[REPORTCONTROLS]
! STRING(@s255),USE(Filename)
Filename                   CSTRING(261)
!!> GUID('3f8a0beb-aec2-4926-9cfd-37bea2aef56e'),PROMPT('Filename:'),HEADER('Filename'),PICTURE(@s255),TYPEMODE(INS)
[SCREENCONTROLS]
! PROMPT('Filename Style:'),USE(?FilenameStyle:Prompt)
! ENTRY(@n-14),USE(FilenameStyle),RIGHT(1)
[REPORTCONTROLS]
! STRING(@n-14),USE(FilenameStyle),RIGHT(1)
FilenameStyle              LONG
!!> GUID('8468273c-d610-4ccf-84f6-6a32633185c8'),PROMPT('Filename Style:'),HEADER('Filename Style'),PICTURE(@n-14),TYPEMODE(INS),JUSTIFY(RIGHT,1)
[SCREENCONTROLS]
! PROMPT('Modified:'),USE(?Modified:Prompt)
! ENTRY(@n3),USE(Modified)
[REPORTCONTROLS]
! STRING(@n3),USE(Modified)
Modified                   BYTE
!!> GUID('43b241fd-c128-4827-8383-567682e56ab0'),PROMPT('Modified:'),HEADER('Modified'),PICTURE(@n3),TYPEMODE(INS)
                         END
!!> GUID('9fa5b5c5-db0f-49bb-8137-0fcedb1630c8')
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default', 'WindowToolbar')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('WindowManager')
WHEN  ('WindowToolbar') ('ToolbarClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(),BYTE,PROC,DERIVED', 'Kill {19}PROCEDURE(),BYTE,PROC,DERIVED', |
  'TakeWindowEvent        PROCEDURE(),BYTE,PROC,DERIVED')

%ReturnValue FIELD  (nReplacements)
%WindowOperationMode DEFAULT  ('Use WINDOW setting')
%INISaveWindow LONG  (1)
%ProcedureDisableEnhanceFocus LONG  (0)
%ProcedureUseEnterInsteadTabOverride LONG  (0)
%WindowUseEnterInsteadTab LONG  (1)
%ProcedureUseEnterInsteadTabExcludeListCombo LONG  (0)
%ProcedureUseEnterInsteadTabEnableNextTabStop LONG  (0)
%ProcedureUseEnterInsteadTabExcludeG LONG  (1)
%WindowUseEnterInsteadTabExclude MULTI DEFAULT  ()
%GlobalObject DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('NO')
WHEN  ('WindowToolbar') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('ThisWindow')
WHEN  ('WindowToolbar') ('Toolbar')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (1)
WHEN  ('WindowToolbar') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 2
WHEN  ('Default') ('')
WHEN  ('WindowToolbar') ('')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 2
WHEN  ('Default') (0)
WHEN  ('WindowToolbar') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('WindowToolbar')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%WindowStyles MULTI LONG  (1, 2)
%WindowStyleFontName DEPEND %WindowStyles DEFAULT TIMES 2
WHEN  (1) ('Segoe UI')
WHEN  (2) ('Segoe UI')

%WindowStyleFontNameVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontNameIsVariable DEPEND %WindowStyles LONG TIMES 2
WHEN  (1) (0)
WHEN  (2) (0)

%WindowStyleFontSize DEPEND %WindowStyles DEFAULT TIMES 2
WHEN  (1) ('10')
WHEN  (2) ('10')

%WindowStyleFontSizeVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontSizeIsVariable DEPEND %WindowStyles LONG TIMES 2
WHEN  (1) (0)
WHEN  (2) (0)

%WindowStyleFontStyle DEPEND %WindowStyles DEFAULT TIMES 2
WHEN  (1) ('400')
WHEN  (2) ('400')

%WindowStyleFontStyleVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleFontStyleIsVariable DEPEND %WindowStyles LONG TIMES 2
WHEN  (1) (0)
WHEN  (2) (0)

%WindowStyleFontColor DEPEND %WindowStyles DEFAULT TIMES 2
WHEN  (1) ('0')
WHEN  (2) ('0')

%WindowStyleFontCharSet DEPEND %WindowStyles DEFAULT TIMES 2
WHEN  (1) ('1')
WHEN  (2) ('1')

%WindowStyleForegroundNormal DEPEND %WindowStyles LONG TIMES 2
WHEN  (1) (255)
WHEN  (2) (8421504)

%WindowStyleForegroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 2
WHEN  (1) (0)
WHEN  (2) (0)

%WindowStyleBackgroundNormal DEPEND %WindowStyles LONG TIMES 2
WHEN  (1) (-1)
WHEN  (2) (-1)

%WindowStyleBackgroundNormalVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundNormalIsVariable DEPEND %WindowStyles LONG TIMES 2
WHEN  (1) (0)
WHEN  (2) (0)

%WindowStyleForegroundSelected DEPEND %WindowStyles LONG TIMES 2
WHEN  (1) (-2147483643)
WHEN  (2) (-2147483643)

%WindowStyleForegroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleForegroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 2
WHEN  (1) (0)
WHEN  (2) (0)

%WindowStyleBackgroundSelected DEPEND %WindowStyles LONG TIMES 2
WHEN  (1) (255)
WHEN  (2) (8421504)

%WindowStyleBackgroundSelectedVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStyleBackgroundSelectedIsVariable DEPEND %WindowStyles LONG TIMES 2
WHEN  (1) (0)
WHEN  (2) (0)

%WindowStylePicture DEPEND %WindowStyles DEFAULT TIMES 2
WHEN  (1) ('')
WHEN  (2) ('')

%WindowStylePictureVariable DEPEND %WindowStyles DEFAULT TIMES 0

%WindowStylePictureIsVariable DEPEND %WindowStyles LONG TIMES 2
WHEN  (1) (0)
WHEN  (2) (0)

%WindowStyleOtherListboxes MULTI DEFAULT  ()
%ProcedureAutoBindFields MULTI LONG  ()
%ProcedureAutoBindField DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindFieldTPL DEPEND %ProcedureAutoBindFields DEFAULT TIMES 0

%ProcedureAutoBindProcedures MULTI LONG  ()
%ProcedureAutoBindProcedure DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindProcedureTPL DEPEND %ProcedureAutoBindProcedures DEFAULT TIMES 0

%ProcedureAutoBindFieldsIgnored MULTI LONG  ()
%ProcedureAutoBindFieldIgnored DEPEND %ProcedureAutoBindFieldsIgnored DEFAULT TIMES 0

%ProcedureAutoBindProceduresIgnored MULTI LONG  ()
%ProcedureAutoBindProcedureIgnored DEPEND %ProcedureAutoBindProceduresIgnored DEFAULT TIMES 0

%ProcedureAutoBindValidToAddField LONG  (0)
%ProcedureUserBindFields MULTI LONG  ()
%ProcedureUserBindField DEPEND %ProcedureUserBindFields FIELD TIMES 0

%ProcedureAutoBindFieldIgnore DEPEND %ProcedureAutoBindFields LONG TIMES 0

%ProcedureUserBindProcedures MULTI LONG  ()
%ProcedureUserBindProcedure DEPEND %ProcedureUserBindProcedures PROCEDURE TIMES 0

%ProcedureAutoBindProcedureIgnore DEPEND %ProcedureAutoBindProcedures LONG TIMES 0

%ProcedureUserBindExpressions MULTI LONG  ()
%ProcedureUserBindExpressionName DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ProcedureUserBindExpression DEPEND %ProcedureUserBindExpressions DEFAULT TIMES 0

%ExtUITabIcon DEPEND %Control DEFAULT TIMES 0

%ExtUITabStyleOverrideGlobal DEPEND %Control LONG TIMES 0

%ExtUITabStyle DEPEND %Control DEFAULT TIMES 5
WHEN  ('') ('Default')
WHEN  ('?ProcessedFileList') ('Default')
WHEN  ('?String2') ('Default')
WHEN  ('?String3') ('Default')
WHEN  ('?sciControl:Region') ('Default')

%ButtonAction DEPEND %Control DEFAULT TIMES 5
WHEN  ('') ('No Special Action')
WHEN  ('?ProcessedFileList') ('No Special Action')
WHEN  ('?String2') ('No Special Action')
WHEN  ('?String3') ('No Special Action')
WHEN  ('?sciControl:Region') ('No Special Action')

%ButtonRunName DEPEND %Control DEFAULT TIMES 0

%ButtonRunParameters DEPEND %Control DEFAULT TIMES 0

%ButtonProcedure DEPEND %Control PROCEDURE TIMES 0

%ButtonThread DEPEND %Control LONG TIMES 0

%ButtonThreadStack DEPEND %Control DEFAULT TIMES 5
WHEN  ('') ('25000')
WHEN  ('?ProcessedFileList') ('25000')
WHEN  ('?String2') ('25000')
WHEN  ('?String3') ('25000')
WHEN  ('?sciControl:Region') ('25000')

%ButtonParameters DEPEND %Control DEFAULT TIMES 0

%ButtonReturnValueAssignment DEPEND %Control FIELD TIMES 0

%ButtonReturnValueReferenceAssign DEPEND %Control LONG TIMES 0

%ButtonRequest DEPEND %Control DEFAULT TIMES 5
WHEN  ('') ('None')
WHEN  ('?ProcessedFileList') ('None')
WHEN  ('?String2') ('None')
WHEN  ('?String3') ('None')
WHEN  ('?sciControl:Region') ('None')

%ButtonThreadParameters DEPEND %Control DEFAULT TIMES 0

%ButtonThreadReturnValueAssignment DEPEND %Control FIELD TIMES 0

%PreLookupKey DEPEND %Control KEY TIMES 0

%PreLookupField DEPEND %Control COMPONENT TIMES 0

%PreLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PreLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupKey DEPEND %Control KEY TIMES 0

%PostLookupField DEPEND %Control COMPONENT TIMES 0

%PostLookupProcedure DEPEND %Control PROCEDURE TIMES 0

%PostLookupProcedureParameters DEPEND %Control DEFAULT TIMES 0

%PostLookupDuringValidate DEPEND %Control LONG TIMES 5
WHEN  ('') (1)
WHEN  ('?ProcessedFileList') (1)
WHEN  ('?String2') (1)
WHEN  ('?String3') (1)
WHEN  ('?sciControl:Region') (1)

%LookupAssign DEPEND %Control MULTI LONG TIMES 0

%MoreTarget DEPEND %LookupAssign FIELD TIMES 0

%MoreField DEPEND %LookupAssign DEFAULT TIMES 0

%ForceWindowRefresh DEPEND %Control LONG TIMES 0

%CheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%CheckedAssignVariable DEPEND %CheckedAssigns FIELD TIMES 0

%CheckedAssignValue DEPEND %CheckedAssigns DEFAULT TIMES 0

%CheckedHides DEPEND %Control MULTI LONG TIMES 0

%CheckedControl DEPEND %CheckedHides DEFAULT TIMES 0

%CheckedControlAction DEPEND %CheckedHides DEFAULT TIMES 5
WHEN  ('')TIMES 0
WHEN  ('?ProcessedFileList')TIMES 0
WHEN  ('?String2')TIMES 0
WHEN  ('?String3')TIMES 0
WHEN  ('?sciControl:Region')TIMES 0

%CheckedEnables DEPEND %Control MULTI LONG TIMES 0

%CheckedControl1 DEPEND %CheckedEnables DEFAULT TIMES 0

%CheckedControl1Action DEPEND %CheckedEnables DEFAULT TIMES 5
WHEN  ('')TIMES 0
WHEN  ('?ProcessedFileList')TIMES 0
WHEN  ('?String2')TIMES 0
WHEN  ('?String3')TIMES 0
WHEN  ('?sciControl:Region')TIMES 0

%UncheckedAssigns DEPEND %Control MULTI LONG TIMES 0

%UncheckedAssignVariable DEPEND %UncheckedAssigns FIELD TIMES 0

%UncheckedAssignValue DEPEND %UncheckedAssigns DEFAULT TIMES 0

%UnCheckedHides DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl DEPEND %UnCheckedHides DEFAULT TIMES 0

%UnCheckedControlAction DEPEND %UnCheckedHides DEFAULT TIMES 5
WHEN  ('')TIMES 0
WHEN  ('?ProcessedFileList')TIMES 0
WHEN  ('?String2')TIMES 0
WHEN  ('?String3')TIMES 0
WHEN  ('?sciControl:Region')TIMES 0

%UnCheckedEnables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedControl1 DEPEND %UnCheckedEnables DEFAULT TIMES 0

%UnCheckedControl1Action DEPEND %UnCheckedEnables DEFAULT TIMES 5
WHEN  ('')TIMES 0
WHEN  ('?ProcessedFileList')TIMES 0
WHEN  ('?String2')TIMES 0
WHEN  ('?String3')TIMES 0
WHEN  ('?sciControl:Region')TIMES 0

%CheckedDisables DEPEND %Control MULTI LONG TIMES 0

%CheckedDisableControl DEPEND %CheckedDisables DEFAULT TIMES 0

%CheckedDisableControlAction DEPEND %CheckedDisables DEFAULT TIMES 5
WHEN  ('')TIMES 0
WHEN  ('?ProcessedFileList')TIMES 0
WHEN  ('?String2')TIMES 0
WHEN  ('?String3')TIMES 0
WHEN  ('?sciControl:Region')TIMES 0

%UnCheckedDisables DEPEND %Control MULTI LONG TIMES 0

%UnCheckedDisableControl DEPEND %UnCheckedDisables DEFAULT TIMES 0

%UnCheckedDisableControlAction DEPEND %UnCheckedDisables DEFAULT TIMES 5
WHEN  ('')TIMES 0
WHEN  ('?ProcessedFileList')TIMES 0
WHEN  ('?String2')TIMES 0
WHEN  ('?String3')TIMES 0
WHEN  ('?sciControl:Region')TIMES 0

%ProcedureOneInstance LONG  (0)
%FieldGradientColorType DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('Off')

%FieldGradientColorTypeVariable DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('')

%FieldGradientColorTypeIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%FieldGradientColorFrom DEPEND %Control LONG TIMES 1
WHEN  ('') (-1)

%FieldGradientColorFromVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorFromIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%FieldGradientColorTo DEPEND %Control LONG TIMES 1
WHEN  ('') (-1)

%FieldGradientColorToVariable DEPEND %Control DEFAULT TIMES 0

%FieldGradientColorToIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%PreserveVarsLoc MULTI LONG  ()
%PreserveVarLoc DEPEND %PreserveVarsLoc DEFAULT TIMES 0

%ActiveImageEnable DEPEND %Control LONG TIMES 0

%AIObjectName DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('AIBtn0')

%AIEnableMimicControl DEPEND %Control LONG TIMES 1
WHEN  ('') (1)

%AIMimicControl DEPEND %Control DEFAULT TIMES 1
WHEN  ('') ('?sciControl:Region')

%AIImgRound DEPEND %Control LONG TIMES 0

%AIOverrideImg DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgVariable DEPEND %Control DEFAULT TIMES 0

%AIOverrideImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIDisableImg DEPEND %Control DEFAULT TIMES 0

%AIDisableImgVariable DEPEND %Control DEFAULT TIMES 0

%AIDisableImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIHotImg DEPEND %Control DEFAULT TIMES 0

%AIHotImgVariable DEPEND %Control DEFAULT TIMES 0

%AIHotImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

%AIPressedImg DEPEND %Control DEFAULT TIMES 0

%AIPressedImgVariable DEPEND %Control DEFAULT TIMES 0

%AIPressedImgIsVariable DEPEND %Control LONG TIMES 1
WHEN  ('') (0)

[EMBED]
EMBED %WindowManagerMethodDataSection
[INSTANCES]
WHEN 'TakeWindowEvent'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
ResultQueuePtr       LONG
i                    LONG
j                    LONG
n                    LONG
lFoundNext           LONG
lFoundPosition       LONG
cchReplace           LONG
currentFile          CSTRING(MAX_PATH+1)
eolPosition          LONG
stxPosition          LONG
bLineModified        BOOL
bFileModified        BOOL
QueueFilePointer     LONG

thisFile             CSTRING(MAX_PATH+1)
fileQueue            QUEUE(FILE:queue),PRE(fq)
                     END
szText               CSTRING(1024)
[END]
[END]
[END]
EMBED %NewMethodDataSection
[INSTANCES]
WHEN '2'
[INSTANCES]
WHEN 'CSciControl'
[INSTANCES]
WHEN '1'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
! =======================================================================================
! CSciViewer.SaveFile
! purpose:  get contents into Scintilla Control buffer and Save to a file
! inputs :  *CSTRING szFilename - Name of file to save
! outputs:  Scintilla Control is loaded with file contents
! returns:  BYTE
!           Level:Benign to indicate success
!           Level:Notify to indicate failure
! =======================================================================================
ReturnValue         BOOL,AUTO

lFileSize           LONG(0)

szExtension         CSTRING(33)
szMsgText           CSTRING(240)
szMsg_NoCanDo       CSTRING('Not possible.')

szFileExtension     CSTRING(33)

szAAFileName        CSTRING(256),STATIC
A_A                 FILE,DRIVER('DOS'),NAME(szAAFileName),PRE(AA),CREATE
Record                RECORD
Bytes                    STRING(65535)
                    END
                  END
[END]
[END]
[END]
[END]
EMBED %NewMethodCodeSection
[INSTANCES]
WHEN '2'
[INSTANCES]
WHEN 'CSciControl'
[INSTANCES]
WHEN '1'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
LABEL
PROPERTY:END
!SCI_GETTEXT(int length, char *text)
! This returns length-1 characters of text from the start of the document plus one terminating 0 character.
! To collect all the text in a document, use SCI_GETLENGTH to get the number of characters in the document (nLen),
! allocate a character buffer of length nLen+1 bytes, then call SCI_GETTEXT(nLen+1, char *text).
!If the text argument is 0 then the length that should be allocated to store the entire document is returned.
!If you then save the text, you should use SCI_SETSAVEPOINT to mark the text as unmodified.
  IF szFilename <> ''
     lFileSize = SELF.GetTextLength() + 1                   ! returns length with null terminator
     IF ~SELF.szTextBuffer &= NULL                          ! If we already have a buffer allocated
        ASSERT(0,eqDBG & 'DISPOSE szTextBuffer [' & ADDRESS(SELF.szTextBuffer) & ']')
        DISPOSE(SELF.szTextBuffer)                          !   dispose buffer
        SELF.szTextBuffer &= NULL                           !   clear reference
     END
     SELF.szTextBuffer &= NEW(CSTRING(lFileSize))           ! Create a buffer to hold the file
     ASSERT(0,eqDBG & 'NEW szTextBuffer [' & ADDRESS(SELF.szTextBuffer) & ']')
?      ASSERT(~SELF.szTextBuffer &= NULL)
     lFileSize = SELF.GetText(lFileSize,SELF.szTextBuffer)  ! Returns length without null terminator

     szAAFileName = szFileName
     SELF.szFileName &= szAAFileName

     LOOP
        CREATE(A_A)
        IF ~ERRORCODE()
           IF ~SELF.szTextBuffer &= NULL
              DO SaveFile
              SELF.SetSavePoint()
              ReturnValue = TRUE
              BREAK
           ELSE
              SELF.ErrorMgr.ThrowMessage(CSciViewerMsg:BufferAllocationError, lFileSize+1)
              ReturnValue = FALSE
              BREAK
           END
        ELSIF ERRORCODE() = NoAccessErr  !Access Denied
           IF SELF.ErrorMgr.ThrowFile(CSciViewerMsg:AccessDenied, CLIP(szAAFileName)) = Level:Benign
              IF FILEDIALOG('Save as ...',SELF.szFileName,'All Files (*.*)|*.*', FILE:Save + FILE:KeepDir + FILE:LongName)
                 CYCLE
              ELSE
                 SELF.SetSavePoint()
                 ReturnValue = FALSE
                 BREAK
              END
           ELSE
              SELF.SetSavePoint()
              ReturnValue = FALSE
              BREAK
           END
        ELSE
           SELF.ErrorMgr.ThrowFile(CSciViewerMsg:OpenFailed, CLIP(szAAFileName))
           ReturnValue = FALSE
           BREAK
        END
     END
 ELSE
    ReturnValue = FALSE
 END
 RETURN(ReturnValue)
! Exit Procedure

! Procedure Routines
!-------------------------------------------
SaveFile    ROUTINE
!-------------------------------------------
DATA

lRecSize            LONG(0)                 ! Note new variables to keep track of bytes read
lBytesWritten       LONG(0)                 ! from file and Bytes written to buffer.
lBytes2Write        LONG(0)
lBytePtr            LONG(0)

CODE                                      ! Enter Routine

  OPEN(A_A,WriteOnly+DenyAll)
  IF ~ERRORCODE()
     lBytesWritten = 0                                         ! We haven't written any bytes yet
     lFileSize  = SIZE(SELF.szTextBuffer) - 1
     lRecSize   = SIZE(AA:Bytes)

     !ShowWaitCursor = TRUE
     SETCURSOR(CURSOR:Wait)

     LOOP
       IF (lBytesWritten + lrecSize >= lFileSize)                       ! If we have written up to or past the file size
          lBytes2Write = lFileSize - lBytesWritten                       ! Bytes to write to file is the last "partial" chunk
       ELSE
          lBytes2Write = lRecSize                                     ! Else the Byte to write is the full record
       END

       LOOP lBytePtr = 1 TO lBytes2Write                              ! Loop through the record
          A_A:Bytes[lBytePtr] = SELF.szTextBuffer[(lBytesWritten + lBytePtr)]   ! Storing the bytes
       END
       APPEND(A_A,lBytes2Write)

       lBytesWritten = lBytesWritten + lBytes2Write                        ! Increment the byte written
       IF (lBytesWritten >= lFileSize)                                  ! Break if we are up to the file size
          BREAK
       END
     END
     CLOSE(A_A)

     !ShowWaitCursor = FALSE
     SETCURSOR()
  ELSE
     SELF.ErrorMgr.ThrowFile(CSciViewerMsg:OpenFailed, CLIP(szAAFileName))
  END
EXIT
!Exit Routine
[END]
[END]
[END]
[END]
EMBED %SciMethodCodeSection
[INSTANCES]
WHEN '2'
[INSTANCES]
WHEN 'OpenFile'
[INSTANCES]
WHEN '(*CSTRING szFileName),BOOL'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7500
PROPERTY:END
SELF.SetLexerType(ResultQueue.SortName)
SELF.SetScrollWidthTracking(TRUE)
SELF.SetXCaretPolicy(CARET_SLOP,20)
SELF.SetYCaretPolicy(BOR(CARET_STRICT,BOR(CARET_SLOP,CARET_EVEN)),1)
SELF.SetVisiblePolicy(VISIBLE_SLOP,0)
SELF.SetEOLMode(SC_EOL_CRLF)
[END]
[END]
[END]
[END]
EMBED %WindowManagerMethodCodeSection
[INSTANCES]
WHEN 'Init'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8005
PROPERTY:END
Window{PROP:Hide} = TRUE
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8310
PROPERTY:END
CorrectForOffscreen(Window)
listBoxFormat = ?ProcessedFileList{PROP:Format}
INIMgr.Fetch('winReplaceInResults','ListBoxFormat',listBoxFormat)
?ProcessedFileList{PROP:Format} = listBoxFormat
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9700
PROPERTY:END
POST(EVENT:User+1)
[END]
[END]
WHEN 'TakeWindowEvent'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7530
PROPERTY:END
  OF EVENT:User+1
    !Do Search and replace code here
    FREE(ProcessQueue)
    ResultQueuePtr = POINTER(ResultQueue)
    j = RECORDS(ResultQueue)
    LOOP i = 1 TO j
       GET(ResultQueue,i)

       IF thisFile <> ResultQueue.SortName
          IF RECORDS(ProcessQueue)
             IF ProcessQueue.Replacements = 0 AND ProcessQueue.Modified = FALSE
                ProcessQueue.FilenameStyle = 2
                ProcessQueue.ReplacementsStyle = 2
             END
             PUT(ProcessQueue)
          END
          thisFile = ResultQueue.SortName
          DIRECTORY(fileQueue, thisFile, ff_:Normal)
          IF ResultQueue.FileDate = fileQueue.date AND ResultQueue.FileTime = fileQueue.time
             !file has not changed ... continue
             ProcessQueue.Filename = ResultQueue.Path & ResultQueue.Filename & ResultQueue.szExtension
             ProcessQueue.FilenameStyle = 0
             ProcessQueue.Replacements = 0
             ProcessQueue.ReplacementsStyle = 0
             ProcessQueue.Modified = FALSE
             ADD(ProcessQueue)
          ELSE
             ProcessQueue.Filename = ResultQueue.Path & ResultQueue.Filename & ResultQueue.szExtension
             ProcessQueue.FilenameStyle = 1
             ProcessQueue.Replacements = 0
             ProcessQueue.ReplacementsStyle = 1
             ProcessQueue.Modified = TRUE
             ADD(ProcessQueue)

             !skip to next file
             LOOP WHILE ResultQueue.SortName = thisFile
                i += 1
                GET(ResultQueue,i)
                IF ERRORCODE()
                   BREAK
                END
             END
             i -= 1
             CYCLE

          END
       END


       CASE currentFile
         OF ''
            IF SciControl.OpenFile(ResultQueue.SortName)
               currentFile = ResultQueue.SortName
               QueueFilePointer = POINTER(ResultQueue)
               bFileModified = FALSE
               bLineModified = FALSE
            ELSE
               currentFile = ''
            END

         OF ResultQueue.SortName
            !process next match

       ELSE
          IF bFileModified
             SciControl.SaveFile(currentFile)
             bFileModified = FALSE
             DIRECTORY(fileQueue, currentFile, ff_:Normal)
             LOOP n = QueueFilePointer TO i - 1
                GET(ResultQueue,n)
                ResultQueue.FileDate = fileQueue.Date
                ResultQueue.FileTime = fileQueue.Time
                PUT(ResultQueue)
             END
             GET(ResultQueue,i)
          END
          IF SciControl.OpenFile(ResultQueue.SortName)
             currentFile = ResultQueue.SortName
             QueueFilePointer = POINTER(ResultQueue)
             bFileModified = FALSE
             bLineModified = FALSE
          ELSE
             currentFile = ''
          END
       END

       IF currentFile
          !set the search target to be the entire line
          stxPosition = SciControl.PositionFromLine(ResultQueue.LineNo - 1)
          eolPosition = SciControl.PositionFromLine(ResultQueue.LineNo) - 1

          SciControl.SetTargetStart(stxPosition)
          SciControl.SetTargetEnd(eolPosition)

          LOOP
             lFoundNext = SciControl.SearchInTarget(LEN(FindGroup.What),FindGroup.What)
             IF lFoundNext = -1
                BREAK
             ELSIF lFoundNext = INVALID_POSITION
                BREAK
             ELSE
                bFileModified = TRUE
                bLineModified = TRUE
                lFoundPosition = lFoundNext
                SciControl.SetSel(lFoundPosition + LEN(FindGroup.What), lFoundPosition)
                SciControl.TargetFromSelection()
                cchReplace = SciControl.ReplaceTarget(LEN(szReplaceWith),szReplaceWith)
                ProcessQueue.Replacements += 1
                nReplacements += 1
                SciControl.SetAnchor(lFoundPosition + (LEN(szReplaceWith) + 1))
                SciControl.SetCurrentPos(SciControl.GetAnchor())

                eolPosition = SciControl.PositionFromLine(ResultQueue.LineNo) - 1
                IF SciControl.GetCurrentPos() >= eolPosition
                   !we are finished with this line
                   BREAK
                ELSE
                   SciControl.SetTargetStart(SciControl.GetCurrentPos())
                   SciControl.SetTargetEnd(eolPosition)
                END
             END
          END
          SciControl.GotoPos(stxPosition)
          IF bLineModified
             bLineModified = FALSE
             SciControl.GetCurLine(SIZE(ResultQueue.Text),ResultQueue.Text)
             PUT(ResultQueue)
          END
       ELSE
          !failed to open the file
       END
    END

    !save last file processed
    IF ProcessQueue.Replacements = 0 AND ProcessQueue.Modified = FALSE
       ProcessQueue.FilenameStyle = 2
       ProcessQueue.ReplacementsStyle = 2
    END
    PUT(ProcessQueue)

    IF currentFile AND bFileModified
       SciControl.SaveFile(currentFile)
       bFileModified = FALSE
       DIRECTORY(fileQueue, currentFile, ff_:Normal)
       LOOP n = QueueFilePointer TO i - 1
          GET(ResultQueue,n)
          ResultQueue.FileDate = fileQueue.Date
          ResultQueue.FileTime = fileQueue.Time
          PUT(ResultQUeue)
       END
    END

    GET(ResultQueue,ResultQueuePtr)

    IF RECORDS(ProcessQueue) > 0
       GET(ProcessQueue,1)
       ?ProcessedFileList{PROP:Selected} = 1
       SciControl.SetHide(TRUE)
       Window{PROP:Hide} = FALSE
    ELSE
       POST(EVENT:CloseWindow)
    END
[END]
[END]
WHEN 'Kill'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 8500
PROPERTY:END
IF SELF.Opened
  listBoxFormat = ?ProcessedFileList{PROP:Format}
  INIMgr.Update('winReplaceInResults','ListBoxFormat',listBoxFormat)
END
[SOURCE]
PROPERTY:BEGIN
PRIORITY 9800
PROPERTY:END
SciControl.Kill()
SETKEYCODE(0)
[END]
[END]
[END]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3000
PROPERTY:END
listBoxFormat        CSTRING(256)
[END]
EMBED %ResizerMethodDataSection
[INSTANCES]
WHEN '3'
[INSTANCES]
WHEN 'Resize'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
ColumnWidth          LONG
[END]
[END]
[END]
[END]
EMBED %ResizerMethodCodeSection
[INSTANCES]
WHEN '3'
[INSTANCES]
WHEN 'Resize'
[INSTANCES]
WHEN '(),BYTE'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 2500
PROPERTY:END
ColumnWidth = ?ProcessedFileList{PROPLIST:width,1}
[SOURCE]
PROPERTY:BEGIN
PRIORITY 7500
PROPERTY:END
?ProcessedFileList{PROPLIST:width,2} = ?ProcessedFileList{PROP:Width} - ColumnWidth
[END]
[END]
[END]
[END]
EMBED %WindowEventHandling
[INSTANCES]
WHEN 'AlertKey'
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
 CASE KEYCODE()
   OF UpKey
      FORWARDKEY(?ProcessedFileList)
   OF DownKey
      FORWARDKEY(?ProcessedFileList)
   OF PgUpKey
      FORWARDKEY(?ProcessedFileList)
   OF PgDnKey
      FORWARDKEY(?ProcessedFileList)
   OF CtrlPgUp
      FORWARDKEY(?ProcessedFileList)
   OF CtrlPgDn
      FORWARDKEY(?ProcessedFileList)
   OF CtrlHome
      FORWARDKEY(?ProcessedFileList)
   OF CtrlEnd
      FORWARDKEY(?ProcessedFileList)
 END
[END]
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[ADDITION]
NAME SciTPL CSciControl
[INSTANCE]
INSTANCE 2
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('CSciControl')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('CSciControl') ('CSciControl')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('CSciControl') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('CSciControl') ('OpenFile {15}PROCEDURE(*CSTRING szFileName),BOOL,PROC,DERIVED')

%GenerateScintilla LONG  (1)
%ControlID DEFAULT  ('1002')
%NotificationEvent DEFAULT  ('EVENT:USER')
%GlobalObject DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('CSciControl') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('CSciControl') ('SciControl')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('CSciControl') (0)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('CSciControl') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('CSciControl') ('CSciViewer')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('CSciControl') (1)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 1
WHEN  ('CSciControl') (1)

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 1
WHEN  ('CSciControl')TIMES 1
WHEN  (1) ('SaveFile')

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 1
WHEN  ('CSciControl')TIMES 1
WHEN  (1) ('(*CSTRING szFilename),BOOL,PROC')

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('CSciControl')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('CSciControl')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

[ADDITION]
NAME ABC WindowResize
[FIELDPROMPT]
%ResizeAnchorTop DEPEND %Control LONG TIMES 0

%ResizeAnchorLeft DEPEND %Control LONG TIMES 0

%ResizeAnchorRight DEPEND %Control LONG TIMES 0

%ResizeAnchorBottom DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowTop DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowLeft DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowRight DEPEND %Control LONG TIMES 0

%ResizeAnchorGrowBottom DEPEND %Control LONG TIMES 0

[INSTANCE]
INSTANCE 3
[PROMPTS]
%ClassItem UNIQUE DEFAULT  ('Default')
%DefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('WindowResizeClass')

%ActualDefaultBaseClassType DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('')

%ClassLines DEPEND %ClassItem MULTI DEFAULT TIMES 1
WHEN  ('Default') ('Init {19}PROCEDURE(BYTE AppStrategy=AppStrategy:Resize,BYTE SetWindowMinSize=False,BYTE SetWindowMaxSize=False)', |
  'Resize {17}PROCEDURE(),BYTE,PROC,DERIVED')

%AppStrategy DEFAULT  ('Spread')
%RestrictMinSize LONG  (1)
%WindowMinWidth DEFAULT  ('')
%WindowMinHeight DEFAULT  ('')
%RestrictMaxSize LONG  (0)
%WindowMaxWidth DEFAULT  ('')
%WindowMaxHeight DEFAULT  ('')
%AutoFindParents DEFAULT  ('Default')
%DeferMoves DEFAULT  ('Default')
%OverrideControls MULTI LONG  (1, 2, 3, 4, 5)
%OverrideControl DEPEND %OverrideControls DEFAULT TIMES 5
WHEN  (1) ('?sciControl:Region')
WHEN  (2) ('?ProcessedFileList')
WHEN  (3) ('?String1')
WHEN  (4) ('?String2')
WHEN  (5) ('?String3')

%DisableResize DEPEND %OverrideControls LONG TIMES 5
WHEN  (1) (1)
WHEN  (2) (0)
WHEN  (3) (0)
WHEN  (4) (0)
WHEN  (5) (0)

%HorizResize DEPEND %OverrideControls DEFAULT TIMES 5
WHEN  (1) ('Resize')
WHEN  (2) ('Constant Right Border')
WHEN  (3) ('Lock Width')
WHEN  (4) ('Lock Width')
WHEN  (5) ('Lock Width')

%VertResize DEPEND %OverrideControls DEFAULT TIMES 5
WHEN  (1) ('Resize')
WHEN  (2) ('Constant Bottom Border')
WHEN  (3) ('Lock Height')
WHEN  (4) ('Lock Height')
WHEN  (5) ('Lock Height')

%HorizPositional DEPEND %OverrideControls DEFAULT TIMES 5
WHEN  (1) ('Move')
WHEN  (2) ('Fix Left')
WHEN  (3) ('Fix Left')
WHEN  (4) ('Fix Left')
WHEN  (5) ('Fix Left')

%VertPositional DEPEND %OverrideControls DEFAULT TIMES 5
WHEN  (1) ('Move')
WHEN  (2) ('Fix Top')
WHEN  (3) ('Fix Bottom')
WHEN  (4) ('Fix Bottom')
WHEN  (5) ('Fix Bottom')

%GlobalObject DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('NO')

%ThisObjectName DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('Resizer')

%UseDefaultABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%UseABCBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (1)

%ABCBaseClass DEPEND %ClassItem DEFAULT TIMES 1
WHEN  ('Default') ('ADOBlob')

%ExtBaseClass DEPEND %ClassItem DEFAULT TIMES 0

%BaseClassIncludeFile DEPEND %ClassItem DEFAULT TIMES 0

%DeriveFromBaseClass DEPEND %ClassItem LONG TIMES 1
WHEN  ('Default') (0)

%NewMethods DEPEND %ClassItem MULTI LONG TIMES 0

%NewMethodName DEPEND %NewMethods DEFAULT TIMES 0

%NewMethodPrototype DEPEND %NewMethods DEFAULT TIMES 0

%NewClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%NewClassProperty DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataType DEPEND %NewClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%NewClassOtherType DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataIsRef DEPEND %NewClassPropertyItems LONG TIMES 0

%NewClassDataSize DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim1 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim2 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim3 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%NewClassDataDim4 DEPEND %NewClassPropertyItems DEFAULT TIMES 0

%ClassMethods DEPEND %ClassItem MULTI LONG TIMES 0

%ClassMethodName DEPEND %ClassMethods DEFAULT TIMES 0

%ClassMethodPrototype DEPEND %ClassMethods DEFAULT TIMES 0

%ClassPropertyItems DEPEND %ClassItem MULTI LONG TIMES 0

%ClassProperty DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataType DEPEND %ClassPropertyItems DEFAULT TIMES 1
WHEN  ('Default')TIMES 0

%ClassOtherType DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataIsRef DEPEND %ClassPropertyItems LONG TIMES 0

%ClassDataSize DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim1 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim2 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim3 DEPEND %ClassPropertyItems DEFAULT TIMES 0

%ClassDataDim4 DEPEND %ClassPropertyItems DEFAULT TIMES 0

[CALLS]
CorrectForOffScreen
[WINDOW]
Window  WINDOW('Replace in Results'),AT(,,244,108),FONT('Segoe UI',10),RESIZE,ALRT(CtrlEnd), |
          ALRT(CtrlHome),ALRT(CtrlPgDn),ALRT(CtrlPgUp),ALRT(DownKey),ALRT(PgDnKey),ALRT(PgUpKey), |
          ALRT(UpKey),CENTER,GRAY,SYSTEM
          TEXT,AT(1,1,242,106),USE(?sciControl:Region),#ORIG(?sciControl:Region),#SEQ(2),#ORDINAL(1)
          LIST,AT(4,4,236,70),USE(?ProcessedFileList),VSCROLL,FORMAT('60R(2)|MY~Replace' & |
            'ments~@n13@140L(2)|MY~FIlename~S(256)@s255@'),FROM(ProcessQueue),#FIELDS(Replacements, |
            Filename),#ORDINAL(2)
          STRING('Black - File processed, changes saved.'),AT(4,76,236,10),USE(?String1),TRN, |
            #ORDINAL(3)
          STRING('Gray  - File processed, no changes.'),AT(4,86,236,10),USE(?String2),FONT(, |
            ,COLOR:Gray),TRN,#ORDINAL(4)
          STRING('Red   - File modified after the creation of the result list, not processed.'), |
            AT(4,96,236,10),USE(?String3),FONT(,,COLOR:Red),TRN,#ORDINAL(5)
        END

[END]
[MODULE]
[COMMON]
DESCRIPTION 'Generated Source Module'
FROM ABC GENERATED
MODIFIED '2015/05/16' '13:51:09'
[EMBED]
EMBED %StartOfModule
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[END]
[END]
[PROCEDURE]
NAME RestorePointTimer
[COMMON]
FROM ABC Source
MODIFIED '2015/05/17' ' 7:50:01'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
TimerWindow WINDOW,TIMER(6000)
    END
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
  glo:RestorePointTimerThread = THREAD()
  OPEN(TimerWindow)
  TimerWindow{PROP:Timer} = glo:RestorePointTimerInterval * 60 * 100
  TimerWindow{PROP:Hide} = TRUE
  ACCEPT
     CASE EVENT()
       OF EVENT:CloseDown OROF EVENT:CloseWindow
          BREAK
       OF EVENT:Timer
          POST(EVENT:CreateRestorePoint,,1,TRUE)
     END
  END
  CLOSE(TimerWindow)
  glo:RestorePointTimerThread = 0
  RETURN
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[END]

[PROCEDURE]
NAME LoadFileExtensionQueue
PROTOTYPE '(FileModeQueueType FileModeQueue),STRING'
PARAMETERS '(FileModeQueueType FileModeQueue)'
[COMMON]
FROM ABC Source
MODIFIED '2017/08/07' '16:35:09'
[PROMPTS]
%GenerateOpenClose LONG  (0)
%GenerateSaveRestore LONG  (0)
[EMBED]
EMBED %DataSection
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 50
PROPERTY:END
DOO CLASS                      !Created 05/24/20  3:04PM by Do2Class by Carl Barnes
AddClarionDefault PROCEDURE()
AddTextDefault    PROCEDURE()
GetFileExtensions PROCEDURE()
SetupFileModeMenu PROCEDURE()
    END  !4 Routines Found


!region Notices
! ================================================================================
! Notice : Copyright (C) 2017, Devuna
!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
!
!    This file is part of Devuna-KwikSourceSearch (https://github.com/Devuna/Devuna-KwikSourceSearch)
!
!    Devuna-KwikSourceSearch is free software: you can redistribute it and/or modify
!    it under the terms of the MIT License as published by
!    the Open Source Initiative.
!
!    Devuna-KwikSourceSearch is distributed in the hope that it will be useful,
!    but WITHOUT ANY WARRANTY; without even the implied warranty of
!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!    MIT License for more details.
!
!    You should have received a copy of the MIT License
!    along with Devuna-KwikSourceSearch.  If not, see <https://opensource.org/licenses/MIT>.
! ================================================================================
!endregion Notices
[SOURCE]
PROPERTY:BEGIN
PRIORITY 1300
PROPERTY:END
FileModes      QUEUE(FILE:queue),PRE(fm)
               END
bClarionFound  BOOL(FALSE)
bTextFound     BOOL(FALSE)
szSearchFolder CSTRING(260)
FileModeMenu   CSTRING(1025)
[END]
EMBED %ProcessedCode
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 5000
PROPERTY:END
      FREE(FileExtensionQueue)

      !get user properties
      szSearchFolder = svSpecialFolder.GetDir(SV:CSIDL_APPDATA, 'Devuna' & '\' & 'KSS\')
      DOO.GetFileExtensions()

      !get system properties
      szSearchFolder = LONGPATH() & '\'
      DOO.GetFileExtensions()

      !if clarion properties file not found
      !add the default file extensions
      !clw cln equ inc int prj tpl tpw trn txa txd txr
      IF bClarionFound = FALSE
         DOO.AddClarionDefault()
      END

      !if text properties file not found
      !add the default file extensions
      IF bTextFound = FALSE
         DOO.AddTextDefault()
      END

      !setup the file mode menu
      DOO.SetupFileModeMenu()

      RETURN FileModeMenu
[END]
EMBED %LocalProcedures
[DEFINITION]
[SOURCE]
PROPERTY:BEGIN
PRIORITY 3500
PROPERTY:END
DOO.GetFileExtensions    PROCEDURE()
i              LONG
j              LONG
cc             LONG
pStart         LONG
pSpace         LONG
szPath         CSTRING(MAXPATH+1)
szDrive        CSTRING(MAXDRIVE+1)
szDir          CSTRING(MAXDIR+1)
szName         CSTRING(MAXFILE+1)
szExtension    CSTRING(MAXEXT+1)
szProperties   CSTRING(MAXPATH)
szBuffer       CSTRING(SIZE(AsciiFile.Buffer)+1)
szLexer        LIKE(FileExtensionQueue.Lexer)
nLexer         LONG

   CODE
      szLexer = 'text'
      FREE(FileModes)
      !IF szSearchFolder[LEN(szSearchFolder)] <> '\'
      !   szSearchFolder = szSearchFolder & '\'
      !END
      DIRECTORY(FileModes,szSearchFolder & '*.properties',0)
      j = RECORDS(FileModes)
      IF j > 0
         LOOP i = 1 TO j
            GET(FileModes,i)
            szPath = CLIP(FileModes.Name)
            cc = kcr_fnSplit(szPath, szDrive, szDir, szName, szExtension)
            CASE LOWER(szName)
              OF 'clarion'
                 bClarionFound = TRUE
              OF 'text'
                 bTextFound = TRUE
            END
            AsciiFilename = szSearchFolder & szPath
            OPEN(AsciiFile,ReadOnly+DenyNone)
            IF NOT ERRORCODE()
               SET(AsciiFile)
               NEXT(AsciiFile)
               LOOP UNTIL ERRORCODE()
                  szBuffer = CLIP(LEFT(AsciiFile.Buffer))
                  IF UPPER(szBuffer[1 : 6]) = 'LEXER='
                     szLexer = LOWER(CLIP(LEFT(szBuffer[7 : LEN(szBuffer)])))
                     CASE szLexer
                       OF 'clarion'
                          nLexer = SCLEX_CLWNOCASE
                       OF 'cpp'
                          nLexer = SCLEX_CPP
                       OF 'html'
                          nLexer = SCLEX_HTML
                       OF 'text'
                          nLexer = SCLEX_NULL
                     ELSE
                        IF NUMERIC(szLexer)
                           nLexer = szLexer
                        ELSIF szLexer[1 : 6] = 'sclex_'
                           nLexer = GetLexerNumber(szLexer)
                        ELSE
                           nLexer = SCLEX_NULL
                        END
                        szLexer = 'text'
                     END
                  ELSIF UPPER(AsciiFile.Buffer[1 : 7]) = '[FILEPA'   !File Patterns
                     !pStart = 1
                     NEXT(AsciiFile)
                     LOOP UNTIL ERRORCODE()
                        pStart = 1
                        szBuffer = CLIP(LEFT(AsciiFile.Buffer))
                        IF szBuffer[1] = '['
                           BREAK
                        ELSIF szBuffer <> '' AND szBuffer[1] <> '!'
                           !clw cln equ inc int prj tpl tpw trn txa txd txr
                           pSpace = INSTRING(' ',szBuffer,,pStart)
                           LOOP WHILE pSpace > 0
                              FileExtensionQueue.Extension = UPPER(szBuffer[pStart : pSpace-1])
                              GET(FileExtensionQueue,FileExtensionQueue.Extension)
                              !IF ERRORCODE() !not found
                                 FileExtensionQueue.Extension = UPPER(szBuffer[pStart : pSpace-1])
                                 FileExtensionQueue.FileMode = LOWER(szName)
                                 FileExtensionQueue.Lexer = szLexer
                                 FileExtensionQueue.nLexer = nLexer
                                 ADD(FileExtensionQueue,+FileExtensionQueue.Extension)
                              !END
                              pStart = pSpace+1
                              pSpace = INSTRING(' ',szBuffer,,pStart)
                           END
                           FileExtensionQueue.Extension = UPPER(szBuffer[pStart : LEN(szBuffer)])
                           GET(FileExtensionQueue,FileExtensionQueue.Extension)
                           !IF ERRORCODE() !not found
                              FileExtensionQueue.Extension = UPPER(szBuffer[pStart : LEN(szBuffer)])
                              FileExtensionQueue.FileMode = LOWER(szName)
                              FileExtensionQueue.Lexer = szLexer
                              FileExtensionQueue.nLexer = nLexer
                              ADD(FileExtensionQueue,+FileExtensionQueue.Extension)
                           !END
                        END
                        NEXT(AsciiFile)
                     END
                     BREAK
                  END
                  NEXT(AsciiFile)
               END
               CLOSE(AsciiFile)
            ELSE
               MESSAGE('Unexpected error opening ' & AsciiFilename & '|' & ERROR(),'Load File Extension Queue',ICON:HAND)
            END
         END
      END

DOO.AddClarionDefault    PROCEDURE()
i              LONG
j              LONG

   CODE
      FileModes.Name = LONGPATH() & '\clarion.properties'
      ADD(FileModes,+FileModes.Name)
      LOOP i = 1 TO 13
         EXECUTE i
            FileExtensionQueue.Extension = '*.CLA'
            FileExtensionQueue.Extension = '*.CLW'
            FileExtensionQueue.Extension = '*.CLN'
            FileExtensionQueue.Extension = '*.EQU'
            FileExtensionQueue.Extension = '*.INC'
            FileExtensionQueue.Extension = '*.INT'
            FileExtensionQueue.Extension = '*.PRJ'
            FileExtensionQueue.Extension = '*.TPL'
            FileExtensionQueue.Extension = '*.TPW'
            FileExtensionQueue.Extension = '*.TRN'
            FileExtensionQueue.Extension = '*.TXA'
            FileExtensionQueue.Extension = '*.TXD'
            FileExtensionQueue.Extension = '*.TXR'
         END
         GET(FileExtensionQueue,FileExtensionQueue.Extension)
         IF ERRORCODE() !not found
            EXECUTE i
               FileExtensionQueue.Extension = '*.CLA'
               FileExtensionQueue.Extension = '*.CLW'
               FileExtensionQueue.Extension = '*.CLN'
               FileExtensionQueue.Extension = '*.EQU'
               FileExtensionQueue.Extension = '*.INC'
               FileExtensionQueue.Extension = '*.INT'
               FileExtensionQueue.Extension = '*.PRJ'
               FileExtensionQueue.Extension = '*.TPL'
               FileExtensionQueue.Extension = '*.TPW'
               FileExtensionQueue.Extension = '*.TRN'
               FileExtensionQueue.Extension = '*.TXA'
               FileExtensionQueue.Extension = '*.TXD'
               FileExtensionQueue.Extension = '*.TXR'
            END
            FileExtensionQueue.FileMode = 'clarion'
            FileExtensionQueue.Lexer = 'clarion'
            FileExtensionQueue.nLexer = SCLEX_CLWNOCASE
            ADD(FileExtensionQueue,+FileExtensionQueue.Extension)
         END
      END
   RETURN

DOO.AddTextDefault    PROCEDURE()
i              LONG
j              LONG

   CODE
      FileModes.Name = LONGPATH() & '\text.properties'
      ADD(FileModes,+FileModes.Name)
      LOOP i = 1 TO 3
         EXECUTE i
            FileExtensionQueue.Extension = '*.ASC'
            FileExtensionQueue.Extension = '*.CSV'
            FileExtensionQueue.Extension = '*.TXT'
         END
         GET(FileExtensionQueue,FileExtensionQueue.Extension)
         IF ERRORCODE() !not found
            EXECUTE i
               FileExtensionQueue.Extension = '*.ASC'
               FileExtensionQueue.Extension = '*.CSV'
               FileExtensionQueue.Extension = '*.TXT'
            END
            FileExtensionQueue.FileMode = 'text'
            FileExtensionQueue.Lexer = 'text'
            FileExtensionQueue.nLexer = SCLEX_NULL
            ADD(FileExtensionQueue,+FileExtensionQueue.Extension)
         END
      END
   RETURN

DOO.SetupFileModeMenu    PROCEDURE()
i              LONG
j              LONG
cc             LONG
szPath         CSTRING(MAXPATH+1)
szDrive        CSTRING(MAXDRIVE+1)
szDir          CSTRING(MAXDIR+1)
szName         CSTRING(MAXFILE+1)
szExtension    CSTRING(MAXEXT+1)

   CODE
      j = RECORDS(FileExtensionQueue)
      FREE(FileModeQueue)
      FileModeQueue.FileMode = ''
      LOOP i = 1 TO j
         GET(FileExtensionQueue,i)
         IF FileModeQueue.FileMode <> FileExtensionQueue.FileMode
            FileModeQueue.FileMode = FileExtensionQueue.FileMode
            GET(FileModeQueue,+FileModeQueue.FileMode)
            IF ERRORCODE()
               FileModeQueue.FileMode = FileExtensionQueue.FileMode
               FileModeQueue.Lexer = FileExtensionQueue.Lexer
               FileModeQueue.nLexer = FileExtensionQueue.nLexer
               ADD(FileModeQueue,+FileModeQueue.FileMode)
            END
         END
      END

      FileModeMenu = 'File Mode{{'
      j = RECORDS(FileModeQueue)
      LOOP i = 1 TO j
         GET(FileModeQueue,i)
         FileModeMenu = FileModeMenu & FileModeQueue.FileMode & '|'
      END
      FileModeMenu[LEN(FileModeMenu)] = '}'
   RETURN
[END]
[END]
[ADDITION]
NAME ABC cwHHProc
[INSTANCE]
INSTANCE 1
OWNER 2
[PROMPTS]
%cwHHFileName DEFAULT  ('')
%cwHHContextURL DEFAULT  ('')
%cwHHAltTrapKey DEFAULT  ('')
[CALLS]
GetLexerNumber
